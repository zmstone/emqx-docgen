authentication = [
  {
    ssl {
      cacertfile = "/path/to/cacertfile.pem"
      certfile = "/path/to/certfile.pem"
      keyfile = "/path/to/keyfile.pem"
      verify = verify_none
      reuse_sessions = true
      depth = 10
      password = ""
      versions = ["tlsv1.3", "tlsv1.2"]
      ciphers = []
      secure_renegotiate = true
      log_level = notice
      hibernate_after = "5s"
      partial_chain = false
      verify_peer_ext_key_usage = "clientAuth"
      enable = false
      server_name_indication = disable
    }
  }
]

authorization.sources = [
  {
    ssl {
      cacertfile = "/path/to/cacertfile.pem"
      certfile = "/path/to/certfile.pem"
      keyfile = "/path/to/keyfile.pem"
      verify = verify_none
      reuse_sessions = true
      depth = 10
      password = ""
      versions = ["tlsv1.3", "tlsv1.2"]
      ciphers = []
      secure_renegotiate = true
      log_level = notice
      hibernate_after = "5s"
      partial_chain = false
      verify_peer_ext_key_usage = "clientAuth"
      enable = false
      server_name_indication = disable
    }
  }
]

cluster.etcd.ssl_options {
  cacertfile = "/path/to/cacertfile.pem"
  certfile = "/path/to/certfile.pem"
  keyfile = "/path/to/keyfile.pem"
  verify = verify_none
  reuse_sessions = true
  depth = 10
  password = ""
  versions = ["tlsv1.3", "tlsv1.2"]
  ciphers = []
  secure_renegotiate = true
  log_level = notice
  hibernate_after = "5s"
  partial_chain = false
  verify_peer_ext_key_usage = "clientAuth"
  enable = false
  server_name_indication = disable
}

cluster.links = [
  {
    ssl {
      cacertfile = "/path/to/cacertfile.pem"
      certfile = "/path/to/certfile.pem"
      keyfile = "/path/to/keyfile.pem"
      verify = verify_none
      reuse_sessions = true
      depth = 10
      password = ""
      versions = ["tlsv1.3", "tlsv1.2"]
      ciphers = []
      secure_renegotiate = true
      log_level = notice
      hibernate_after = "5s"
      partial_chain = false
      verify_peer_ext_key_usage = "clientAuth"
      enable = false
      server_name_indication = disable
    }
  }
]

connectors.cassandra.myconnector1.ssl {
  cacertfile = "/path/to/cacertfile.pem"
  certfile = "/path/to/certfile.pem"
  keyfile = "/path/to/keyfile.pem"
  verify = verify_none
  reuse_sessions = true
  depth = 10
  password = ""
  versions = ["tlsv1.3", "tlsv1.2"]
  ciphers = []
  secure_renegotiate = true
  log_level = notice
  hibernate_after = "5s"
  partial_chain = false
  verify_peer_ext_key_usage = "clientAuth"
  enable = false
  server_name_indication = disable
}

connectors.couchbase.myconnector1.ssl {
  cacertfile = "/path/to/cacertfile.pem"
  certfile = "/path/to/certfile.pem"
  keyfile = "/path/to/keyfile.pem"
  verify = verify_none
  reuse_sessions = true
  depth = 10
  password = ""
  versions = ["tlsv1.3", "tlsv1.2"]
  ciphers = []
  secure_renegotiate = true
  log_level = notice
  hibernate_after = "5s"
  partial_chain = false
  verify_peer_ext_key_usage = "clientAuth"
  enable = false
  server_name_indication = disable
}

connectors.datalayers.myconnector1.ssl {
  cacertfile = "/path/to/cacertfile.pem"
  certfile = "/path/to/certfile.pem"
  keyfile = "/path/to/keyfile.pem"
  verify = verify_none
  reuse_sessions = true
  depth = 10
  password = ""
  versions = ["tlsv1.3", "tlsv1.2"]
  ciphers = []
  secure_renegotiate = true
  log_level = notice
  hibernate_after = "5s"
  partial_chain = false
  verify_peer_ext_key_usage = "clientAuth"
  enable = false
  server_name_indication = disable
}

connectors.elasticsearch.myconnector1.ssl {
  cacertfile = "/path/to/cacertfile.pem"
  certfile = "/path/to/certfile.pem"
  keyfile = "/path/to/keyfile.pem"
  verify = verify_none
  reuse_sessions = true
  depth = 10
  password = ""
  versions = ["tlsv1.3", "tlsv1.2"]
  ciphers = []
  secure_renegotiate = true
  log_level = notice
  hibernate_after = "5s"
  partial_chain = false
  verify_peer_ext_key_usage = "clientAuth"
  enable = false
  server_name_indication = disable
}

connectors.greptimedb.myconnector1.ssl {
  cacertfile = "/path/to/cacertfile.pem"
  certfile = "/path/to/certfile.pem"
  keyfile = "/path/to/keyfile.pem"
  verify = verify_none
  reuse_sessions = true
  depth = 10
  password = ""
  versions = ["tlsv1.3", "tlsv1.2"]
  ciphers = []
  secure_renegotiate = true
  log_level = notice
  hibernate_after = "5s"
  partial_chain = false
  verify_peer_ext_key_usage = "clientAuth"
  enable = false
  server_name_indication = disable
}

connectors.hstreamdb.myconnector1.ssl {
  cacertfile = "/path/to/cacertfile.pem"
  certfile = "/path/to/certfile.pem"
  keyfile = "/path/to/keyfile.pem"
  verify = verify_none
  reuse_sessions = true
  depth = 10
  password = ""
  versions = ["tlsv1.3", "tlsv1.2"]
  ciphers = []
  secure_renegotiate = true
  log_level = notice
  hibernate_after = "5s"
  partial_chain = false
  verify_peer_ext_key_usage = "clientAuth"
  enable = false
  server_name_indication = disable
}

connectors.http.myconnector1.ssl {
  cacertfile = "/path/to/cacertfile.pem"
  certfile = "/path/to/certfile.pem"
  keyfile = "/path/to/keyfile.pem"
  verify = verify_none
  reuse_sessions = true
  depth = 10
  password = ""
  versions = ["tlsv1.3", "tlsv1.2"]
  ciphers = []
  secure_renegotiate = true
  log_level = notice
  hibernate_after = "5s"
  partial_chain = false
  verify_peer_ext_key_usage = "clientAuth"
  enable = false
  server_name_indication = disable
}

connectors.influxdb.myconnector1.ssl {
  cacertfile = "/path/to/cacertfile.pem"
  certfile = "/path/to/certfile.pem"
  keyfile = "/path/to/keyfile.pem"
  verify = verify_none
  reuse_sessions = true
  depth = 10
  password = ""
  versions = ["tlsv1.3", "tlsv1.2"]
  ciphers = []
  secure_renegotiate = true
  log_level = notice
  hibernate_after = "5s"
  partial_chain = false
  verify_peer_ext_key_usage = "clientAuth"
  enable = false
  server_name_indication = disable
}

connectors.iotdb.myconnector1.ssl {
  cacertfile = "/path/to/cacertfile.pem"
  certfile = "/path/to/certfile.pem"
  keyfile = "/path/to/keyfile.pem"
  verify = verify_none
  reuse_sessions = true
  depth = 10
  password = ""
  versions = ["tlsv1.3", "tlsv1.2"]
  ciphers = []
  secure_renegotiate = true
  log_level = notice
  hibernate_after = "5s"
  partial_chain = false
  verify_peer_ext_key_usage = "clientAuth"
  enable = false
  server_name_indication = disable
}

connectors.matrix.myconnector1.ssl {
  cacertfile = "/path/to/cacertfile.pem"
  certfile = "/path/to/certfile.pem"
  keyfile = "/path/to/keyfile.pem"
  verify = verify_none
  reuse_sessions = true
  depth = 10
  password = ""
  versions = ["tlsv1.3", "tlsv1.2"]
  ciphers = []
  secure_renegotiate = true
  log_level = notice
  hibernate_after = "5s"
  partial_chain = false
  verify_peer_ext_key_usage = "clientAuth"
  enable = false
  server_name_indication = disable
}

connectors.mongodb.myconnector1.ssl {
  cacertfile = "/path/to/cacertfile.pem"
  certfile = "/path/to/certfile.pem"
  keyfile = "/path/to/keyfile.pem"
  verify = verify_none
  reuse_sessions = true
  depth = 10
  password = ""
  versions = ["tlsv1.3", "tlsv1.2"]
  ciphers = []
  secure_renegotiate = true
  log_level = notice
  hibernate_after = "5s"
  partial_chain = false
  verify_peer_ext_key_usage = "clientAuth"
  enable = false
  server_name_indication = disable
}

connectors.mqtt.myconnector1.ssl {
  cacertfile = "/path/to/cacertfile.pem"
  certfile = "/path/to/certfile.pem"
  keyfile = "/path/to/keyfile.pem"
  verify = verify_none
  reuse_sessions = true
  depth = 10
  password = ""
  versions = ["tlsv1.3", "tlsv1.2"]
  ciphers = []
  secure_renegotiate = true
  log_level = notice
  hibernate_after = "5s"
  partial_chain = false
  verify_peer_ext_key_usage = "clientAuth"
  enable = false
  server_name_indication = disable
}

connectors.mysql.myconnector1.ssl {
  cacertfile = "/path/to/cacertfile.pem"
  certfile = "/path/to/certfile.pem"
  keyfile = "/path/to/keyfile.pem"
  verify = verify_none
  reuse_sessions = true
  depth = 10
  password = ""
  versions = ["tlsv1.3", "tlsv1.2"]
  ciphers = []
  secure_renegotiate = true
  log_level = notice
  hibernate_after = "5s"
  partial_chain = false
  verify_peer_ext_key_usage = "clientAuth"
  enable = false
  server_name_indication = disable
}

connectors.pgsql.myconnector1.ssl {
  cacertfile = "/path/to/cacertfile.pem"
  certfile = "/path/to/certfile.pem"
  keyfile = "/path/to/keyfile.pem"
  verify = verify_none
  reuse_sessions = true
  depth = 10
  password = ""
  versions = ["tlsv1.3", "tlsv1.2"]
  ciphers = []
  secure_renegotiate = true
  log_level = notice
  hibernate_after = "5s"
  partial_chain = false
  verify_peer_ext_key_usage = "clientAuth"
  enable = false
  server_name_indication = disable
}

connectors.pulsar.myconnector1.ssl {
  cacertfile = "/path/to/cacertfile.pem"
  certfile = "/path/to/certfile.pem"
  keyfile = "/path/to/keyfile.pem"
  verify = verify_none
  reuse_sessions = true
  depth = 10
  password = ""
  versions = ["tlsv1.3", "tlsv1.2"]
  ciphers = []
  secure_renegotiate = true
  log_level = notice
  hibernate_after = "5s"
  partial_chain = false
  verify_peer_ext_key_usage = "clientAuth"
  enable = false
  server_name_indication = disable
}

connectors.rabbitmq.myconnector1.ssl {
  cacertfile = "/path/to/cacertfile.pem"
  certfile = "/path/to/certfile.pem"
  keyfile = "/path/to/keyfile.pem"
  verify = verify_none
  reuse_sessions = true
  depth = 10
  password = ""
  versions = ["tlsv1.3", "tlsv1.2"]
  ciphers = []
  secure_renegotiate = true
  log_level = notice
  hibernate_after = "5s"
  partial_chain = false
  verify_peer_ext_key_usage = "clientAuth"
  enable = false
  server_name_indication = disable
}

connectors.redis.myconnector1.ssl {
  cacertfile = "/path/to/cacertfile.pem"
  certfile = "/path/to/certfile.pem"
  keyfile = "/path/to/keyfile.pem"
  verify = verify_none
  reuse_sessions = true
  depth = 10
  password = ""
  versions = ["tlsv1.3", "tlsv1.2"]
  ciphers = []
  secure_renegotiate = true
  log_level = notice
  hibernate_after = "5s"
  partial_chain = false
  verify_peer_ext_key_usage = "clientAuth"
  enable = false
  server_name_indication = disable
}

connectors.rocketmq.myconnector1.ssl {
  cacertfile = "/path/to/cacertfile.pem"
  certfile = "/path/to/certfile.pem"
  keyfile = "/path/to/keyfile.pem"
  verify = verify_none
  reuse_sessions = true
  depth = 10
  password = ""
  versions = ["tlsv1.3", "tlsv1.2"]
  ciphers = []
  secure_renegotiate = true
  log_level = notice
  hibernate_after = "5s"
  partial_chain = false
  verify_peer_ext_key_usage = "clientAuth"
  enable = false
  server_name_indication = disable
}

connectors.s3.myconnector1.transport_options.ssl {
  cacertfile = "/path/to/cacertfile.pem"
  certfile = "/path/to/certfile.pem"
  keyfile = "/path/to/keyfile.pem"
  verify = verify_none
  reuse_sessions = true
  depth = 10
  password = ""
  versions = ["tlsv1.3", "tlsv1.2"]
  ciphers = []
  secure_renegotiate = true
  log_level = notice
  hibernate_after = "5s"
  partial_chain = false
  verify_peer_ext_key_usage = "clientAuth"
  enable = false
  server_name_indication = disable
}

connectors.snowflake.myconnector1.ssl {
  cacertfile = "/path/to/cacertfile.pem"
  certfile = "/path/to/certfile.pem"
  keyfile = "/path/to/keyfile.pem"
  verify = verify_none
  reuse_sessions = true
  depth = 10
  password = ""
  versions = ["tlsv1.3", "tlsv1.2"]
  ciphers = []
  secure_renegotiate = true
  log_level = notice
  hibernate_after = "5s"
  partial_chain = false
  verify_peer_ext_key_usage = "clientAuth"
  enable = false
  server_name_indication = disable
}

connectors.tablestore.myconnector1.ssl {
  cacertfile = "/path/to/cacertfile.pem"
  certfile = "/path/to/certfile.pem"
  keyfile = "/path/to/keyfile.pem"
  verify = verify_none
  reuse_sessions = true
  depth = 10
  password = ""
  versions = ["tlsv1.3", "tlsv1.2"]
  ciphers = []
  secure_renegotiate = true
  log_level = notice
  hibernate_after = "5s"
  partial_chain = false
  verify_peer_ext_key_usage = "clientAuth"
  enable = false
  server_name_indication = disable
}

connectors.timescale.myconnector1.ssl {
  cacertfile = "/path/to/cacertfile.pem"
  certfile = "/path/to/certfile.pem"
  keyfile = "/path/to/keyfile.pem"
  verify = verify_none
  reuse_sessions = true
  depth = 10
  password = ""
  versions = ["tlsv1.3", "tlsv1.2"]
  ciphers = []
  secure_renegotiate = true
  log_level = notice
  hibernate_after = "5s"
  partial_chain = false
  verify_peer_ext_key_usage = "clientAuth"
  enable = false
  server_name_indication = disable
}

file_transfer.storage.local.exporter.s3.transport_options.ssl {
  cacertfile = "/path/to/cacertfile.pem"
  certfile = "/path/to/certfile.pem"
  keyfile = "/path/to/keyfile.pem"
  verify = verify_none
  reuse_sessions = true
  depth = 10
  password = ""
  versions = ["tlsv1.3", "tlsv1.2"]
  ciphers = []
  secure_renegotiate = true
  log_level = notice
  hibernate_after = "5s"
  partial_chain = false
  verify_peer_ext_key_usage = "clientAuth"
  enable = false
  server_name_indication = disable
}

gateway.exproto.handler.ssl_options {
  cacertfile = "/path/to/cacertfile.pem"
  certfile = "/path/to/certfile.pem"
  keyfile = "/path/to/keyfile.pem"
  verify = verify_none
  reuse_sessions = true
  depth = 10
  password = ""
  versions = ["tlsv1.3", "tlsv1.2"]
  ciphers = []
  secure_renegotiate = true
  log_level = notice
  hibernate_after = "5s"
  partial_chain = false
  verify_peer_ext_key_usage = "clientAuth"
  enable = false
  server_name_indication = disable
}

opentelemetry.exporter.ssl_options {
  cacertfile = "/path/to/cacertfile.pem"
  certfile = "/path/to/certfile.pem"
  keyfile = "/path/to/keyfile.pem"
  verify = verify_none
  reuse_sessions = true
  depth = 10
  password = ""
  versions = ["tlsv1.3", "tlsv1.2"]
  ciphers = []
  secure_renegotiate = true
  log_level = notice
  hibernate_after = "5s"
  partial_chain = false
  verify_peer_ext_key_usage = "clientAuth"
  enable = false
  server_name_indication = disable
}