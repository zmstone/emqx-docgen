[
  {
    "tags" : [
      
    ],
    "paths" : [
      
    ],
    "full_name" : "emqx:Root Config Keys",
    "fields" : [
      {
        "importance" : "high",
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "emqx:listeners"
        },
        "name" : "listeners"
      },
      {
        "importance" : "medium",
        "aliases" : [
          
        ],
        "desc" : "全局的 MQTT 配置项。\nmqtt 下所有的配置作为全局的默认值存在，它可以被 <code>zone</code> 中的配置覆盖",
        "type" : {
          "kind" : "struct",
          "name" : "emqx:mqtt"
        },
        "name" : "mqtt"
      },
      {
        "raw_default" : [
          
        ],
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "默认的 MQTT 监听器的全局认证配置。\n\n有关每个监听器的单独配置，请参阅监听器配置中的<code>authentication</code>。\n\n此选项可配置为：\n<ul>\n  <li><code>[]</code>: 默认值，允许 *所有* 登录</li>\n  <li>one: 例如 <code>{enable:true,backend:\"built_in_database\",mechanism=\"password_based\"}</code></li>\n  <li>chain: 结构体数组。</li>\n</ul>\n\n当配置了一个认证链时，登录凭据将按照配置的顺序检查后端，直到可以做出'允许'或'拒绝'的决定。\n\n如果在完全遍历认证链之后没有决定，登录将被拒绝。",
        "type" : {
          "elements" : {
            "display_name" : "undefined",
            "members" : [
              {
                "kind" : "struct",
                "name" : "authn:builtin_db"
              },
              {
                "kind" : "struct",
                "name" : "authn:mysql"
              },
              {
                "kind" : "struct",
                "name" : "authn:postgresql"
              },
              {
                "kind" : "struct",
                "name" : "authn:mongo_single"
              },
              {
                "kind" : "struct",
                "name" : "authn:mongo_rs"
              },
              {
                "kind" : "struct",
                "name" : "authn:mongo_sharded"
              },
              {
                "kind" : "struct",
                "name" : "authn:redis_single"
              },
              {
                "kind" : "struct",
                "name" : "authn:redis_cluster"
              },
              {
                "kind" : "struct",
                "name" : "authn:redis_sentinel"
              },
              {
                "kind" : "struct",
                "name" : "authn:http_get"
              },
              {
                "kind" : "struct",
                "name" : "authn:http_post"
              },
              {
                "kind" : "struct",
                "name" : "authn:jwt_hmac"
              },
              {
                "kind" : "struct",
                "name" : "authn:jwt_public_key"
              },
              {
                "kind" : "struct",
                "name" : "authn:jwt_jwks"
              },
              {
                "kind" : "struct",
                "name" : "authn:scram"
              },
              {
                "kind" : "struct",
                "name" : "authn:ldap"
              },
              {
                "kind" : "struct",
                "name" : "authn:ldap_deprecated"
              }
            ],
            "kind" : "union"
          },
          "kind" : "array"
        },
        "name" : "authentication",
        "default" : {
          "oneliner" : true,
          "hocon" : "[]"
        }
      },
      {
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "授权（ACL）。EMQX 支持完整的客户端访问控制（ACL）。",
        "type" : {
          "kind" : "struct",
          "name" : "emqx:authorization"
        },
        "name" : "authorization"
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "emqx:node"
        },
        "name" : "node"
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "emqx:cluster"
        },
        "name" : "cluster"
      },
      {
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "EMQX 支持两种主要的日志处理进程：file 和 console，另有一个专门设计用于始终将日志定向到文件的 audit 处理进程。\n系统的默认日志处理行为可以通过环境变量 `EMQX_DEFAULT_LOG_HANDLER` 配置，它接受以下设置：\n\n- file：将日志输出仅定向到文件。\n- console：将日志输出仅定向到控制台。\n\n值得注意的是，当通过 systemd 的 emqx.service 文件启动 EMQX 时，EMQX_DEFAULT_LOG_HANDLER 被设置为 file。\n在 systemd 启动之外的场景中，console 作为默认的日志处理进程。",
        "type" : {
          "kind" : "struct",
          "name" : "emqx:log"
        },
        "name" : "log"
      },
      {
        "importance" : "low",
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "emqx:rpc"
        },
        "name" : "rpc"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "系统主题配置。",
        "type" : {
          "kind" : "struct",
          "name" : "emqx:sys_topics"
        },
        "name" : "sys_topics"
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "emqx:force_shutdown"
        },
        "name" : "force_shutdown"
      },
      {
        "importance" : "medium",
        "aliases" : [
          
        ],
        "desc" : "与 EMQX 持久存储相关的配置。\n\nEMQX 使用持久存储来卸载各种数据到磁盘，如 MQTT 消息。",
        "type" : {
          "kind" : "struct",
          "name" : "emqx:durable_storage"
        },
        "name" : "durable_storage"
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "emqx:force_gc"
        },
        "name" : "force_gc"
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "emqx:sysmon"
        },
        "name" : "sysmon"
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "emqx:alarm"
        },
        "name" : "alarm"
      },
      {
        "importance" : "medium",
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "emqx:flapping_detect"
        },
        "name" : "flapping_detect"
      },
      {
        "importance" : "low",
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "connector:connectors"
        },
        "name" : "connectors"
      },
      {
        "importance" : "low",
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "actions_and_sources:actions"
        },
        "name" : "actions"
      },
      {
        "importance" : "low",
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "actions_and_sources:sources"
        },
        "name" : "sources"
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "retainer"
        },
        "name" : "retainer"
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "emqxtel:telemetry"
        },
        "name" : "telemetry"
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "modules:delayed"
        },
        "name" : "delayed"
      },
      {
        "importance" : "low",
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "plugin:plugins"
        },
        "name" : "plugins"
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "dashboard"
        },
        "name" : "dashboard"
      },
      {
        "importance" : "low",
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "gateway"
        },
        "name" : "gateway"
      },
      {
        "raw_default" : {
          
        },
        "aliases" : [
          
        ],
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "struct",
              "name" : "prometheus:recommend_setting"
            },
            {
              "kind" : "struct",
              "name" : "prometheus:legacy_deprecated_setting"
            }
          ],
          "kind" : "union"
        },
        "name" : "prometheus",
        "default" : {
          "oneliner" : true,
          "hocon" : "{}"
        }
      },
      {
        "importance" : "low",
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "exhook"
        },
        "name" : "exhook"
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "psk:psk_authentication"
        },
        "name" : "psk_authentication"
      },
      {
        "importance" : "low",
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "slow_subs"
        },
        "name" : "slow_subs"
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "opentelemetry"
        },
        "name" : "opentelemetry"
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "api_key"
        },
        "name" : "api_key"
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "api_key"
    ],
    "full_name" : "api_key",
    "desc" : "API 密钥， 可用于请求除管理 API 密钥及 Dashboard 用户管理 API 的其它接口",
    "fields" : [
      {
        "raw_default" : "",
        "aliases" : [
          
        ],
        "desc" : "用于在启动 EMQX 时，添加 API 密钥，其格式为 {appid}:{secret}，多个密钥用换行分隔。：\n      ```\n      7e729ae70d23144b:2QILI9AcQ9BYlVqLDHQNWN2saIjBV4egr1CZneTNKr9CpK\n      ec3907f865805db0:Ee3taYltUKtoBVD9C3XjQl9C6NXheip8Z9B69BpUv5JxVHL\n      ```",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "bootstrap_file",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"\""
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "dashboard"
    ],
    "full_name" : "dashboard",
    "desc" : "EMQX Dashboard 配置。",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "Dashboard 监听器设置。监听器必须有唯一的端口号和 IP 地址的组合。\n例如，可以通过指定 IP 地址 0.0.0.0 来监听机器上给定端口上的所有配置的 IP 地址。\n或者，可以为每个监听器指定唯一的 IP 地址，但使用相同的端口。",
        "type" : {
          "kind" : "struct",
          "name" : "dashboard:listeners"
        },
        "name" : "listeners"
      },
      {
        "raw_default" : "public",
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "Dashboard 的默认密码，仅在首次启动 EMQX 之前配置有效。为了安全，应该尽快修改密码。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "default_password",
        "default" : {
          "oneliner" : true,
          "hocon" : "public"
        }
      },
      {
        "raw_default" : "60m",
        "aliases" : [
          
        ],
        "desc" : "登录成功返回的 JWT token 过期时间，默认为 60 分钟。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:duration()"
        },
        "name" : "token_expired_time",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"60m\""
        }
      },
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "CORS（Cross-Origin Resource Sharing，跨域资源共享）允许服务器响应来自任何来源（域名、协议或端口）的请求，启用后允许另一个域名下的服务直接通过 JavaScript 调用 EMQX REST API。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "cors",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "启用或禁用对 Swagger API 文档的支持。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "swagger_support",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "dashboard.listeners.http"
    ],
    "full_name" : "dashboard:http",
    "desc" : "Dashboard 监听器(HTTP)配置。",
    "fields" : [
      {
        "raw_default" : 0,
        "examples" : [
          [
            48,
            46,
            48,
            46,
            48,
            46,
            48,
            58,
            49,
            56,
            48,
            56,
            51
          ]
        ],
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "监听地址和端口，热更新此配置时，会重启 Dashboard 服务。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:ip_port()"
        },
        "name" : "bind",
        "default" : {
          "oneliner" : true,
          "hocon" : "0"
        }
      },
      {
        "raw_default" : 20,
        "importance" : "medium",
        "aliases" : [
          
        ],
        "desc" : "TCP 协议的 Socket acceptor 池大小, 通常配置为 CPU 核数",
        "type" : {
          "kind" : "primitive",
          "name" : "integer()"
        },
        "name" : "num_acceptors",
        "default" : {
          "oneliner" : true,
          "hocon" : "20"
        }
      },
      {
        "raw_default" : 512,
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "同时处理的最大连接数。",
        "type" : {
          "kind" : "primitive",
          "name" : "integer()"
        },
        "name" : "max_connections",
        "default" : {
          "oneliner" : true,
          "hocon" : "512"
        }
      },
      {
        "raw_default" : 1024,
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "排队等待连接的队列的最大长度。",
        "type" : {
          "kind" : "primitive",
          "name" : "integer()"
        },
        "name" : "backlog",
        "default" : {
          "oneliner" : true,
          "hocon" : "1024"
        }
      },
      {
        "raw_default" : "10s",
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "发送响应内容的超时时间。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:duration()"
        },
        "name" : "send_timeout",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"10s\""
        }
      },
      {
        "raw_default" : false,
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "启用 IPv6， 如果机器不支持 IPv6，请关闭此选项，否则会导致 Dashboard 无法使用。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "inet6",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "raw_default" : false,
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "当开启 inet6 功能的同时禁用 IPv4-to-IPv6 映射。该配置仅在 inet6 功能开启时有效。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "ipv6_v6only",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "raw_default" : false,
        "importance" : "medium",
        "aliases" : [
          
        ],
        "desc" : "启用 Proxy Protocol 以提取客户端连接的原始信息，要求使用了代理服务器并且代理服务器也启用 Proxy Protocol。注意：一旦开启了这个功能，就无法再处理普通的 HTTP 请求。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "proxy_header",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "dashboard.listeners.https"
    ],
    "full_name" : "dashboard:https",
    "desc" : "Dashboard 监听器(HTTPS)配置。",
    "fields" : [
      {
        "raw_default" : 0,
        "examples" : [
          [
            48,
            46,
            48,
            46,
            48,
            46,
            48,
            58,
            49,
            56,
            48,
            56,
            52
          ]
        ],
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "监听地址和端口，热更新此配置时，会重启 Dashboard 服务。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:ip_port()"
        },
        "name" : "bind",
        "default" : {
          "oneliner" : true,
          "hocon" : "0"
        }
      },
      {
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "Dashboard 监听器的 SSL/TLS 选项。",
        "type" : {
          "kind" : "struct",
          "name" : "dashboard:ssl_options"
        },
        "name" : "ssl_options"
      },
      {
        "raw_default" : 20,
        "importance" : "medium",
        "aliases" : [
          
        ],
        "desc" : "TCP 协议的 Socket acceptor 池大小, 通常配置为 CPU 核数",
        "type" : {
          "kind" : "primitive",
          "name" : "integer()"
        },
        "name" : "num_acceptors",
        "default" : {
          "oneliner" : true,
          "hocon" : "20"
        }
      },
      {
        "raw_default" : 512,
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "同时处理的最大连接数。",
        "type" : {
          "kind" : "primitive",
          "name" : "integer()"
        },
        "name" : "max_connections",
        "default" : {
          "oneliner" : true,
          "hocon" : "512"
        }
      },
      {
        "raw_default" : 1024,
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "排队等待连接的队列的最大长度。",
        "type" : {
          "kind" : "primitive",
          "name" : "integer()"
        },
        "name" : "backlog",
        "default" : {
          "oneliner" : true,
          "hocon" : "1024"
        }
      },
      {
        "raw_default" : "10s",
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "发送响应内容的超时时间。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:duration()"
        },
        "name" : "send_timeout",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"10s\""
        }
      },
      {
        "raw_default" : false,
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "启用 IPv6， 如果机器不支持 IPv6，请关闭此选项，否则会导致 Dashboard 无法使用。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "inet6",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "raw_default" : false,
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "当开启 inet6 功能的同时禁用 IPv4-to-IPv6 映射。该配置仅在 inet6 功能开启时有效。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "ipv6_v6only",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "raw_default" : false,
        "importance" : "medium",
        "aliases" : [
          
        ],
        "desc" : "启用 Proxy Protocol 以提取客户端连接的原始信息，要求使用了代理服务器并且代理服务器也启用 Proxy Protocol。注意：一旦开启了这个功能，就无法再处理普通的 HTTP 请求。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "proxy_header",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "dashboard.listeners"
    ],
    "full_name" : "dashboard:listeners",
    "desc" : "Dashboard 监听器配置。",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "TCP listeners",
        "type" : {
          "kind" : "struct",
          "name" : "dashboard:http"
        },
        "name" : "http"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "SSL listeners",
        "type" : {
          "kind" : "struct",
          "name" : "dashboard:https"
        },
        "name" : "https"
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "dashboard.listeners.https.ssl_options"
    ],
    "full_name" : "dashboard:ssl_options",
    "desc" : "Dashboard 监听器的 SSL/TLS 选项。",
    "fields" : [
      {
        "raw_default" : "${EMQX_ETC_DIR}/certs/cacert.pem",
        "aliases" : [
          
        ],
        "desc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "cacertfile",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"${EMQX_ETC_DIR}/certs/cacert.pem\""
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "Deprecated since 5.1.4.",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "cacerts"
      },
      {
        "raw_default" : "${EMQX_ETC_DIR}/certs/cert.pem",
        "aliases" : [
          
        ],
        "desc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "certfile",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"${EMQX_ETC_DIR}/certs/cert.pem\""
        }
      },
      {
        "raw_default" : "${EMQX_ETC_DIR}/certs/key.pem",
        "aliases" : [
          
        ],
        "desc" : "PEM 格式的私钥文件。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "keyfile",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"${EMQX_ETC_DIR}/certs/key.pem\""
        }
      },
      {
        "raw_default" : "verify_none",
        "aliases" : [
          
        ],
        "desc" : "启用或禁用对等验证。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "verify_peer",
            "verify_none"
          ]
        },
        "name" : "verify",
        "default" : {
          "oneliner" : true,
          "hocon" : "verify_none"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "启用 TLS 会话重用。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "reuse_sessions",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : 10,
        "aliases" : [
          
        ],
        "desc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
        "type" : {
          "kind" : "primitive",
          "name" : "non_neg_integer()"
        },
        "name" : "depth",
        "default" : {
          "oneliner" : true,
          "hocon" : "10"
        }
      },
      {
        "examples" : [
          ""
        ],
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "password"
      },
      {
        "raw_default" : [
          "tlsv1.3",
          "tlsv1.2"
        ],
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
        "type" : {
          "elements" : {
            "kind" : "primitive",
            "name" : "atom()"
          },
          "kind" : "array"
        },
        "name" : "versions",
        "default" : {
          "oneliner" : true,
          "hocon" : "[\"tlsv1.3\", \"tlsv1.2\"]"
        }
      },
      {
        "raw_default" : [
          
        ],
        "aliases" : [
          
        ],
        "desc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
        "type" : {
          "elements" : {
            "kind" : "primitive",
            "name" : "string()"
          },
          "kind" : "array"
        },
        "name" : "ciphers",
        "default" : {
          "oneliner" : true,
          "hocon" : "[]"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "secure_renegotiate",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : "notice",
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "emergency",
            "alert",
            "critical",
            "error",
            "warning",
            "notice",
            "info",
            "debug",
            "none",
            "all"
          ]
        },
        "name" : "log_level",
        "default" : {
          "oneliner" : true,
          "hocon" : "notice"
        }
      },
      {
        "raw_default" : "5s",
        "aliases" : [
          
        ],
        "desc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:duration()"
        },
        "name" : "hibernate_after",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"5s\""
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "如果协商使用 Diffie-Hellman 密钥交换的密码套件，则服务器将使用包含 PEM 编码的 Diffie-Hellman 参数的文件的路径。如果未指定，则使用默认参数。<br/>\n注意：TLS 1.3 不支持<code>dhfile</code>选项。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "dhfile"
      },
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "TLS/DTLS 服务器与 {verify，verify_peer} 一起使用。\n如果设置为 true，则如果客户端没有要发送的证书，即发送空证书，服务器将失败。\n如果设置为 false，则仅当客户端发送无效证书（空证书被视为有效证书）时才会失败。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "fail_if_no_peer_cert",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "一个重要的安全设置，它强制根据服务器指定的顺序而不是客户机指定的顺序设置密码，从而强制服务器管理员执行（通常配置得更正确）安全顺序。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "honor_cipher_order",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "在支持客户机发起的重新协商的协议中，这种操作的资源成本对于服务器来说高于客户机。\n这可能会成为拒绝服务攻击的载体。\nSSL 应用程序已经采取措施来反击此类尝试，但通过将此选项设置为 false，可以严格禁用客户端发起的重新协商。\n默认值为 true。请注意，由于基础密码套件可以加密的消息数量有限，禁用重新协商可能会导致长期连接变得不可用。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "client_renegotiation",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : "15s",
        "aliases" : [
          
        ],
        "desc" : "握手完成所允许的最长时间",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:duration()"
        },
        "name" : "handshake_timeout",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15s\""
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "durable_storage.messages"
    ],
    "full_name" : "durable_storage:builtin_local",
    "desc" : "Builtin storage backend utilizing embedded RocksDB key-value store.\nThis backend doesn't support clustering.",
    "fields" : [
      {
        "raw_default" : "builtin_local",
        "importance" : "medium",
        "aliases" : [
          
        ],
        "desc" : "Backend type.",
        "type" : {
          "kind" : "singleton",
          "name" : "builtin_local"
        },
        "name" : "backend",
        "default" : {
          "oneliner" : true,
          "hocon" : "builtin_local"
        }
      },
      {
        "importance" : "medium",
        "aliases" : [
          
        ],
        "desc" : "数据库所在的文件系统目录。\n\n默认情况下，它等于 node.data_dir。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "data_dir"
      },
      {
        "raw_default" : 16,
        "importance" : "medium",
        "aliases" : [
          
        ],
        "desc" : "内置的持久存储将数据分成多个分片。\n此配置参数定义分片的数量。\n请注意，它仅在持久存储数据库初始化期间生效。\n在数据库已经创建后更改此配置参数将不会产生任何效果。",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "n_shards",
        "default" : {
          "oneliner" : true,
          "hocon" : "16"
        }
      },
      {
        "raw_default" : {
          "type" : "wildcard_optimized_v2"
        },
        "importance" : "medium",
        "aliases" : [
          
        ],
        "desc" : "存储布局是一种在磁盘上排列来自各种主题和客户端消息的方法。\n\n根据工作负载类型和主题结构的不同，可以采用不同的数据存储策略，以最大化地提高从持久存储中读取消息的效率。",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "struct",
              "name" : "durable_storage:layout_builtin_wildcard_optimized_v2"
            },
            {
              "kind" : "struct",
              "name" : "durable_storage:layout_builtin_wildcard_optimized"
            },
            {
              "kind" : "struct",
              "name" : "durable_storage:layout_builtin_reference"
            }
          ],
          "kind" : "union"
        },
        "name" : "layout",
        "default" : {
          "oneliner" : true,
          "hocon" : "{type = wildcard_optimized_v2}"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "durable_storage.messages.layout"
    ],
    "full_name" : "durable_storage:layout_builtin_reference",
    "desc" : "一种简单的布局类型，将所有主题的所有消息按时间顺序存储在一个流中。\n\n不推荐用于生产环境。",
    "fields" : [
      {
        "raw_default" : "reference",
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "参考布局类型",
        "type" : {
          "kind" : "singleton",
          "name" : "reference"
        },
        "name" : "type",
        "default" : {
          "oneliner" : true,
          "hocon" : "reference"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "durable_storage.messages.layout"
    ],
    "full_name" : "durable_storage:layout_builtin_wildcard_optimized",
    "desc" : "通配符优化 布局旨在最大化覆盖大量主题的通配符订阅的吞吐量。\n\n例如，它可以处理大量客户端将数据发布到包含其客户端 ID 的主题的场景，如：sensor/%device-version%/%clientid%/temperature、sensor/%device-version%/%clientid%/pressure 等。\n此布局将自动将此类主题分组到单个流中，因此订阅包含通配符的主题过滤器（如 sensor/+/+/temperature）的客户端将能够以单个批次消费所有设备发布的消息。\n\n此布局对非通配符订阅也是有效的。",
    "fields" : [
      {
        "raw_default" : "wildcard_optimized",
        "aliases" : [
          
        ],
        "desc" : "通配符优化布局类型。",
        "type" : {
          "kind" : "singleton",
          "name" : "wildcard_optimized"
        },
        "name" : "type",
        "default" : {
          "oneliner" : true,
          "hocon" : "wildcard_optimized"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "durable_storage.messages.layout"
    ],
    "full_name" : "durable_storage:layout_builtin_wildcard_optimized_v2",
    "desc" : "通配符优化 布局旨在最大化覆盖大量主题的通配符订阅的吞吐量。\n\n例如，它可以处理大量客户端将数据发布到包含其客户端 ID 的主题的场景，如：sensor/%device-version%/%clientid%/temperature、sensor/%device-version%/%clientid%/pressure 等。\n此布局将自动将此类主题分组到单个流中，因此订阅包含通配符的主题过滤器（如 sensor/+/+/temperature）的客户端将能够以单个批次消费所有设备发布的消息。\n\n此布局对非通配符订阅也是有效的。",
    "fields" : [
      {
        "raw_default" : "wildcard_optimized_v2",
        "aliases" : [
          
        ],
        "desc" : "通配符优化布局类型。",
        "type" : {
          "kind" : "singleton",
          "name" : "wildcard_optimized_v2"
        },
        "name" : "type",
        "default" : {
          "oneliner" : true,
          "hocon" : "wildcard_optimized_v2"
        }
      }
    ]
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "cluster.dns"
    ],
    "full_name" : "emqx:cluster_dns",
    "desc" : "DNS SRV 记录服务发现。",
    "fields" : [
      {
        "raw_default" : "localhost",
        "aliases" : [
          
        ],
        "desc" : "指定 DNS A 记录的名字。emqx 会通过访问这个 DNS A 记录来获取 IP 地址列表。\n当<code>cluster.discovery_strategy</code> 为 <code>dns</code> 时有效。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "name",
        "default" : {
          "oneliner" : true,
          "hocon" : "localhost"
        }
      },
      {
        "raw_default" : "a",
        "aliases" : [
          
        ],
        "desc" : "DNS 记录类型。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "a",
            "aaaa",
            "srv"
          ]
        },
        "name" : "record_type",
        "default" : {
          "oneliner" : true,
          "hocon" : "a"
        }
      }
    ]
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "cluster.etcd"
    ],
    "full_name" : "emqx:cluster_etcd",
    "desc" : "使用 'etcd' 服务的服务发现。",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "指定 etcd 服务的地址。如有多个服务使用逗号 , 分隔。\n当 cluster.discovery_strategy 为 etcd 时，此配置项才有效。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:comma_separated_list()"
        },
        "name" : "server"
      },
      {
        "raw_default" : "emqxcl",
        "aliases" : [
          
        ],
        "desc" : "指定 etcd 路径的前缀。每个节点在 etcd 中都会创建一个路径:\nv2/keys/<prefix>/<cluster.name>/<node.name> <br/>\n当 cluster.discovery_strategy 为 etcd 时，此配置项才有效。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "prefix",
        "default" : {
          "oneliner" : true,
          "hocon" : "emqxcl"
        }
      },
      {
        "raw_default" : "1m",
        "aliases" : [
          
        ],
        "desc" : "指定 etcd 中节点信息的过期时间。\n当 cluster.discovery_strategy 为 etcd 时，此配置项才有效。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:duration()"
        },
        "name" : "node_ttl",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"1m\""
        }
      },
      {
        "aliases" : [
          "ssl"
        ],
        "desc" : "当使用 TLS 连接 etcd 时的配置选项。\n当 cluster.discovery_strategy 为 etcd 时，此配置项才有效。",
        "type" : {
          "kind" : "struct",
          "name" : "emqx:ssl_client_opts"
        },
        "name" : "ssl_options"
      }
    ]
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "cluster.k8s"
    ],
    "full_name" : "emqx:cluster_k8s",
    "desc" : "Kubernetes 服务发现。",
    "fields" : [
      {
        "raw_default" : "https://kubernetes.default.svc:443",
        "aliases" : [
          
        ],
        "desc" : "指定 Kubernetes API Server。如有多个 Server 使用逗号 , 分隔。\n当 cluster.discovery_strategy 为 k8s 时，此配置项才有效。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "apiserver",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"https://kubernetes.default.svc:443\""
        }
      },
      {
        "raw_default" : "emqx",
        "aliases" : [
          
        ],
        "desc" : "指定 Kubernetes 中 EMQX 的服务名。\n当 cluster.discovery_strategy 为 k8s 时，此配置项才有效。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "service_name",
        "default" : {
          "oneliner" : true,
          "hocon" : "emqx"
        }
      },
      {
        "raw_default" : "ip",
        "aliases" : [
          
        ],
        "desc" : "当使用 k8s 方式集群时，address_type 用来从 Kubernetes 接口的应答里获取什么形式的 Host 列表。\n指定 <code>cluster.k8s.address_type</code> 为 <code>ip</code>，则将从 Kubernetes 接口中获取集群中其他节点\n的 IP 地址。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "ip",
            "dns",
            "hostname"
          ]
        },
        "name" : "address_type",
        "default" : {
          "oneliner" : true,
          "hocon" : "ip"
        }
      },
      {
        "raw_default" : "default",
        "aliases" : [
          
        ],
        "desc" : "当使用 k8s 方式并且 cluster.k8s.address_type 指定为 dns 类型时，\n可设置 emqx 节点名的命名空间。与 cluster.k8s.suffix 一起使用用以拼接得到节点名列表。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "namespace",
        "default" : {
          "oneliner" : true,
          "hocon" : "default"
        }
      },
      {
        "raw_default" : "pod.local",
        "aliases" : [
          
        ],
        "desc" : "当使用 k8s 方式并且 cluster.k8s.address_type 指定为 dns 类型时，可设置 emqx 节点名的后缀。\n与 cluster.k8s.namespace 一起使用用以拼接得到节点名列表。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "suffix",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"pod.local\""
        }
      }
    ]
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "cluster.static"
    ],
    "full_name" : "emqx:cluster_static",
    "desc" : "静态节点服务发现。新节点通过连接一个节点来加入集群。",
    "fields" : [
      {
        "raw_default" : [
          
        ],
        "aliases" : [
          
        ],
        "desc" : "集群中的 EMQX 节点名称列表，\n指定固定的节点列表，多个节点间使用逗号 , 分隔。\n当 cluster.discovery_strategy 为 static 时，此配置项才有效。\n适合于节点数量较少且固定的集群。",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "primitive",
              "name" : "emqx_schema:comma_separated_atoms()"
            },
            {
              "elements" : {
                "kind" : "primitive",
                "name" : "atom()"
              },
              "kind" : "array"
            }
          ],
          "kind" : "union"
        },
        "name" : "seeds",
        "default" : {
          "oneliner" : true,
          "hocon" : "[]"
        }
      }
    ]
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "authorization"
    ],
    "full_name" : "emqx:authorization",
    "desc" : "授权相关",
    "fields" : [
      {
        "raw_default" : "allow",
        "aliases" : [
          
        ],
        "desc" : "如果用户或客户端不匹配 ACL 规则，或者从可配置授权源(比如内置数据库、HTTP API 或 PostgreSQL 等。)内未找\n到此类用户或客户端时，模式的认访问控制操作。\n在“授权”中查找更多详细信息。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "allow",
            "deny"
          ]
        },
        "name" : "no_match",
        "default" : {
          "oneliner" : true,
          "hocon" : "allow"
        }
      },
      {
        "raw_default" : "ignore",
        "aliases" : [
          
        ],
        "desc" : "授权检查拒绝操作时的操作。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "ignore",
            "disconnect"
          ]
        },
        "name" : "deny_action",
        "default" : {
          "oneliner" : true,
          "hocon" : "ignore"
        }
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "emqx:authz_cache"
        },
        "name" : "cache"
      },
      {
        "raw_default" : [
          {
            "type" : "file",
            "path" : "${EMQX_ETC_DIR}/acl.conf",
            "enable" : true
          }
        ],
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "<br/>\n授权（ACL）数据提供者的数组。\n它被设计为一个数组，而不是哈希映射，因此可以\n将源按顺序排列形成访问控制链。<br/>\n\n在授权 '发布' 或 '订阅' 操作时，配置的\n源会按顺序检查。在检查 ACL 源时，\n如果未找到客户端（通过用户名或客户端 ID 标识），\n则继续检查下一个源。一旦返回 '允许' 或 '拒绝' 决定，\n立即停止检查。<br/>\n\n如果在任何源中都未找到客户端，\n则应用 'authorization.no_match' 中配置的默认操作。<br/>\n\n注意：\n源元素由它们的 '类型' 标识。\n不允许配置两个或更多相同类型的源。",
        "type" : {
          "elements" : {
            "display_name" : "undefined",
            "members" : [
              {
                "kind" : "struct",
                "name" : "authz:file"
              },
              {
                "kind" : "struct",
                "name" : "authz:builtin_db"
              },
              {
                "kind" : "struct",
                "name" : "authz:http_get"
              },
              {
                "kind" : "struct",
                "name" : "authz:http_post"
              },
              {
                "kind" : "struct",
                "name" : "authz:redis_single"
              },
              {
                "kind" : "struct",
                "name" : "authz:redis_sentinel"
              },
              {
                "kind" : "struct",
                "name" : "authz:redis_cluster"
              },
              {
                "kind" : "struct",
                "name" : "authz:mysql"
              },
              {
                "kind" : "struct",
                "name" : "authz:postgresql"
              },
              {
                "kind" : "struct",
                "name" : "authz:mongo_single"
              },
              {
                "kind" : "struct",
                "name" : "authz:mongo_rs"
              },
              {
                "kind" : "struct",
                "name" : "authz:mongo_sharded"
              },
              {
                "kind" : "struct",
                "name" : "authz:ldap"
              }
            ],
            "kind" : "union"
          },
          "kind" : "array"
        },
        "name" : "sources",
        "extra" : {
          "doc_lift" : true
        },
        "default" : {
          "oneliner" : true,
          "hocon" : "[{enable = true, path = \"${EMQX_ETC_DIR}/acl.conf\", type = file}]"
        }
      }
    ]
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "cluster"
    ],
    "full_name" : "emqx:cluster",
    "desc" : "EMQX 节点可以组成一个集群，以提高总容量。<br/> 这里指定了节点之间如何连接。",
    "fields" : [
      {
        "raw_default" : "emqxcl",
        "aliases" : [
          
        ],
        "desc" : "EMQX 集群名称。每个集群都有一个唯一的名称。服务发现时会用于做路径的一部分。",
        "type" : {
          "kind" : "primitive",
          "name" : "atom()"
        },
        "name" : "name",
        "default" : {
          "oneliner" : true,
          "hocon" : "emqxcl"
        }
      },
      {
        "raw_default" : "manual",
        "aliases" : [
          
        ],
        "desc" : "集群节点发现方式。可选值为:\n- manual: 使用 <code>emqx ctl cluster</code> 命令管理集群。<br/>\n- static: 配置静态节点。配置几个固定的节点，新节点通过连接固定节点中的某一个来加入集群。<br/>\n- dns: 使用 DNS A 记录的方式发现节点。<br/>\n- etcd: 使用 etcd 发现节点。<br/>\n- k8s: 使用 Kubernetes API 发现节点。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "manual",
            "static",
            "singleton",
            "dns",
            "etcd",
            "k8s"
          ]
        },
        "name" : "discovery_strategy",
        "default" : {
          "oneliner" : true,
          "hocon" : "manual"
        }
      },
      {
        "raw_default" : "24h",
        "aliases" : [
          
        ],
        "desc" : "指定多久之后从集群中删除离线节点。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:duration()"
        },
        "name" : "autoclean",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"24h\""
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "集群脑裂自动恢复机制开关。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "autoheal",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : "inet_tcp",
        "aliases" : [
          
        ],
        "desc" : "分布式 Erlang 集群协议类型。可选值为:<br/>\n- inet_tcp: 使用 IPv4 <br/>\n- inet_tls: 使用 TLS，需要配合 <code>etc/ssl_dist.conf</code> 一起使用。<br/>\n- inet6_tcp: IPv6 TCP <br/>\n- inet6_tls: IPv6 TLS， 与 <code>etc/ssl_dist.conf</code> 配合使用。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "inet_tcp",
            "inet6_tcp",
            "inet_tls",
            "inet6_tls"
          ]
        },
        "name" : "proto_dist",
        "default" : {
          "oneliner" : true,
          "hocon" : "inet_tcp"
        }
      },
      {
        "raw_default" : 0,
        "aliases" : [
          
        ],
        "desc" : "QUIC stack LB Mode\n- 0: disabled (Default)\n- 1: server_ip\n- 2: server_id_fixed",
        "type" : {
          "kind" : "primitive",
          "name" : "integer()"
        },
        "name" : "quic_lb_mode",
        "default" : {
          "oneliner" : true,
          "hocon" : "0"
        }
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "emqx:cluster_static"
        },
        "name" : "static"
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "emqx:cluster_dns"
        },
        "name" : "dns"
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "emqx:cluster_etcd"
        },
        "name" : "etcd"
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "emqx:cluster_k8s"
        },
        "name" : "k8s"
      }
    ]
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "log.console"
    ],
    "full_name" : "emqx:console_handler",
    "desc" : "日志处理进程将日志事件打印到 EMQX 控制台。",
    "fields" : [
      {
        "raw_default" : "warning",
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "当前日志处理进程的日志级别。\n默认为 warning 级别。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "debug",
            "info",
            "notice",
            "warning",
            "error",
            "critical",
            "alert",
            "emergency",
            "all"
          ]
        },
        "name" : "level",
        "default" : {
          "oneliner" : true,
          "hocon" : "warning"
        }
      },
      {
        "raw_default" : false,
        "importance" : "medium",
        "aliases" : [
          
        ],
        "desc" : "启用此日志处理进程。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "enable",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "raw_default" : "text",
        "importance" : "medium",
        "aliases" : [
          "format"
        ],
        "desc" : "选择日志格式类型。 <code>text</code> 用于纯文本，<code>json</code> 用于结构化日志记录。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "text",
            "json"
          ]
        },
        "name" : "formatter",
        "default" : {
          "oneliner" : true,
          "hocon" : "text"
        }
      },
      {
        "raw_default" : "auto",
        "importance" : "medium",
        "aliases" : [
          
        ],
        "desc" : "选择时间戳格式：\n- `auto`：自动选择最佳格式。`epoch` 给 JSON 日志 `rfc3339` 给自由文本格式。\n- `epoch`： 微秒精度的 Unix epoch 整形值。\n- `rfc3339`： 遵从 RFC3339 规范的字符串格式。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "auto",
            "epoch",
            "rfc3339"
          ]
        },
        "name" : "timestamp_format",
        "default" : {
          "oneliner" : true,
          "hocon" : "auto"
        }
      },
      {
        "raw_default" : "system",
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "日志中的时间戳使用的时间偏移量。\n可选值为：\n  - <code>system</code>: 本地系统使用的时区偏移量\n  - <code>utc</code>: 0 时区的偏移量\n  - <code>+-[hh]:[mm]</code>: 自定义偏移量，比如 \"-02:00\" 或者 \"+00:00\"\n默认值为本地系统的时区偏移量：<code>system</code>。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "time_offset",
        "default" : {
          "oneliner" : true,
          "hocon" : "system"
        }
      },
      {
        "raw_default" : "text",
        "aliases" : [
          
        ],
        "desc" : "确定跟踪文件中有效负载格式的格式。<br/>\n`text`：基于文本的协议或纯文本协议。\n建议在有效负载为 JSON 编码时使用<br/>\n`hex`：二进制十六进制编码。当有效负载是自定义二进制协议时，建议使用此选项<br/>\n`hidden`：有效负载被模糊化为 `******`",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "hex",
            "text",
            "hidden"
          ]
        },
        "name" : "payload_encode",
        "default" : {
          "oneliner" : true,
          "hocon" : "text"
        }
      }
    ]
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "log"
    ],
    "full_name" : "emqx:log",
    "desc" : "EMQX 支持同时多个日志输出，一个控制台输出，和多个文件输出。\n默认情况下，EMQX 运行在容器中，或者在 'console' 或 'foreground' 模式下运行时，会输出到 控制台，否则输出到文件。",
    "fields" : [
      {
        "importance" : "high",
        "aliases" : [
          "console_handler"
        ],
        "type" : {
          "kind" : "struct",
          "name" : "emqx:console_handler"
        },
        "name" : "console"
      },
      {
        "raw_default" : {
          "level" : "warning"
        },
        "importance" : "high",
        "aliases" : [
          "file_handlers"
        ],
        "desc" : "输出到文件的日志处理进程列表",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "struct",
              "name" : "emqx:log_file_handler"
            },
            {
              "kind" : "map",
              "values" : {
                "kind" : "struct",
                "name" : "emqx:log_file_handler"
              },
              "name" : "handler_name"
            }
          ],
          "kind" : "union"
        },
        "name" : "file",
        "default" : {
          "oneliner" : true,
          "hocon" : "{level = warning}"
        }
      },
      {
        "importance" : "medium",
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "emqx:log_throttling"
        },
        "name" : "throttling"
      }
    ]
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "log.file",
      "log.file.$handler_name"
    ],
    "full_name" : "emqx:log_file_handler",
    "desc" : "日志处理进程将日志事件打印到文件。",
    "fields" : [
      {
        "raw_default" : "${EMQX_LOG_DIR}/emqx.log",
        "importance" : "high",
        "aliases" : [
          "file",
          "to"
        ],
        "desc" : "日志文件路径及名字。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "path",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"${EMQX_LOG_DIR}/emqx.log\""
        }
      },
      {
        "raw_default" : 10,
        "importance" : "medium",
        "aliases" : [
          "rotation"
        ],
        "desc" : "轮换的最大日志文件数。",
        "type" : {
          "kind" : "primitive",
          "name" : "1..128"
        },
        "name" : "rotation_count",
        "default" : {
          "oneliner" : true,
          "hocon" : "10"
        }
      },
      {
        "raw_default" : "50MB",
        "importance" : "medium",
        "aliases" : [
          "max_size"
        ],
        "desc" : "此参数控制日志文件轮换。 `infinity` 意味着日志文件将无限增长，否则日志文件将在达到 `max_size`（以字节为单位）时进行轮换。\n与 rotation count 配合使用。如果 counter 为 10，则是 10 个文件轮换。",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "singleton",
              "name" : "infinity"
            },
            {
              "kind" : "primitive",
              "name" : "emqx_schema:bytesize()"
            }
          ],
          "kind" : "union"
        },
        "name" : "rotation_size",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"50MB\""
        }
      },
      {
        "raw_default" : "warning",
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "当前日志处理进程的日志级别。\n默认为 warning 级别。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "debug",
            "info",
            "notice",
            "warning",
            "error",
            "critical",
            "alert",
            "emergency",
            "all"
          ]
        },
        "name" : "level",
        "default" : {
          "oneliner" : true,
          "hocon" : "warning"
        }
      },
      {
        "raw_default" : "text",
        "importance" : "medium",
        "aliases" : [
          "format"
        ],
        "desc" : "选择日志格式类型。 <code>text</code> 用于纯文本，<code>json</code> 用于结构化日志记录。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "text",
            "json"
          ]
        },
        "name" : "formatter",
        "default" : {
          "oneliner" : true,
          "hocon" : "text"
        }
      },
      {
        "raw_default" : "auto",
        "importance" : "medium",
        "aliases" : [
          
        ],
        "desc" : "选择时间戳格式：\n- `auto`：自动选择最佳格式。`epoch` 给 JSON 日志 `rfc3339` 给自由文本格式。\n- `epoch`： 微秒精度的 Unix epoch 整形值。\n- `rfc3339`： 遵从 RFC3339 规范的字符串格式。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "auto",
            "epoch",
            "rfc3339"
          ]
        },
        "name" : "timestamp_format",
        "default" : {
          "oneliner" : true,
          "hocon" : "auto"
        }
      },
      {
        "raw_default" : "system",
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "日志中的时间戳使用的时间偏移量。\n可选值为：\n  - <code>system</code>: 本地系统使用的时区偏移量\n  - <code>utc</code>: 0 时区的偏移量\n  - <code>+-[hh]:[mm]</code>: 自定义偏移量，比如 \"-02:00\" 或者 \"+00:00\"\n默认值为本地系统的时区偏移量：<code>system</code>。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "time_offset",
        "default" : {
          "oneliner" : true,
          "hocon" : "system"
        }
      },
      {
        "raw_default" : "text",
        "aliases" : [
          
        ],
        "desc" : "确定跟踪文件中有效负载格式的格式。<br/>\n`text`：基于文本的协议或纯文本协议。\n建议在有效负载为 JSON 编码时使用<br/>\n`hex`：二进制十六进制编码。当有效负载是自定义二进制协议时，建议使用此选项<br/>\n`hidden`：有效负载被模糊化为 `******`",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "hex",
            "text",
            "hidden"
          ]
        },
        "name" : "payload_encode",
        "default" : {
          "oneliner" : true,
          "hocon" : "text"
        }
      }
    ]
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "log.throttling"
    ],
    "full_name" : "emqx:log_throttling",
    "desc" : "日志限流功能通过在配置的时间窗口内丢弃除第一个事件外的所有事件，来减少可能泛滥的日志事件数量。\n如果 `console` 或 `file` 日志级别设置为 debug，则自动禁用限流。",
    "fields" : [
      {
        "raw_default" : "1m",
        "importance" : "medium",
        "aliases" : [
          
        ],
        "desc" : "此配置设置控制限流消息的日志记录行为，包括但不限于像 'authorization_permission_denied' 这样的消息。\n在每个定义的时间窗口内，只有一个限流消息的实例会被记录，以防止日志泛滥。\n在每个时间窗口结束时，将生成一个摘要日志，详细说明该期间内任何限流消息的发生。\n重要的是，此设置的最短有效时间窗口为 1 秒（1s）。\n如果指定的值低于 1s，则会自动调整为 1s。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:timeout_duration_s()"
        },
        "name" : "time_window",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"1m\""
        }
      }
    ]
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "node"
    ],
    "full_name" : "emqx:node",
    "desc" : "节点名称、Cookie、配置文件、数据目录和 Erlang 虚拟机（BEAM）启动参数。",
    "fields" : [
      {
        "raw_default" : "emqx@127.0.0.1",
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "节点名。格式为 \\<name>@\\<host>。其中 <host> 可以是 IP 地址，也可以是 FQDN。\n详见 http://erlang.org/doc/reference_manual/distributed.html。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "name",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"emqx@127.0.0.1\""
        }
      },
      {
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "分布式 Erlang 集群使用的 cookie 值。集群间保持一致",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "cookie"
      },
      {
        "raw_default" : 1048576,
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "Erlang 系统同时存在的最大端口数。\n实际选择的最大值可能比设置的数字大得多。\n参考: https://www.erlang.org/doc/man/erl.html",
        "type" : {
          "kind" : "primitive",
          "name" : "1024..134217727"
        },
        "name" : "max_ports",
        "default" : {
          "oneliner" : true,
          "hocon" : "1048576"
        }
      },
      {
        "raw_default" : 8192,
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "Erlang 分布式缓冲区的繁忙阈值，单位是 KB。",
        "type" : {
          "kind" : "primitive",
          "name" : "1..2097151"
        },
        "name" : "dist_buffer_size",
        "default" : {
          "oneliner" : true,
          "hocon" : "8192"
        }
      },
      {
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "节点数据存放目录，可能会自动创建的子目录如下：<br/>\n- `mnesia/<node_name>`。EMQX 的内置数据库目录。例如，`mnesia/emqx@127.0.0.1`。<br/>\n如果节点要被重新命名（例如，`emqx@10.0.1.1`）。旧目录应该首先被删除。<br/>\n- `configs`。在启动时生成的配置，以及集群/本地覆盖的配置。<br/>\n- `patches`: 热补丁文件将被放在这里。<br/>\n- `trace`: 日志跟踪文件。<br/>\n\n**注意**: 一个数据 dir 不能被两个或更多的 EMQX 节点同时使用。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "data_dir"
      },
      {
        "raw_default" : "15m",
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "系统调优参数，设置节点运行多久强制进行一次全局垃圾回收。禁用设置为 <code>disabled</code>。",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "singleton",
              "name" : "disabled"
            },
            {
              "kind" : "primitive",
              "name" : "emqx_schema:duration()"
            }
          ],
          "kind" : "union"
        },
        "name" : "global_gc_interval",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15m\""
        }
      },
      {
        "raw_default" : "core",
        "importance" : "high",
        "aliases" : [
          "db_role"
        ],
        "desc" : "选择节点的角色。<br/>\n<code>core</code> 节点提供数据的持久性，并负责写入。建议将核心节点放置在不同的机架或不同的可用区。<br/>\n<code>repliant</code> 节点是临时工作节点。 从集群中删除它们，不影响数据库冗余<br/>\n建议复制节点多于核心节点。<br/>\n注意：该参数仅在设置<code>backend</code>时生效到 <code>rlog</code>。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "core"
          ]
        },
        "name" : "role",
        "default" : {
          "oneliner" : true,
          "hocon" : "core"
        }
      }
    ]
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "rpc"
    ],
    "full_name" : "emqx:rpc",
    "desc" : "EMQX 使用 <code>gen_rpc</code> 库来实现跨节点通信。<br/>\n大多数情况下，默认的配置应该可以工作，但如果你需要做一些性能优化或者实验，可以尝试调整这些参数。",
    "fields" : [
      {
        "raw_default" : "async",
        "aliases" : [
          
        ],
        "desc" : "在 <code>sync</code> 模式下，发送端等待接收端的 ack 信号。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "sync",
            "async"
          ]
        },
        "name" : "mode",
        "default" : {
          "oneliner" : true,
          "hocon" : "async"
        }
      },
      {
        "raw_default" : "tcp",
        "aliases" : [
          "driver"
        ],
        "desc" : "集群间通信使用的传输协议。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "tcp",
            "ssl"
          ]
        },
        "name" : "protocol",
        "default" : {
          "oneliner" : true,
          "hocon" : "tcp"
        }
      },
      {
        "raw_default" : 256,
        "aliases" : [
          
        ],
        "desc" : "异步模式下，发送的批量消息的最大数量。",
        "type" : {
          "kind" : "primitive",
          "name" : "integer()"
        },
        "name" : "async_batch_size",
        "default" : {
          "oneliner" : true,
          "hocon" : "256"
        }
      },
      {
        "raw_default" : "stateless",
        "aliases" : [
          
        ],
        "desc" : "<code>manual</code>: 通过 <code>tcp_server_port</code> 来发现端口。\n<br/><code>stateless</code>: 使用无状态的方式来发现端口，使用如下算法。如果节点名称是 <code>\nemqxN@127.0.0.1</code>, N 是一个数字，那么监听端口就是 5370 + N。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "manual",
            "stateless"
          ]
        },
        "name" : "port_discovery",
        "default" : {
          "oneliner" : true,
          "hocon" : "stateless"
        }
      },
      {
        "raw_default" : 5369,
        "aliases" : [
          "tcp_server_port",
          "ssl_server_port"
        ],
        "desc" : "Listening port used by RPC local service.<br/>\nNote that this config only takes effect when rpc.port_discovery is set to manual.",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "server_port",
        "default" : {
          "oneliner" : true,
          "hocon" : "5369"
        }
      },
      {
        "raw_default" : 10,
        "aliases" : [
          "tcp_client_num"
        ],
        "desc" : "Set the maximum number of RPC communication channels initiated by this node to each remote node.",
        "type" : {
          "kind" : "primitive",
          "name" : "1..256"
        },
        "name" : "client_num",
        "default" : {
          "oneliner" : true,
          "hocon" : "10"
        }
      },
      {
        "raw_default" : "5s",
        "aliases" : [
          
        ],
        "desc" : "建立 RPC 连接的超时时间。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:duration()"
        },
        "name" : "connect_timeout",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"5s\""
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "TLS 证书文件的路径，用于验证集群节点的身份。\n只有当 <code>rpc.driver</code> 设置为 <code>ssl</code> 时，此配置才会生效。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "certfile"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "<code>rpc.certfile</code> 的私钥文件的路径。<br/>\n注意：此文件内容是私钥，所以需要设置权限为 600。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "keyfile"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "验证 <code>rpc.certfile</code> 的 CA 证书文件的路径。<br/>\n注意：集群中所有节点的证书必须使用同一个 CA 签发。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "cacertfile"
      },
      {
        "raw_default" : "5s",
        "aliases" : [
          
        ],
        "desc" : "发送 RPC 请求的超时时间。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:duration()"
        },
        "name" : "send_timeout",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"5s\""
        }
      },
      {
        "raw_default" : "5s",
        "aliases" : [
          
        ],
        "desc" : "远程节点认证的超时时间。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:duration()"
        },
        "name" : "authentication_timeout",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"5s\""
        }
      },
      {
        "raw_default" : "15s",
        "aliases" : [
          
        ],
        "desc" : "同步 RPC 的回复超时时间。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:duration()"
        },
        "name" : "call_receive_timeout",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15s\""
        }
      },
      {
        "raw_default" : "15m",
        "aliases" : [
          
        ],
        "desc" : "broker 之间的连接在最后一条消息发送后保持打开的时间。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:timeout_duration_s()"
        },
        "name" : "socket_keepalive_idle",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15m\""
        }
      },
      {
        "raw_default" : "75s",
        "aliases" : [
          
        ],
        "desc" : "keepalive 消息的间隔。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:timeout_duration_s()"
        },
        "name" : "socket_keepalive_interval",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"75s\""
        }
      },
      {
        "raw_default" : 9,
        "aliases" : [
          
        ],
        "desc" : "keepalive 探测消息发送失败的次数，直到 RPC 连接被认为已经断开。",
        "type" : {
          "kind" : "primitive",
          "name" : "integer()"
        },
        "name" : "socket_keepalive_count",
        "default" : {
          "oneliner" : true,
          "hocon" : "9"
        }
      },
      {
        "raw_default" : "1MB",
        "aliases" : [
          
        ],
        "desc" : "TCP 调节参数。TCP 发送缓冲区大小。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:bytesize()"
        },
        "name" : "socket_sndbuf",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"1MB\""
        }
      },
      {
        "raw_default" : "1MB",
        "aliases" : [
          
        ],
        "desc" : "TCP 调节参数。TCP 接收缓冲区大小。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:bytesize()"
        },
        "name" : "socket_recbuf",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"1MB\""
        }
      },
      {
        "raw_default" : "1MB",
        "aliases" : [
          
        ],
        "desc" : "TCP 调节参数。用户模式套接字缓冲区大小。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:bytesize()"
        },
        "name" : "socket_buffer",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"1MB\""
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "兼容旧的无鉴权模式",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "insecure_fallback",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : [
          
        ],
        "aliases" : [
          
        ],
        "desc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
        "type" : {
          "elements" : {
            "kind" : "primitive",
            "name" : "string()"
          },
          "kind" : "array"
        },
        "name" : "ciphers",
        "default" : {
          "oneliner" : true,
          "hocon" : "[]"
        }
      },
      {
        "raw_default" : [
          "tlsv1.3",
          "tlsv1.2"
        ],
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
        "type" : {
          "elements" : {
            "kind" : "primitive",
            "name" : "atom()"
          },
          "kind" : "array"
        },
        "name" : "tls_versions",
        "default" : {
          "oneliner" : true,
          "hocon" : "[\"tlsv1.3\", \"tlsv1.2\"]"
        }
      },
      {
        "raw_default" : "0.0.0.0",
        "importance" : "medium",
        "aliases" : [
          
        ],
        "desc" : "指示 RPC 服务器监听的 IP 地址。例如，使用 <code>\"0.0.0.0\"</code> 表示 IPv4 或 <code>\"::\"</code> 表示 IPv6。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "listen_address",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"0.0.0.0\""
        }
      },
      {
        "raw_default" : false,
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "此设置仅在 <code>rpc.listen_address</code> 被分配了一个 IPv6 地址时有效。\n如果设置为 <code>true</code>，RPC 客户端将仅使用 IPv6 进行连接。\n否则，即使服务器位于 IPv6 上，客户端也可能选择 IPv4。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "ipv6_only",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      }
    ]
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "durable_storage"
    ],
    "full_name" : "emqx:durable_storage",
    "desc" : "与 EMQX 持久存储相关的配置。\n\nEMQX 使用持久存储来卸载各种数据到磁盘，如 MQTT 消息。",
    "fields" : [
      {
        "raw_default" : {
          "backend" : "builtin_local"
        },
        "importance" : "medium",
        "aliases" : [
          
        ],
        "desc" : "与 MQTT 消息的持久存储相关的配置。",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "struct",
              "name" : "durable_storage:builtin_local"
            }
          ],
          "kind" : "union"
        },
        "name" : "messages",
        "default" : {
          "oneliner" : true,
          "hocon" : "{backend = builtin_local}"
        }
      }
    ]
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "alarm"
    ],
    "full_name" : "emqx:alarm",
    "desc" : "Settings for the alarms.",
    "fields" : [
      {
        "raw_default" : [
          "log",
          "publish"
        ],
        "examples" : [
          [
            "log",
            "publish"
          ]
        ],
        "aliases" : [
          
        ],
        "desc" : "警报激活时触发的动作。<br/>目前，支持以下操作：<code>log</code> 和 <code>publish</code>.\n<code>log</code> 将告警写入日志 (控制台或者文件).\n<code>publish</code> 将告警作为 MQTT 消息发布到系统主题:\n<code>$SYS/brokers/emqx@xx.xx.xx.x/alarms/activate</code> and\n<code>$SYS/brokers/emqx@xx.xx.xx.x/alarms/deactivate</code>",
        "type" : {
          "elements" : {
            "kind" : "enum",
            "symbols" : [
              "log",
              "publish"
            ]
          },
          "kind" : "array"
        },
        "name" : "actions",
        "default" : {
          "oneliner" : true,
          "hocon" : "[log, publish]"
        }
      },
      {
        "raw_default" : 1000,
        "examples" : [
          1000
        ],
        "aliases" : [
          
        ],
        "desc" : "要保留为历史记录的已停用报警的最大总数。当超过此限制时，将删除最旧的停用报警，以限制总数。",
        "type" : {
          "kind" : "primitive",
          "name" : "1..3000"
        },
        "name" : "size_limit",
        "default" : {
          "oneliner" : true,
          "hocon" : "1000"
        }
      },
      {
        "raw_default" : "24h",
        "examples" : [
          [
            50,
            52,
            104
          ]
        ],
        "aliases" : [
          
        ],
        "desc" : "停用报警的保留时间。报警在停用时不会立即删除，而是在保留时间之后删除。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:duration()"
        },
        "name" : "validity_period",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"24h\""
        }
      }
    ]
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "authorization.cache"
    ],
    "full_name" : "emqx:authz_cache",
    "desc" : "Settings for the authorization cache.",
    "fields" : [
      {
        "raw_default" : 32,
        "aliases" : [
          
        ],
        "desc" : "缓存项的最大数量。",
        "type" : {
          "kind" : "primitive",
          "name" : "1..1048576"
        },
        "name" : "max_size",
        "default" : {
          "oneliner" : true,
          "hocon" : "32"
        }
      },
      {
        "raw_default" : "1m",
        "aliases" : [
          
        ],
        "desc" : "缓存数据的生存时间。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:duration()"
        },
        "name" : "ttl",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"1m\""
        }
      },
      {
        "raw_default" : [
          
        ],
        "aliases" : [
          
        ],
        "desc" : "排除主题列表，列表内的主题将不会生成授权缓存。",
        "type" : {
          "elements" : {
            "kind" : "primitive",
            "name" : "binary()"
          },
          "kind" : "array"
        },
        "name" : "excludes",
        "default" : {
          "oneliner" : true,
          "hocon" : "[]"
        }
      }
    ]
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "mqtt.client_attrs_init.$INDEX"
    ],
    "full_name" : "emqx:client_attrs_init",
    "desc" : "指定如何初始化客户端属性。每个属性可被初始化为 `client_attrs.{NAME}` ，其中 `{NAME}` 是在配置字段 `set_as_attr` 中指定的属性名称。初始化的客户端属性将以指定的名称存储在 `client_attrs` 属性中。然后，它们可以在身份验证和授权过程的模板中用作占位符。例如，当 `set_as_attr = alias` 时，使用 `${client_attrs.alias}` 来渲染 HTTP POST 请求体，或者渲染监听器配置 `moutpoint = devices/${client_attrs.alias}/` 来初始化每个客户端独有的主题命名空间。",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "单行表达式，用于求值一组预定义的字符串函数（类似规则引擎 SQL 语句中的函数）。\n表达式可以是带有嵌套调用的函数调用，或直接变量引用。\n目前，它不提供用户定义的变量绑定（如 `var a=1`）或用户定义的函数。\n例如，提取以点分隔的客户端 ID 的前缀：`nth(1, tokens(clientid, '.'))`。\n\n预绑定的变量包括：\n- `cn`: 客户端 TLS 证书的常用名称。\n- `dn`: 客户端 TLS 证书的专有名称（主题）。\n- `clientid`: MQTT 客户端 ID。\n- `username`: MQTT 客户端的用户名。\n- `user_property.{NAME}`: CONNECT 包中的用户属性。\n\n您可以在 EMQX 文档中了解更多关于各种表达式的信息。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "expression"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "从客户端数据中提取的客户端属性的名称。\n提取的属性将以此名称存储在 `client_attrs` 属性中。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "set_as_attr"
      }
    ]
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "listeners.ws.$name.websocket.deflate_opts",
      "listeners.wss.$name.websocket.deflate_opts"
    ],
    "full_name" : "emqx:deflate_opts",
    "desc" : "Compression options.",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "压缩级别",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "none",
            "default",
            "best_compression",
            "best_speed"
          ]
        },
        "name" : "level"
      },
      {
        "raw_default" : 8,
        "aliases" : [
          
        ],
        "desc" : "指定压缩状态的大小<br/>\n较低的值会减少每个连接的内存使用。",
        "type" : {
          "kind" : "primitive",
          "name" : "1..9"
        },
        "name" : "mem_level",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        }
      },
      {
        "raw_default" : "default",
        "aliases" : [
          
        ],
        "desc" : "指定压缩策略。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "default",
            "filtered",
            "huffman_only",
            "rle"
          ]
        },
        "name" : "strategy",
        "default" : {
          "oneliner" : true,
          "hocon" : "default"
        }
      },
      {
        "raw_default" : "takeover",
        "aliases" : [
          
        ],
        "desc" : "接管意味着在服务器消息之间保留压缩状态。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "takeover",
            "no_takeover"
          ]
        },
        "name" : "server_context_takeover",
        "default" : {
          "oneliner" : true,
          "hocon" : "takeover"
        }
      },
      {
        "raw_default" : "takeover",
        "aliases" : [
          
        ],
        "desc" : "接管意味着在客户端消息之间保留压缩状态。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "takeover",
            "no_takeover"
          ]
        },
        "name" : "client_context_takeover",
        "default" : {
          "oneliner" : true,
          "hocon" : "takeover"
        }
      },
      {
        "raw_default" : 15,
        "aliases" : [
          
        ],
        "desc" : "指定服务器压缩上下文的大小。",
        "type" : {
          "kind" : "primitive",
          "name" : "8..15"
        },
        "name" : "server_max_window_bits",
        "default" : {
          "oneliner" : true,
          "hocon" : "15"
        }
      },
      {
        "raw_default" : 15,
        "aliases" : [
          
        ],
        "desc" : "指定客户端压缩上下文的大小。",
        "type" : {
          "kind" : "primitive",
          "name" : "8..15"
        },
        "name" : "client_max_window_bits",
        "default" : {
          "oneliner" : true,
          "hocon" : "15"
        }
      }
    ]
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "sys_topics.sys_event_messages"
    ],
    "full_name" : "emqx:event_names",
    "desc" : "Enable or disable client lifecycle event publishing.\n\nThe following options affect MQTT clients as well as\ngateway clients. The types of the clients\nare distinguished by the topic prefix:\n\n- For the MQTT clients, the format is:\n`$SYS/broker/<node>/clients/<clientid>/<event>`\n- For the Gateway clients, it is\n`$SYS/broker/<node>/gateway/<gateway-name>/clients/<clientid>/<event>`\n",
    "fields" : [
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "是否开启客户端已连接事件消息。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "client_connected",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "是否开启客户端已断开连接事件消息。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "client_disconnected",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "是否开启客户端已成功订阅主题事件消息。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "client_subscribed",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "是否开启客户端已成功取消订阅主题事件消息。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "client_unsubscribed",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      }
    ]
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "flapping_detect"
    ],
    "full_name" : "emqx:flapping_detect",
    "desc" : "This config controls the allowed maximum number of `CONNECT` packets received\nfrom the same clientid in a time frame defined by `window_time`.\nAfter the limit is reached, successive `CONNECT` requests are forbidden\n(banned) until the end of the time period defined by `ban_time`.",
    "fields" : [
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "启用抖动检测功能。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "enable",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "raw_default" : "1m",
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "抖动检测的时间窗口。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:duration()"
        },
        "name" : "window_time",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"1m\""
        }
      },
      {
        "raw_default" : 15,
        "aliases" : [
          
        ],
        "desc" : "MQTT 客户端在“窗口”时间内允许的最大断开次数",
        "type" : {
          "kind" : "primitive",
          "name" : "non_neg_integer()"
        },
        "name" : "max_count",
        "default" : {
          "oneliner" : true,
          "hocon" : "15"
        }
      },
      {
        "raw_default" : "5m",
        "aliases" : [
          
        ],
        "desc" : "抖动的客户端将会被禁止登录多长时间。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:duration()"
        },
        "name" : "ban_time",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"5m\""
        }
      }
    ]
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "force_gc"
    ],
    "full_name" : "emqx:force_gc",
    "desc" : "Force garbage collection in MQTT connection process after\n they process certain number of messages or bytes of data.",
    "fields" : [
      {
        "raw_default" : 16000,
        "aliases" : [
          
        ],
        "desc" : "在进程收到多少消息之后，对此进程执行垃圾回收。",
        "type" : {
          "kind" : "primitive",
          "name" : "0..inf"
        },
        "name" : "count",
        "default" : {
          "oneliner" : true,
          "hocon" : "16000"
        }
      },
      {
        "raw_default" : "16MB",
        "aliases" : [
          
        ],
        "desc" : "在进程处理过多少个字节之后，对此进程执行垃圾回收。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:bytesize()"
        },
        "name" : "bytes",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"16MB\""
        }
      }
    ]
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "force_shutdown"
    ],
    "full_name" : "emqx:force_shutdown",
    "desc" : "When the process message queue length, or the memory bytes\nreaches a certain value, the process is forced to close.\n\nNote: \"message queue\" here refers to the \"message mailbox\"\nof the Erlang process, not the `mqueue` of QoS 1 and QoS 2.",
    "fields" : [
      {
        "raw_default" : 1000,
        "aliases" : [
          "max_message_queue_len"
        ],
        "desc" : "每个在线客户端在 EMQX 服务器中都是独立的一个进程。该配置可以设为单个进程的邮箱消息队列设置最大长度，当超过该上限时，客户端会被强制下线。",
        "type" : {
          "kind" : "primitive",
          "name" : "0..inf"
        },
        "name" : "max_mailbox_size",
        "default" : {
          "oneliner" : true,
          "hocon" : "1000"
        }
      },
      {
        "raw_default" : "32MB",
        "aliases" : [
          
        ],
        "desc" : "Heap 的总大小。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:wordsize()"
        },
        "name" : "max_heap_size",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"32MB\""
        }
      }
    ]
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "listeners.quic.$name.ssl_options"
    ],
    "full_name" : "emqx:listener_quic_ssl_opts",
    "desc" : "TLS options for QUIC transport.",
    "fields" : [
      {
        "raw_default" : "${EMQX_ETC_DIR}/certs/cacert.pem",
        "aliases" : [
          
        ],
        "desc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "cacertfile",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"${EMQX_ETC_DIR}/certs/cacert.pem\""
        }
      },
      {
        "raw_default" : "${EMQX_ETC_DIR}/certs/cert.pem",
        "aliases" : [
          
        ],
        "desc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "certfile",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"${EMQX_ETC_DIR}/certs/cert.pem\""
        }
      },
      {
        "raw_default" : "${EMQX_ETC_DIR}/certs/key.pem",
        "aliases" : [
          
        ],
        "desc" : "PEM 格式的私钥文件。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "keyfile",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"${EMQX_ETC_DIR}/certs/key.pem\""
        }
      },
      {
        "raw_default" : "verify_none",
        "aliases" : [
          
        ],
        "desc" : "启用或禁用对等验证。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "verify_peer",
            "verify_none"
          ]
        },
        "name" : "verify",
        "default" : {
          "oneliner" : true,
          "hocon" : "verify_none"
        }
      },
      {
        "examples" : [
          ""
        ],
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "password"
      }
    ]
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "gateway.exproto.listeners.ssl.$name.ssl_options",
      "gateway.stomp.listeners.ssl.$name.ssl_options",
      "listeners.ssl.$name.ssl_options"
    ],
    "full_name" : "emqx:listener_ssl_opts",
    "desc" : "Socket options for SSL connections.",
    "fields" : [
      {
        "raw_default" : "${EMQX_ETC_DIR}/certs/cacert.pem",
        "aliases" : [
          
        ],
        "desc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "cacertfile",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"${EMQX_ETC_DIR}/certs/cacert.pem\""
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "Deprecated since 5.1.4.",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "cacerts"
      },
      {
        "raw_default" : "${EMQX_ETC_DIR}/certs/cert.pem",
        "aliases" : [
          
        ],
        "desc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "certfile",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"${EMQX_ETC_DIR}/certs/cert.pem\""
        }
      },
      {
        "raw_default" : "${EMQX_ETC_DIR}/certs/key.pem",
        "aliases" : [
          
        ],
        "desc" : "PEM 格式的私钥文件。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "keyfile",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"${EMQX_ETC_DIR}/certs/key.pem\""
        }
      },
      {
        "raw_default" : "verify_none",
        "aliases" : [
          
        ],
        "desc" : "启用或禁用对等验证。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "verify_peer",
            "verify_none"
          ]
        },
        "name" : "verify",
        "default" : {
          "oneliner" : true,
          "hocon" : "verify_none"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "启用 TLS 会话重用。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "reuse_sessions",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : 10,
        "aliases" : [
          
        ],
        "desc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
        "type" : {
          "kind" : "primitive",
          "name" : "non_neg_integer()"
        },
        "name" : "depth",
        "default" : {
          "oneliner" : true,
          "hocon" : "10"
        }
      },
      {
        "examples" : [
          ""
        ],
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "password"
      },
      {
        "raw_default" : [
          "tlsv1.3",
          "tlsv1.2"
        ],
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
        "type" : {
          "elements" : {
            "kind" : "primitive",
            "name" : "atom()"
          },
          "kind" : "array"
        },
        "name" : "versions",
        "default" : {
          "oneliner" : true,
          "hocon" : "[\"tlsv1.3\", \"tlsv1.2\"]"
        }
      },
      {
        "raw_default" : [
          
        ],
        "aliases" : [
          
        ],
        "desc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
        "type" : {
          "elements" : {
            "kind" : "primitive",
            "name" : "string()"
          },
          "kind" : "array"
        },
        "name" : "ciphers",
        "default" : {
          "oneliner" : true,
          "hocon" : "[]"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "secure_renegotiate",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : "notice",
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "emergency",
            "alert",
            "critical",
            "error",
            "warning",
            "notice",
            "info",
            "debug",
            "none",
            "all"
          ]
        },
        "name" : "log_level",
        "default" : {
          "oneliner" : true,
          "hocon" : "notice"
        }
      },
      {
        "raw_default" : "5s",
        "aliases" : [
          
        ],
        "desc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:duration()"
        },
        "name" : "hibernate_after",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"5s\""
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "如果协商使用 Diffie-Hellman 密钥交换的密码套件，则服务器将使用包含 PEM 编码的 Diffie-Hellman 参数的文件的路径。如果未指定，则使用默认参数。<br/>\n注意：TLS 1.3 不支持<code>dhfile</code>选项。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "dhfile"
      },
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "TLS/DTLS 服务器与 {verify，verify_peer} 一起使用。\n如果设置为 true，则如果客户端没有要发送的证书，即发送空证书，服务器将失败。\n如果设置为 false，则仅当客户端发送无效证书（空证书被视为有效证书）时才会失败。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "fail_if_no_peer_cert",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "一个重要的安全设置，它强制根据服务器指定的顺序而不是客户机指定的顺序设置密码，从而强制服务器管理员执行（通常配置得更正确）安全顺序。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "honor_cipher_order",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "在支持客户机发起的重新协商的协议中，这种操作的资源成本对于服务器来说高于客户机。\n这可能会成为拒绝服务攻击的载体。\nSSL 应用程序已经采取措施来反击此类尝试，但通过将此选项设置为 false，可以严格禁用客户端发起的重新协商。\n默认值为 true。请注意，由于基础密码套件可以加密的消息数量有限，禁用重新协商可能会导致长期连接变得不可用。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "client_renegotiation",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : "15s",
        "aliases" : [
          
        ],
        "desc" : "握手完成所允许的最长时间",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:duration()"
        },
        "name" : "handshake_timeout",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15s\""
        }
      },
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "内存使用调优。如果启用，将在 TLS/SSL 握手完成后立即执行垃圾回收。TLS/SSL 握手建立后立即进行 GC。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "gc_after_handshake",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "emqx:ocsp"
        },
        "name" : "ocsp"
      },
      {
        "raw_default" : false,
        "importance" : "medium",
        "aliases" : [
          
        ],
        "desc" : "是否为该监听器启用 CRL 检查。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "enable_crl_check",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      }
    ]
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "listeners.wss.$name.ssl_options"
    ],
    "full_name" : "emqx:listener_wss_opts",
    "desc" : "Socket options for WebSocket/SSL connections.",
    "fields" : [
      {
        "raw_default" : "${EMQX_ETC_DIR}/certs/cacert.pem",
        "aliases" : [
          
        ],
        "desc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "cacertfile",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"${EMQX_ETC_DIR}/certs/cacert.pem\""
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "Deprecated since 5.1.4.",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "cacerts"
      },
      {
        "raw_default" : "${EMQX_ETC_DIR}/certs/cert.pem",
        "aliases" : [
          
        ],
        "desc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "certfile",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"${EMQX_ETC_DIR}/certs/cert.pem\""
        }
      },
      {
        "raw_default" : "${EMQX_ETC_DIR}/certs/key.pem",
        "aliases" : [
          
        ],
        "desc" : "PEM 格式的私钥文件。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "keyfile",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"${EMQX_ETC_DIR}/certs/key.pem\""
        }
      },
      {
        "raw_default" : "verify_none",
        "aliases" : [
          
        ],
        "desc" : "启用或禁用对等验证。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "verify_peer",
            "verify_none"
          ]
        },
        "name" : "verify",
        "default" : {
          "oneliner" : true,
          "hocon" : "verify_none"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "启用 TLS 会话重用。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "reuse_sessions",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : 10,
        "aliases" : [
          
        ],
        "desc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
        "type" : {
          "kind" : "primitive",
          "name" : "non_neg_integer()"
        },
        "name" : "depth",
        "default" : {
          "oneliner" : true,
          "hocon" : "10"
        }
      },
      {
        "examples" : [
          ""
        ],
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "password"
      },
      {
        "raw_default" : [
          "tlsv1.3",
          "tlsv1.2"
        ],
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
        "type" : {
          "elements" : {
            "kind" : "primitive",
            "name" : "atom()"
          },
          "kind" : "array"
        },
        "name" : "versions",
        "default" : {
          "oneliner" : true,
          "hocon" : "[\"tlsv1.3\", \"tlsv1.2\"]"
        }
      },
      {
        "raw_default" : [
          
        ],
        "aliases" : [
          
        ],
        "desc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
        "type" : {
          "elements" : {
            "kind" : "primitive",
            "name" : "string()"
          },
          "kind" : "array"
        },
        "name" : "ciphers",
        "default" : {
          "oneliner" : true,
          "hocon" : "[]"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "secure_renegotiate",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : "notice",
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "emergency",
            "alert",
            "critical",
            "error",
            "warning",
            "notice",
            "info",
            "debug",
            "none",
            "all"
          ]
        },
        "name" : "log_level",
        "default" : {
          "oneliner" : true,
          "hocon" : "notice"
        }
      },
      {
        "raw_default" : "5s",
        "aliases" : [
          
        ],
        "desc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:duration()"
        },
        "name" : "hibernate_after",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"5s\""
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "如果协商使用 Diffie-Hellman 密钥交换的密码套件，则服务器将使用包含 PEM 编码的 Diffie-Hellman 参数的文件的路径。如果未指定，则使用默认参数。<br/>\n注意：TLS 1.3 不支持<code>dhfile</code>选项。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "dhfile"
      },
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "TLS/DTLS 服务器与 {verify，verify_peer} 一起使用。\n如果设置为 true，则如果客户端没有要发送的证书，即发送空证书，服务器将失败。\n如果设置为 false，则仅当客户端发送无效证书（空证书被视为有效证书）时才会失败。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "fail_if_no_peer_cert",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "一个重要的安全设置，它强制根据服务器指定的顺序而不是客户机指定的顺序设置密码，从而强制服务器管理员执行（通常配置得更正确）安全顺序。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "honor_cipher_order",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "在支持客户机发起的重新协商的协议中，这种操作的资源成本对于服务器来说高于客户机。\n这可能会成为拒绝服务攻击的载体。\nSSL 应用程序已经采取措施来反击此类尝试，但通过将此选项设置为 false，可以严格禁用客户端发起的重新协商。\n默认值为 true。请注意，由于基础密码套件可以加密的消息数量有限，禁用重新协商可能会导致长期连接变得不可用。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "client_renegotiation",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : "15s",
        "aliases" : [
          
        ],
        "desc" : "握手完成所允许的最长时间",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:duration()"
        },
        "name" : "handshake_timeout",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15s\""
        }
      }
    ]
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "listeners"
    ],
    "full_name" : "emqx:listeners",
    "desc" : "MQTT listeners identified by their protocol type and assigned names",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "TCP 监听器。",
        "type" : {
          "kind" : "map",
          "values" : {
            "display_name" : "undefined",
            "members" : [
              {
                "kind" : "struct",
                "name" : "emqx:mqtt_tcp_listener"
              },
              {
                "kind" : "singleton",
                "name" : "marked_for_deletion"
              }
            ],
            "kind" : "union"
          },
          "name" : "name"
        },
        "name" : "tcp"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "SSL 监听器。",
        "type" : {
          "kind" : "map",
          "values" : {
            "display_name" : "undefined",
            "members" : [
              {
                "kind" : "struct",
                "name" : "emqx:mqtt_ssl_listener"
              },
              {
                "kind" : "singleton",
                "name" : "marked_for_deletion"
              }
            ],
            "kind" : "union"
          },
          "name" : "name"
        },
        "name" : "ssl"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "HTTP websocket 监听器。",
        "type" : {
          "kind" : "map",
          "values" : {
            "display_name" : "undefined",
            "members" : [
              {
                "kind" : "struct",
                "name" : "emqx:mqtt_ws_listener"
              },
              {
                "kind" : "singleton",
                "name" : "marked_for_deletion"
              }
            ],
            "kind" : "union"
          },
          "name" : "name"
        },
        "name" : "ws"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "HTTPS websocket 监听器。",
        "type" : {
          "kind" : "map",
          "values" : {
            "display_name" : "undefined",
            "members" : [
              {
                "kind" : "struct",
                "name" : "emqx:mqtt_wss_listener"
              },
              {
                "kind" : "singleton",
                "name" : "marked_for_deletion"
              }
            ],
            "kind" : "union"
          },
          "name" : "name"
        },
        "name" : "wss"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "QUIC 监听器。",
        "type" : {
          "kind" : "map",
          "values" : {
            "display_name" : "undefined",
            "members" : [
              {
                "kind" : "struct",
                "name" : "emqx:mqtt_quic_listener"
              },
              {
                "kind" : "singleton",
                "name" : "marked_for_deletion"
              }
            ],
            "kind" : "union"
          },
          "name" : "name"
        },
        "name" : "quic"
      }
    ]
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "mqtt"
    ],
    "full_name" : "emqx:mqtt",
    "desc" : "Global MQTT configuration.",
    "fields" : [
      {
        "raw_default" : "15s",
        "aliases" : [
          
        ],
        "desc" : "设置连接被断开或进入休眠状态前的等待时间，空闲超时后，\n  - 如暂未收到客户端的 CONNECT 报文，连接将断开；\n  - 如已收到客户端的 CONNECT 报文，连接将进入休眠模式以节省系统资源。\n\n注意：请合理设置该参数值，如等待时间设置过长，可能造成系统资源的浪费。",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "singleton",
              "name" : "infinity"
            },
            {
              "kind" : "primitive",
              "name" : "emqx_schema:duration()"
            }
          ],
          "kind" : "union"
        },
        "name" : "idle_timeout",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15s\""
        }
      },
      {
        "raw_default" : "1MB",
        "aliases" : [
          
        ],
        "desc" : "允许的最大 MQTT 报文大小。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:bytesize()"
        },
        "name" : "max_packet_size",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"1MB\""
        }
      },
      {
        "raw_default" : 65535,
        "aliases" : [
          
        ],
        "desc" : "允许的最大 MQTT Client ID 长度。",
        "type" : {
          "kind" : "primitive",
          "name" : "23..65535"
        },
        "name" : "max_clientid_len",
        "default" : {
          "oneliner" : true,
          "hocon" : "65535"
        }
      },
      {
        "raw_default" : 128,
        "aliases" : [
          
        ],
        "desc" : "允许的最大主题层级。",
        "type" : {
          "kind" : "primitive",
          "name" : "1..65535"
        },
        "name" : "max_topic_levels",
        "default" : {
          "oneliner" : true,
          "hocon" : "128"
        }
      },
      {
        "raw_default" : 65535,
        "aliases" : [
          
        ],
        "desc" : "允许的最大主题别名数，0 表示不支持主题别名。",
        "type" : {
          "kind" : "primitive",
          "name" : "0..65535"
        },
        "name" : "max_topic_alias",
        "default" : {
          "oneliner" : true,
          "hocon" : "65535"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "是否启用对 MQTT 保留消息的支持。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "retain_available",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "是否启用对 MQTT 通配符订阅的支持。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "wildcard_subscription",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "是否启用对 MQTT 共享订阅的支持。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "shared_subscription",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : "round_robin",
        "aliases" : [
          
        ],
        "desc" : "共享订阅的分发策略。\n - random：随机选择一个订阅者进行分发；\n - round_robin：从单个发布者处的消息依次分发给订阅者；\n - round_robin_per_group：所有消息依次分发给订阅者；\n - local：随机选择当前节点上的一个订阅者，如果当前节点没有订阅者，则在集群内随机选择；\n - sticky：持续将消息分发给最初选择的订阅者，直到他们的会话结束；\n - hash_clientid：哈希发布者的客户端 ID 以选择订阅者；\n - hash_topic：哈希发布主题以选择订阅者。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "random",
            "round_robin",
            "round_robin_per_group",
            "sticky",
            "local",
            "hash_topic",
            "hash_clientid"
          ]
        },
        "name" : "shared_subscription_strategy",
        "default" : {
          "oneliner" : true,
          "hocon" : "round_robin"
        }
      },
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "是否启用对 MQTT 排它订阅的支持。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "exclusive_subscription",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "设置由 MQTT v3.1.1/v3.1.0 客户端发布的消息是否将转发给其本身；类似 MQTT 5.0 协议中的 <code>No Local</code> 选项。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "ignore_loop_deliver",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "是否以严格模式解析 MQTT 消息。\n严格模式下，如客户端 ID、主题名称等中包含无效 utf8 字符串，连接将被断开。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "strict_mode",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "raw_default" : "",
        "aliases" : [
          
        ],
        "desc" : "UTF-8 字符串，用于指定返回给客户端的响应主题，如 <code>reqrsp/</code>，此时请求和应答客户端都需要使用 <code>reqrsp/</code> 前缀的主题来完成通讯。\n如希望禁用此功能，请在下方的文字框中输入<code>\"\"</code>；仅适用于 MQTT 5.0 客户端。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "response_information",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"\""
        }
      },
      {
        "raw_default" : "disabled",
        "aliases" : [
          
        ],
        "desc" : "EMQX 要求的保活时间，如设为 disabled，则将使用客户端指定的保持连接时间；仅适用于 MQTT 5.0 客户端。",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "primitive",
              "name" : "pos_integer()"
            },
            {
              "kind" : "singleton",
              "name" : "disabled"
            }
          ],
          "kind" : "union"
        },
        "name" : "server_keepalive",
        "default" : {
          "oneliner" : true,
          "hocon" : "disabled"
        }
      },
      {
        "raw_default" : 1.5,
        "aliases" : [
          
        ],
        "desc" : "EMQX 判定客户端 Keep Alive 超时使用的 Keep Alive 倍数。计算公式为：Keep Alive 超时 = Keep Alive 间隔 × Keep Alive 倍数。 默认值 1.5 遵循 MQTT 5.0 规范。此倍数可调整，为系统管理员提供根据特定需求进行定制的灵活性。例如，如果客户端的 10 秒保持连接间隔的 PINGREQ 因为额外的 10 秒延迟，将倍数更改为 2 可以让 EMQX 容忍此延迟。",
        "type" : {
          "kind" : "primitive",
          "name" : "number()"
        },
        "name" : "keepalive_multiplier",
        "default" : {
          "oneliner" : true,
          "hocon" : "1.5"
        }
      },
      {
        "raw_default" : "30s",
        "aliases" : [
          
        ],
        "desc" : "The frequency of checking for incoming MQTT packets determines how often the server will check for new MQTT packets.\nIf a certain amount of time passes without any packets being sent from the client, this time will be added up.\nOnce the accumulated time exceeds `keepalive-interval * keepalive-multiplier`, the connection will be terminated.\nThe default is set to 30 seconds, with a minimum value of 1 second and a maximum value of `keepalive-interval / 2`.",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:timeout_duration()"
        },
        "name" : "keepalive_check_interval",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"30s\""
        }
      },
      {
        "raw_default" : "infinity",
        "aliases" : [
          
        ],
        "desc" : "QoS 1/2 消息的重新投递间隔。",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "singleton",
              "name" : "infinity"
            },
            {
              "kind" : "primitive",
              "name" : "emqx_schema:timeout_duration()"
            }
          ],
          "kind" : "union"
        },
        "name" : "retry_interval",
        "default" : {
          "oneliner" : true,
          "hocon" : "infinity"
        }
      },
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "是否使用用户名作为客户端 ID。\n此设置的作用时间晚于 <code>对端证书作为用户名</code> 和 <code>对端证书作为客户端 ID</code>。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "use_username_as_clientid",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "raw_default" : "disabled",
        "aliases" : [
          
        ],
        "desc" : "使用对端证书中的 CN、DN 字段或整个证书内容来作为用户名；仅适用于 TLS 连接。\n目前支持：\n- <code>cn</code>: 取证书的 CN 字段\n- <code>dn</code>: 取证书的 DN 字段\n- <code>crt</code>: 取 <code>DER</code> 或 <code>PEM</code> 的证书内容\n- <code>pem</code>: 将 <code>DER</code> 证书转换为 <code>PEM</code> 格式作为用户名\n- <code>md5</code>: 取 <code>DER</code> 或 <code>PEM</code> 证书内容的 MD5 值",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "disabled",
            "cn",
            "dn",
            "crt",
            "pem",
            "md5"
          ]
        },
        "name" : "peer_cert_as_username",
        "default" : {
          "oneliner" : true,
          "hocon" : "disabled"
        }
      },
      {
        "raw_default" : "disabled",
        "aliases" : [
          
        ],
        "desc" : "使用对端证书中的 CN、DN 字段或整个证书内容来作为客户端 ID。仅适用于 TLS 连接；\n目前支持：\n- <code>cn</code>: 取证书的 CN 字段\n- <code>dn</code>: 取证书的 DN 字段\n- <code>crt</code>: 取 <code>DER</code> 或 <code>PEM</code> 证书的内容\n- <code>pem</code>: 将 <code>DER</code> 证书内容转换为 <code>PEM</code> 格式作为客户端 ID\n- <code>md5</code>: 取 <code>DER</code> 或 <code>PEM</code> 证书内容的 MD5 值",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "disabled",
            "cn",
            "dn",
            "crt",
            "pem",
            "md5"
          ]
        },
        "name" : "peer_cert_as_clientid",
        "default" : {
          "oneliner" : true,
          "hocon" : "disabled"
        }
      },
      {
        "raw_default" : [
          
        ],
        "aliases" : [
          
        ],
        "desc" : "指定如何初始化客户端属性。每个属性可被初始化为 `client_attrs.{NAME}` ，其中 `{NAME}` 是在配置字段 `set_as_attr` 中指定的属性名称。初始化的客户端属性将以指定的名称存储在 `client_attrs` 属性中。然后，它们可以在身份验证和授权过程的模板中用作占位符。例如，当 `set_as_attr = alias` 时，使用 `${client_attrs.alias}` 来渲染 HTTP POST 请求体，或者渲染监听器配置 `moutpoint = devices/${client_attrs.alias}/` 来初始化每个客户端独有的主题命名空间。",
        "type" : {
          "elements" : {
            "kind" : "struct",
            "name" : "emqx:client_attrs_init"
          },
          "kind" : "array"
        },
        "name" : "client_attrs_init",
        "default" : {
          "oneliner" : true,
          "hocon" : "[]"
        }
      },
      {
        "raw_default" : "2h",
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "指定会话将在连接断开后多久过期，仅适用于非 MQTT 5.0 的连接。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:duration()"
        },
        "name" : "session_expiry_interval",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"2h\""
        }
      },
      {
        "raw_default" : "infinity",
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "MQTT 消息的过期间隔。对于 MQTT 5.0 客户端，此配置仅在消息中未设置 Message-Expiry-Interval 属性时生效；否则，将使用 Message-Expiry-Interval 属性的值。对于 5.0 之前的 MQTT 版本，此配置将始终生效。请注意，将 message_expiry_interval 设置为大于 session_expiry_interval 是没有意义的，因为会话过期时所有消息将被清除。",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "primitive",
              "name" : "emqx_schema:duration()"
            },
            {
              "kind" : "singleton",
              "name" : "infinity"
            }
          ],
          "kind" : "union"
        },
        "name" : "message_expiry_interval",
        "default" : {
          "oneliner" : true,
          "hocon" : "infinity"
        }
      },
      {
        "raw_default" : 100,
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "每个发布者的会话中，都存在一个队列来处理客户端发送的 QoS 2 消息。该队列会存储 QoS 2 消息的报文 ID 直到收到客户端的 PUBREL 或超时，达到队列长度的限制后，新的 QoS 2 消息发布会被拒绝，并返回 `147(0x93)` 错误。",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "primitive",
              "name" : "non_neg_integer()"
            },
            {
              "kind" : "singleton",
              "name" : "infinity"
            }
          ],
          "kind" : "union"
        },
        "name" : "max_awaiting_rel",
        "default" : {
          "oneliner" : true,
          "hocon" : "100"
        }
      },
      {
        "raw_default" : 2,
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "允许的最大 QoS 等级。",
        "type" : {
          "kind" : "primitive",
          "name" : "qos()"
        },
        "name" : "max_qos_allowed",
        "default" : {
          "oneliner" : true,
          "hocon" : "2"
        }
      },
      {
        "raw_default" : "disabled",
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "主题优先级。取值范围 [1-255]\n默认优先级表为空，即所有的主题优先级相同。\n\n注：优先主题名称中不支持使用逗号和等号。\n注：不在此列表中的主题，被视为最高/最低优先级，这取决于<code>mqtt.mqueue_default_priority</code> 的配置。\n\n示例：\n配置 <code>\"topic/1\" > \"topic/2\"</code>:\n<code>mqueue_priorities: {\"topic/1\": 10, \"topic/2\": 8}</code>",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "singleton",
              "name" : "disabled"
            },
            {
              "kind" : "primitive",
              "name" : "map()"
            }
          ],
          "kind" : "union"
        },
        "name" : "mqueue_priorities",
        "default" : {
          "oneliner" : true,
          "hocon" : "disabled"
        }
      },
      {
        "raw_default" : "lowest",
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "默认的主题优先级，不在 <code>主题优先级</code>（<code>mqueue_priorities</code>） 中的主题将会使用该优先级。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "highest",
            "lowest"
          ]
        },
        "name" : "mqueue_default_priority",
        "default" : {
          "oneliner" : true,
          "hocon" : "lowest"
        }
      },
      {
        "raw_default" : true,
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "指定在连接断开但会话保持期间，是否需要在消息队列中存储 QoS 0 消息。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "mqueue_store_qos0",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : 1000,
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "消息队列最大长度。持久客户端断开连接或飞行窗口已满时排队的消息长度。",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "primitive",
              "name" : "non_neg_integer()"
            },
            {
              "kind" : "singleton",
              "name" : "infinity"
            }
          ],
          "kind" : "union"
        },
        "name" : "max_mqueue_len",
        "default" : {
          "oneliner" : true,
          "hocon" : "1000"
        }
      },
      {
        "raw_default" : 32,
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "允许在完成应答前同时投递的 QoS 1 和 QoS 2 消息的最大数量。",
        "type" : {
          "kind" : "primitive",
          "name" : "1..65535"
        },
        "name" : "max_inflight",
        "default" : {
          "oneliner" : true,
          "hocon" : "32"
        }
      },
      {
        "raw_default" : "infinity",
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "允许每个客户端建立的最大订阅数量。",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "primitive",
              "name" : "1..inf"
            },
            {
              "kind" : "singleton",
              "name" : "infinity"
            }
          ],
          "kind" : "union"
        },
        "name" : "max_subscriptions",
        "default" : {
          "oneliner" : true,
          "hocon" : "infinity"
        }
      },
      {
        "raw_default" : false,
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "投递消息时，是否根据订阅主题时的 QoS 等级来强制提升派发的消息的 QoS 等级。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "upgrade_qos",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "raw_default" : "300s",
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "客户端发布 QoS 2 消息时，服务器等待 `PUBREL` 的最长时延。超过该时长后服务器会放弃等待，该 PACKET ID 会被释放，从而允许后续新的 PUBLISH 消息使用。如果超时后收到 PUBREL，服务器将会产生一条告警日志。注意，向订阅客户端转发消息的动作发生在进入等待之前。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:duration()"
        },
        "name" : "await_rel_timeout",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"300s\""
        }
      }
    ]
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "listeners.quic.$name"
    ],
    "full_name" : "emqx:mqtt_quic_listener",
    "desc" : "Settings for the MQTT over QUIC listener.",
    "fields" : [
      {
        "raw_default" : [
          "TLS_AES_256_GCM_SHA384",
          "TLS_AES_128_GCM_SHA256",
          "TLS_CHACHA20_POLY1305_SHA256"
        ],
        "aliases" : [
          
        ],
        "desc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式。<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3。<br/>\n如果打算使用 PSK 密码套件，<code>tlsv1.3</code> 应在 <code>ssl.versions</code> 中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code><br/>\n\n注：QUIC 监听器只支持 tlsv1.3 的 ciphers。",
        "type" : {
          "elements" : {
            "kind" : "primitive",
            "name" : "string()"
          },
          "kind" : "array"
        },
        "name" : "ciphers",
        "default" : {
          "oneliner" : true,
          "hocon" : "[TLS_AES_256_GCM_SHA384, TLS_AES_128_GCM_SHA256, TLS_CHACHA20_POLY1305_SHA256]"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "QUIC 传输层的 TLS 选项",
        "type" : {
          "kind" : "struct",
          "name" : "emqx:listener_quic_ssl_opts"
        },
        "name" : "ssl_options"
      },
      {
        "raw_default" : 14567,
        "aliases" : [
          
        ],
        "desc" : "监听套接字的 IP 地址和端口。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:ip_port()"
        },
        "name" : "bind",
        "default" : {
          "oneliner" : true,
          "hocon" : "14567"
        }
      },
      {
        "raw_default" : 16,
        "aliases" : [
          
        ],
        "desc" : "监听器接收池的大小。",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "acceptors",
        "default" : {
          "oneliner" : true,
          "hocon" : "16"
        }
      },
      {
        "raw_default" : "infinity",
        "aliases" : [
          
        ],
        "desc" : "监听器允许的最大并发连接数。",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "singleton",
              "name" : "infinity"
            },
            {
              "kind" : "primitive",
              "name" : "pos_integer()"
            }
          ],
          "kind" : "union"
        },
        "name" : "max_connections",
        "default" : {
          "oneliner" : true,
          "hocon" : "infinity"
        }
      },
      {
        "raw_default" : "",
        "aliases" : [
          
        ],
        "desc" : "发布或订阅时，请在所有主题前面加上 mountpoint 字符串。\n\n将消息传递给订阅者时，将从主题名称中删除带前缀的字符串。挂载点是一种用户可以用来实现不同侦听器之间消息路由隔离的方法。\n\n例如，如果客户机 A 使用 <code>listeners.tcp.\\<name>.mountpoint</code> 设置为'some_tenant'，那么客户端实际上订阅了主题'some_tenant/t'。<br/>\n类似地，如果另一个客户端 B（与客户端 A 连接到同一个侦听器）向主题 't' 发送消息，该消息将路由到所有订阅了'some_租户/t'的客户端，因此客户端 A 将接收主题名为't'的消息<br/>\n\n设置为<code>\"\"</code> 以禁用该功能<br/>\n\nmountpoint 字符串中的变量：\n- <code>${clientid}</code>: clientid\n- <code>${username}</code>: username",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "mountpoint",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"\""
        }
      },
      {
        "raw_default" : "default",
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "监听器所属的配置 zone。\n连接到此监听器的客户端将继承在此 zone 名称下创建的 zone 设置。\n\n一个 zone 可以覆盖以下根名称下的配置：\n- `mqtt`\n- `force_shutdown`\n- `force_gc`\n- `flapping_detect`\n- `durable_sessions`",
        "type" : {
          "kind" : "primitive",
          "name" : "atom()"
        },
        "name" : "zone",
        "default" : {
          "oneliner" : true,
          "hocon" : "default"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "配置 <code>true</code> （默认值）启用客户端进行身份认证，通过检查认配置的认认证器链来决定是否允许接入。\n配置 <code>false</code> 时，将不对客户端做任何认证，任何客户端，不论是不是携带用户名等认证信息，都可以接入。\n配置 <code>quick_deny_anonymous</code> 时，行为跟 <code>true</code> 类似，但是会对匿名\n客户直接拒绝，不做使用任何认证器对客户端进行身份检查。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "true",
            "false",
            "quick_deny_anonymous"
          ]
        },
        "name" : "enable_authn",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : "infinity",
        "examples" : [
          "1000/s"
        ],
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "最大连接速率。<br/>\n这用于限制该节点的连接速率。\n一旦达到限制，新的连接将被推迟或拒绝。<br/>\n例如：<br/>\n- <code>1000/s</code>：每秒只接受1000个连接<br/>\n- <code>1000/10s</code>：每10秒只接受1000个连接。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "max_conn_rate",
        "default" : {
          "oneliner" : true,
          "hocon" : "infinity"
        }
      },
      {
        "examples" : [
          "1000/s"
        ],
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "消息发布速率。<br/>\n这用于限制该节点的入站消息数量。\n一旦达到限制，受限制的客户端将减速甚至暂时挂起。<br/>\n例如：<br/>\n- <code>500/s</code>：每秒只发送前500条消息，其他消息被缓冲。<br/>\n- <code>500/10s</code>：即使是10秒，也只发送前500条消息，其他消息被缓冲。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "messages_rate"
      },
      {
        "examples" : [
          "100MB/s"
        ],
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "数据发布速率。<br/>\n这用于限制该节点的入站字节速率。\n一旦达到限制，受限制的客户端将减速甚至暂时挂起。<br/>\n字节的单位可以是：KB MB GB。<br/>\n例如：<br/>\n- <code>500KB/s</code>：每秒只发送前500千字节，其他消息被缓冲。<br/>\n- <code>500MB/10s</code>：即使是10秒，也只发送前500兆字节，其他消息被缓冲。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "bytes_rate"
      }
    ]
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "listeners.ssl.$name"
    ],
    "full_name" : "emqx:mqtt_ssl_listener",
    "desc" : "Settings for the MQTT over SSL listener.",
    "fields" : [
      {
        "raw_default" : 8883,
        "aliases" : [
          
        ],
        "desc" : "监听套接字的 IP 地址和端口。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:ip_port()"
        },
        "name" : "bind",
        "default" : {
          "oneliner" : true,
          "hocon" : "8883"
        }
      },
      {
        "raw_default" : 16,
        "aliases" : [
          
        ],
        "desc" : "监听器接收池的大小。",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "acceptors",
        "default" : {
          "oneliner" : true,
          "hocon" : "16"
        }
      },
      {
        "raw_default" : "infinity",
        "aliases" : [
          
        ],
        "desc" : "监听器允许的最大并发连接数。",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "singleton",
              "name" : "infinity"
            },
            {
              "kind" : "primitive",
              "name" : "pos_integer()"
            }
          ],
          "kind" : "union"
        },
        "name" : "max_connections",
        "default" : {
          "oneliner" : true,
          "hocon" : "infinity"
        }
      },
      {
        "raw_default" : "",
        "aliases" : [
          
        ],
        "desc" : "发布或订阅时，请在所有主题前面加上 mountpoint 字符串。\n\n将消息传递给订阅者时，将从主题名称中删除带前缀的字符串。挂载点是一种用户可以用来实现不同侦听器之间消息路由隔离的方法。\n\n例如，如果客户机 A 使用 <code>listeners.tcp.\\<name>.mountpoint</code> 设置为'some_tenant'，那么客户端实际上订阅了主题'some_tenant/t'。<br/>\n类似地，如果另一个客户端 B（与客户端 A 连接到同一个侦听器）向主题 't' 发送消息，该消息将路由到所有订阅了'some_租户/t'的客户端，因此客户端 A 将接收主题名为't'的消息<br/>\n\n设置为<code>\"\"</code> 以禁用该功能<br/>\n\nmountpoint 字符串中的变量：\n- <code>${clientid}</code>: clientid\n- <code>${username}</code>: username",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "mountpoint",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"\""
        }
      },
      {
        "raw_default" : "default",
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "监听器所属的配置 zone。\n连接到此监听器的客户端将继承在此 zone 名称下创建的 zone 设置。\n\n一个 zone 可以覆盖以下根名称下的配置：\n- `mqtt`\n- `force_shutdown`\n- `force_gc`\n- `flapping_detect`\n- `durable_sessions`",
        "type" : {
          "kind" : "primitive",
          "name" : "atom()"
        },
        "name" : "zone",
        "default" : {
          "oneliner" : true,
          "hocon" : "default"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "配置 <code>true</code> （默认值）启用客户端进行身份认证，通过检查认配置的认认证器链来决定是否允许接入。\n配置 <code>false</code> 时，将不对客户端做任何认证，任何客户端，不论是不是携带用户名等认证信息，都可以接入。\n配置 <code>quick_deny_anonymous</code> 时，行为跟 <code>true</code> 类似，但是会对匿名\n客户直接拒绝，不做使用任何认证器对客户端进行身份检查。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "true",
            "false",
            "quick_deny_anonymous"
          ]
        },
        "name" : "enable_authn",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : "infinity",
        "examples" : [
          "1000/s"
        ],
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "最大连接速率。<br/>\n这用于限制该节点的连接速率。\n一旦达到限制，新的连接将被推迟或拒绝。<br/>\n例如：<br/>\n- <code>1000/s</code>：每秒只接受1000个连接<br/>\n- <code>1000/10s</code>：每10秒只接受1000个连接。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "max_conn_rate",
        "default" : {
          "oneliner" : true,
          "hocon" : "infinity"
        }
      },
      {
        "examples" : [
          "1000/s"
        ],
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "消息发布速率。<br/>\n这用于限制该节点的入站消息数量。\n一旦达到限制，受限制的客户端将减速甚至暂时挂起。<br/>\n例如：<br/>\n- <code>500/s</code>：每秒只发送前500条消息，其他消息被缓冲。<br/>\n- <code>500/10s</code>：即使是10秒，也只发送前500条消息，其他消息被缓冲。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "messages_rate"
      },
      {
        "examples" : [
          "100MB/s"
        ],
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "数据发布速率。<br/>\n这用于限制该节点的入站字节速率。\n一旦达到限制，受限制的客户端将减速甚至暂时挂起。<br/>\n字节的单位可以是：KB MB GB。<br/>\n例如：<br/>\n- <code>500KB/s</code>：每秒只发送前500千字节，其他消息被缓冲。<br/>\n- <code>500MB/10s</code>：即使是10秒，也只发送前500兆字节，其他消息被缓冲。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "bytes_rate"
      },
      {
        "raw_default" : [
          "allow all"
        ],
        "aliases" : [
          
        ],
        "desc" : "此监听器的访问控制规则。",
        "type" : {
          "elements" : {
            "kind" : "primitive",
            "name" : "string()"
          },
          "kind" : "array"
        },
        "name" : "access_rules",
        "default" : {
          "oneliner" : true,
          "hocon" : "[\"allow all\"]"
        }
      },
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "如果 EMQX 集群部署在 HAProxy 或 Nginx 之后，请启用代理协议 V1/2 <br/>\n详情见: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "proxy_protocol",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "raw_default" : "3s",
        "aliases" : [
          
        ],
        "desc" : "代理协议超时。如果在超时时间内未收到代理协议数据包，EMQX 将关闭 TCP 连接。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:duration()"
        },
        "name" : "proxy_protocol_timeout",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"3s\""
        }
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "emqx:tcp_opts"
        },
        "name" : "tcp_options"
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "emqx:listener_ssl_opts"
        },
        "name" : "ssl_options"
      }
    ]
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "listeners.tcp.$name"
    ],
    "full_name" : "emqx:mqtt_tcp_listener",
    "desc" : "Settings for the MQTT over TCP listener.",
    "fields" : [
      {
        "raw_default" : 1883,
        "aliases" : [
          
        ],
        "desc" : "监听套接字的 IP 地址和端口。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:ip_port()"
        },
        "name" : "bind",
        "default" : {
          "oneliner" : true,
          "hocon" : "1883"
        }
      },
      {
        "raw_default" : 16,
        "aliases" : [
          
        ],
        "desc" : "监听器接收池的大小。",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "acceptors",
        "default" : {
          "oneliner" : true,
          "hocon" : "16"
        }
      },
      {
        "raw_default" : "infinity",
        "aliases" : [
          
        ],
        "desc" : "监听器允许的最大并发连接数。",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "singleton",
              "name" : "infinity"
            },
            {
              "kind" : "primitive",
              "name" : "pos_integer()"
            }
          ],
          "kind" : "union"
        },
        "name" : "max_connections",
        "default" : {
          "oneliner" : true,
          "hocon" : "infinity"
        }
      },
      {
        "raw_default" : "",
        "aliases" : [
          
        ],
        "desc" : "发布或订阅时，请在所有主题前面加上 mountpoint 字符串。\n\n将消息传递给订阅者时，将从主题名称中删除带前缀的字符串。挂载点是一种用户可以用来实现不同侦听器之间消息路由隔离的方法。\n\n例如，如果客户机 A 使用 <code>listeners.tcp.\\<name>.mountpoint</code> 设置为'some_tenant'，那么客户端实际上订阅了主题'some_tenant/t'。<br/>\n类似地，如果另一个客户端 B（与客户端 A 连接到同一个侦听器）向主题 't' 发送消息，该消息将路由到所有订阅了'some_租户/t'的客户端，因此客户端 A 将接收主题名为't'的消息<br/>\n\n设置为<code>\"\"</code> 以禁用该功能<br/>\n\nmountpoint 字符串中的变量：\n- <code>${clientid}</code>: clientid\n- <code>${username}</code>: username",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "mountpoint",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"\""
        }
      },
      {
        "raw_default" : "default",
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "监听器所属的配置 zone。\n连接到此监听器的客户端将继承在此 zone 名称下创建的 zone 设置。\n\n一个 zone 可以覆盖以下根名称下的配置：\n- `mqtt`\n- `force_shutdown`\n- `force_gc`\n- `flapping_detect`\n- `durable_sessions`",
        "type" : {
          "kind" : "primitive",
          "name" : "atom()"
        },
        "name" : "zone",
        "default" : {
          "oneliner" : true,
          "hocon" : "default"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "配置 <code>true</code> （默认值）启用客户端进行身份认证，通过检查认配置的认认证器链来决定是否允许接入。\n配置 <code>false</code> 时，将不对客户端做任何认证，任何客户端，不论是不是携带用户名等认证信息，都可以接入。\n配置 <code>quick_deny_anonymous</code> 时，行为跟 <code>true</code> 类似，但是会对匿名\n客户直接拒绝，不做使用任何认证器对客户端进行身份检查。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "true",
            "false",
            "quick_deny_anonymous"
          ]
        },
        "name" : "enable_authn",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : "infinity",
        "examples" : [
          "1000/s"
        ],
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "最大连接速率。<br/>\n这用于限制该节点的连接速率。\n一旦达到限制，新的连接将被推迟或拒绝。<br/>\n例如：<br/>\n- <code>1000/s</code>：每秒只接受1000个连接<br/>\n- <code>1000/10s</code>：每10秒只接受1000个连接。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "max_conn_rate",
        "default" : {
          "oneliner" : true,
          "hocon" : "infinity"
        }
      },
      {
        "examples" : [
          "1000/s"
        ],
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "消息发布速率。<br/>\n这用于限制该节点的入站消息数量。\n一旦达到限制，受限制的客户端将减速甚至暂时挂起。<br/>\n例如：<br/>\n- <code>500/s</code>：每秒只发送前500条消息，其他消息被缓冲。<br/>\n- <code>500/10s</code>：即使是10秒，也只发送前500条消息，其他消息被缓冲。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "messages_rate"
      },
      {
        "examples" : [
          "100MB/s"
        ],
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "数据发布速率。<br/>\n这用于限制该节点的入站字节速率。\n一旦达到限制，受限制的客户端将减速甚至暂时挂起。<br/>\n字节的单位可以是：KB MB GB。<br/>\n例如：<br/>\n- <code>500KB/s</code>：每秒只发送前500千字节，其他消息被缓冲。<br/>\n- <code>500MB/10s</code>：即使是10秒，也只发送前500兆字节，其他消息被缓冲。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "bytes_rate"
      },
      {
        "raw_default" : [
          "allow all"
        ],
        "aliases" : [
          
        ],
        "desc" : "此监听器的访问控制规则。",
        "type" : {
          "elements" : {
            "kind" : "primitive",
            "name" : "string()"
          },
          "kind" : "array"
        },
        "name" : "access_rules",
        "default" : {
          "oneliner" : true,
          "hocon" : "[\"allow all\"]"
        }
      },
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "如果 EMQX 集群部署在 HAProxy 或 Nginx 之后，请启用代理协议 V1/2 <br/>\n详情见: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "proxy_protocol",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "raw_default" : "3s",
        "aliases" : [
          
        ],
        "desc" : "代理协议超时。如果在超时时间内未收到代理协议数据包，EMQX 将关闭 TCP 连接。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:duration()"
        },
        "name" : "proxy_protocol_timeout",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"3s\""
        }
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "emqx:tcp_opts"
        },
        "name" : "tcp_options"
      }
    ]
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "listeners.ws.$name"
    ],
    "full_name" : "emqx:mqtt_ws_listener",
    "desc" : "Settings for the MQTT over WebSocket listener.",
    "fields" : [
      {
        "raw_default" : 8083,
        "aliases" : [
          
        ],
        "desc" : "监听套接字的 IP 地址和端口。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:ip_port()"
        },
        "name" : "bind",
        "default" : {
          "oneliner" : true,
          "hocon" : "8083"
        }
      },
      {
        "raw_default" : 16,
        "aliases" : [
          
        ],
        "desc" : "监听器接收池的大小。",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "acceptors",
        "default" : {
          "oneliner" : true,
          "hocon" : "16"
        }
      },
      {
        "raw_default" : "infinity",
        "aliases" : [
          
        ],
        "desc" : "监听器允许的最大并发连接数。",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "singleton",
              "name" : "infinity"
            },
            {
              "kind" : "primitive",
              "name" : "pos_integer()"
            }
          ],
          "kind" : "union"
        },
        "name" : "max_connections",
        "default" : {
          "oneliner" : true,
          "hocon" : "infinity"
        }
      },
      {
        "raw_default" : "",
        "aliases" : [
          
        ],
        "desc" : "发布或订阅时，请在所有主题前面加上 mountpoint 字符串。\n\n将消息传递给订阅者时，将从主题名称中删除带前缀的字符串。挂载点是一种用户可以用来实现不同侦听器之间消息路由隔离的方法。\n\n例如，如果客户机 A 使用 <code>listeners.tcp.\\<name>.mountpoint</code> 设置为'some_tenant'，那么客户端实际上订阅了主题'some_tenant/t'。<br/>\n类似地，如果另一个客户端 B（与客户端 A 连接到同一个侦听器）向主题 't' 发送消息，该消息将路由到所有订阅了'some_租户/t'的客户端，因此客户端 A 将接收主题名为't'的消息<br/>\n\n设置为<code>\"\"</code> 以禁用该功能<br/>\n\nmountpoint 字符串中的变量：\n- <code>${clientid}</code>: clientid\n- <code>${username}</code>: username",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "mountpoint",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"\""
        }
      },
      {
        "raw_default" : "default",
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "监听器所属的配置 zone。\n连接到此监听器的客户端将继承在此 zone 名称下创建的 zone 设置。\n\n一个 zone 可以覆盖以下根名称下的配置：\n- `mqtt`\n- `force_shutdown`\n- `force_gc`\n- `flapping_detect`\n- `durable_sessions`",
        "type" : {
          "kind" : "primitive",
          "name" : "atom()"
        },
        "name" : "zone",
        "default" : {
          "oneliner" : true,
          "hocon" : "default"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "配置 <code>true</code> （默认值）启用客户端进行身份认证，通过检查认配置的认认证器链来决定是否允许接入。\n配置 <code>false</code> 时，将不对客户端做任何认证，任何客户端，不论是不是携带用户名等认证信息，都可以接入。\n配置 <code>quick_deny_anonymous</code> 时，行为跟 <code>true</code> 类似，但是会对匿名\n客户直接拒绝，不做使用任何认证器对客户端进行身份检查。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "true",
            "false",
            "quick_deny_anonymous"
          ]
        },
        "name" : "enable_authn",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : "infinity",
        "examples" : [
          "1000/s"
        ],
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "最大连接速率。<br/>\n这用于限制该节点的连接速率。\n一旦达到限制，新的连接将被推迟或拒绝。<br/>\n例如：<br/>\n- <code>1000/s</code>：每秒只接受1000个连接<br/>\n- <code>1000/10s</code>：每10秒只接受1000个连接。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "max_conn_rate",
        "default" : {
          "oneliner" : true,
          "hocon" : "infinity"
        }
      },
      {
        "examples" : [
          "1000/s"
        ],
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "消息发布速率。<br/>\n这用于限制该节点的入站消息数量。\n一旦达到限制，受限制的客户端将减速甚至暂时挂起。<br/>\n例如：<br/>\n- <code>500/s</code>：每秒只发送前500条消息，其他消息被缓冲。<br/>\n- <code>500/10s</code>：即使是10秒，也只发送前500条消息，其他消息被缓冲。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "messages_rate"
      },
      {
        "examples" : [
          "100MB/s"
        ],
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "数据发布速率。<br/>\n这用于限制该节点的入站字节速率。\n一旦达到限制，受限制的客户端将减速甚至暂时挂起。<br/>\n字节的单位可以是：KB MB GB。<br/>\n例如：<br/>\n- <code>500KB/s</code>：每秒只发送前500千字节，其他消息被缓冲。<br/>\n- <code>500MB/10s</code>：即使是10秒，也只发送前500兆字节，其他消息被缓冲。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "bytes_rate"
      },
      {
        "raw_default" : [
          "allow all"
        ],
        "aliases" : [
          
        ],
        "desc" : "此监听器的访问控制规则。",
        "type" : {
          "elements" : {
            "kind" : "primitive",
            "name" : "string()"
          },
          "kind" : "array"
        },
        "name" : "access_rules",
        "default" : {
          "oneliner" : true,
          "hocon" : "[\"allow all\"]"
        }
      },
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "如果 EMQX 集群部署在 HAProxy 或 Nginx 之后，请启用代理协议 V1/2 <br/>\n详情见: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "proxy_protocol",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "raw_default" : "3s",
        "aliases" : [
          
        ],
        "desc" : "代理协议超时。如果在超时时间内未收到代理协议数据包，EMQX 将关闭 TCP 连接。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:duration()"
        },
        "name" : "proxy_protocol_timeout",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"3s\""
        }
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "emqx:tcp_opts"
        },
        "name" : "tcp_options"
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "emqx:ws_opts"
        },
        "name" : "websocket"
      }
    ]
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "listeners.wss.$name"
    ],
    "full_name" : "emqx:mqtt_wss_listener",
    "desc" : "Settings for the MQTT over WebSocket/SSL listener.",
    "fields" : [
      {
        "raw_default" : 8084,
        "aliases" : [
          
        ],
        "desc" : "监听套接字的 IP 地址和端口。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:ip_port()"
        },
        "name" : "bind",
        "default" : {
          "oneliner" : true,
          "hocon" : "8084"
        }
      },
      {
        "raw_default" : 16,
        "aliases" : [
          
        ],
        "desc" : "监听器接收池的大小。",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "acceptors",
        "default" : {
          "oneliner" : true,
          "hocon" : "16"
        }
      },
      {
        "raw_default" : "infinity",
        "aliases" : [
          
        ],
        "desc" : "监听器允许的最大并发连接数。",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "singleton",
              "name" : "infinity"
            },
            {
              "kind" : "primitive",
              "name" : "pos_integer()"
            }
          ],
          "kind" : "union"
        },
        "name" : "max_connections",
        "default" : {
          "oneliner" : true,
          "hocon" : "infinity"
        }
      },
      {
        "raw_default" : "",
        "aliases" : [
          
        ],
        "desc" : "发布或订阅时，请在所有主题前面加上 mountpoint 字符串。\n\n将消息传递给订阅者时，将从主题名称中删除带前缀的字符串。挂载点是一种用户可以用来实现不同侦听器之间消息路由隔离的方法。\n\n例如，如果客户机 A 使用 <code>listeners.tcp.\\<name>.mountpoint</code> 设置为'some_tenant'，那么客户端实际上订阅了主题'some_tenant/t'。<br/>\n类似地，如果另一个客户端 B（与客户端 A 连接到同一个侦听器）向主题 't' 发送消息，该消息将路由到所有订阅了'some_租户/t'的客户端，因此客户端 A 将接收主题名为't'的消息<br/>\n\n设置为<code>\"\"</code> 以禁用该功能<br/>\n\nmountpoint 字符串中的变量：\n- <code>${clientid}</code>: clientid\n- <code>${username}</code>: username",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "mountpoint",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"\""
        }
      },
      {
        "raw_default" : "default",
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "监听器所属的配置 zone。\n连接到此监听器的客户端将继承在此 zone 名称下创建的 zone 设置。\n\n一个 zone 可以覆盖以下根名称下的配置：\n- `mqtt`\n- `force_shutdown`\n- `force_gc`\n- `flapping_detect`\n- `durable_sessions`",
        "type" : {
          "kind" : "primitive",
          "name" : "atom()"
        },
        "name" : "zone",
        "default" : {
          "oneliner" : true,
          "hocon" : "default"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "配置 <code>true</code> （默认值）启用客户端进行身份认证，通过检查认配置的认认证器链来决定是否允许接入。\n配置 <code>false</code> 时，将不对客户端做任何认证，任何客户端，不论是不是携带用户名等认证信息，都可以接入。\n配置 <code>quick_deny_anonymous</code> 时，行为跟 <code>true</code> 类似，但是会对匿名\n客户直接拒绝，不做使用任何认证器对客户端进行身份检查。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "true",
            "false",
            "quick_deny_anonymous"
          ]
        },
        "name" : "enable_authn",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : "infinity",
        "examples" : [
          "1000/s"
        ],
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "最大连接速率。<br/>\n这用于限制该节点的连接速率。\n一旦达到限制，新的连接将被推迟或拒绝。<br/>\n例如：<br/>\n- <code>1000/s</code>：每秒只接受1000个连接<br/>\n- <code>1000/10s</code>：每10秒只接受1000个连接。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "max_conn_rate",
        "default" : {
          "oneliner" : true,
          "hocon" : "infinity"
        }
      },
      {
        "examples" : [
          "1000/s"
        ],
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "消息发布速率。<br/>\n这用于限制该节点的入站消息数量。\n一旦达到限制，受限制的客户端将减速甚至暂时挂起。<br/>\n例如：<br/>\n- <code>500/s</code>：每秒只发送前500条消息，其他消息被缓冲。<br/>\n- <code>500/10s</code>：即使是10秒，也只发送前500条消息，其他消息被缓冲。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "messages_rate"
      },
      {
        "examples" : [
          "100MB/s"
        ],
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "数据发布速率。<br/>\n这用于限制该节点的入站字节速率。\n一旦达到限制，受限制的客户端将减速甚至暂时挂起。<br/>\n字节的单位可以是：KB MB GB。<br/>\n例如：<br/>\n- <code>500KB/s</code>：每秒只发送前500千字节，其他消息被缓冲。<br/>\n- <code>500MB/10s</code>：即使是10秒，也只发送前500兆字节，其他消息被缓冲。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "bytes_rate"
      },
      {
        "raw_default" : [
          "allow all"
        ],
        "aliases" : [
          
        ],
        "desc" : "此监听器的访问控制规则。",
        "type" : {
          "elements" : {
            "kind" : "primitive",
            "name" : "string()"
          },
          "kind" : "array"
        },
        "name" : "access_rules",
        "default" : {
          "oneliner" : true,
          "hocon" : "[\"allow all\"]"
        }
      },
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "如果 EMQX 集群部署在 HAProxy 或 Nginx 之后，请启用代理协议 V1/2 <br/>\n详情见: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "proxy_protocol",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "raw_default" : "3s",
        "aliases" : [
          
        ],
        "desc" : "代理协议超时。如果在超时时间内未收到代理协议数据包，EMQX 将关闭 TCP 连接。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:duration()"
        },
        "name" : "proxy_protocol_timeout",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"3s\""
        }
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "emqx:tcp_opts"
        },
        "name" : "tcp_options"
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "emqx:listener_wss_opts"
        },
        "name" : "ssl_options"
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "emqx:ws_opts"
        },
        "name" : "websocket"
      }
    ]
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "gateway.coap.listeners.dtls.$name.dtls_options.ocsp",
      "gateway.exproto.listeners.dtls.$name.dtls_options.ocsp",
      "gateway.exproto.listeners.ssl.$name.ssl_options.ocsp",
      "gateway.lwm2m.listeners.dtls.$name.dtls_options.ocsp",
      "gateway.mqttsn.listeners.dtls.$name.dtls_options.ocsp",
      "gateway.stomp.listeners.ssl.$name.ssl_options.ocsp",
      "listeners.ssl.$name.ssl_options.ocsp"
    ],
    "full_name" : "emqx:ocsp",
    "desc" : "Per listener OCSP Stapling configuration.",
    "fields" : [
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "是否为监听器启用 OCSP Stapling 功能。 如果设置为 true，需要定义 OCSP Responder 的 URL 和证书签发者的 PEM 文件路径。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "enable_ocsp_stapling",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "用于检查服务器证书的 OCSP Responder 的 URL。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:url()"
        },
        "name" : "responder_url"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "服务器证书的 OCSP 签发者的 PEM 编码证书。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "issuer_pem"
      },
      {
        "raw_default" : "5m",
        "aliases" : [
          
        ],
        "desc" : "为服务器刷新 OCSP 响应的周期。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:duration()"
        },
        "name" : "refresh_interval",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"5m\""
        }
      },
      {
        "raw_default" : "15s",
        "aliases" : [
          
        ],
        "desc" : "检查 OCSP 响应时，HTTP 请求的超时。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:duration()"
        },
        "name" : "refresh_http_timeout",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15s\""
        }
      }
    ]
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "authentication.$INDEX.ssl",
      "authorization.sources.$INDEX.ssl",
      "cluster.etcd.ssl_options",
      "connectors.elasticsearch.$name.ssl",
      "connectors.http.$name.ssl",
      "connectors.mqtt.$name.ssl",
      "gateway.exproto.handler.ssl_options",
      "opentelemetry.exporter.ssl_options"
    ],
    "full_name" : "emqx:ssl_client_opts",
    "desc" : "Socket options for SSL clients.",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "cacertfile"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "Deprecated since 5.1.4.",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "cacerts"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "certfile"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "PEM 格式的私钥文件。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "keyfile"
      },
      {
        "raw_default" : "verify_none",
        "aliases" : [
          
        ],
        "desc" : "启用或禁用对等验证。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "verify_peer",
            "verify_none"
          ]
        },
        "name" : "verify",
        "default" : {
          "oneliner" : true,
          "hocon" : "verify_none"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "启用 TLS 会话重用。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "reuse_sessions",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : 10,
        "aliases" : [
          
        ],
        "desc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
        "type" : {
          "kind" : "primitive",
          "name" : "non_neg_integer()"
        },
        "name" : "depth",
        "default" : {
          "oneliner" : true,
          "hocon" : "10"
        }
      },
      {
        "examples" : [
          ""
        ],
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "password"
      },
      {
        "raw_default" : [
          "tlsv1.3",
          "tlsv1.2"
        ],
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
        "type" : {
          "elements" : {
            "kind" : "primitive",
            "name" : "atom()"
          },
          "kind" : "array"
        },
        "name" : "versions",
        "default" : {
          "oneliner" : true,
          "hocon" : "[\"tlsv1.3\", \"tlsv1.2\"]"
        }
      },
      {
        "raw_default" : [
          
        ],
        "aliases" : [
          
        ],
        "desc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
        "type" : {
          "elements" : {
            "kind" : "primitive",
            "name" : "string()"
          },
          "kind" : "array"
        },
        "name" : "ciphers",
        "default" : {
          "oneliner" : true,
          "hocon" : "[]"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "secure_renegotiate",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : "notice",
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "emergency",
            "alert",
            "critical",
            "error",
            "warning",
            "notice",
            "info",
            "debug",
            "none",
            "all"
          ]
        },
        "name" : "log_level",
        "default" : {
          "oneliner" : true,
          "hocon" : "notice"
        }
      },
      {
        "raw_default" : "5s",
        "aliases" : [
          
        ],
        "desc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:duration()"
        },
        "name" : "hibernate_after",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"5s\""
        }
      },
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "启用 TLS。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "enable",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "examples" : [
          "disable"
        ],
        "aliases" : [
          
        ],
        "desc" : "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "singleton",
              "name" : "disable"
            },
            {
              "kind" : "primitive",
              "name" : "string()"
            }
          ],
          "kind" : "union"
        },
        "name" : "server_name_indication"
      }
    ]
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "sys_topics"
    ],
    "full_name" : "emqx:sys_topics",
    "desc" : "The EMQX Broker periodically publishes its own status, message statistics,\nclient online and offline events to the system topic starting with `$SYS/`.\n\nThe following options control the behavior of `$SYS` topics.",
    "fields" : [
      {
        "raw_default" : "1m",
        "aliases" : [
          
        ],
        "desc" : "发送 `$SYS` 主题的间隔时间。",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "singleton",
              "name" : "disabled"
            },
            {
              "kind" : "primitive",
              "name" : "emqx_schema:duration()"
            }
          ],
          "kind" : "union"
        },
        "name" : "sys_msg_interval",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"1m\""
        }
      },
      {
        "raw_default" : "30s",
        "aliases" : [
          
        ],
        "desc" : "发送心跳系统消息的间隔时间，它包括：\n  - `$SYS/brokers/<node>/uptime`\n  - `$SYS/brokers/<node>/datetime`",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "singleton",
              "name" : "disabled"
            },
            {
              "kind" : "primitive",
              "name" : "emqx_schema:duration()"
            }
          ],
          "kind" : "union"
        },
        "name" : "sys_heartbeat_interval",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"30s\""
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "客户端事件消息。",
        "type" : {
          "kind" : "struct",
          "name" : "emqx:event_names"
        },
        "name" : "sys_event_messages"
      }
    ]
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "sysmon"
    ],
    "full_name" : "emqx:sysmon",
    "desc" : "Features related to system monitoring and introspection.",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "emqx:sysmon_vm"
        },
        "name" : "vm"
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "emqx:sysmon_os"
        },
        "name" : "os"
      }
    ]
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "sysmon.os"
    ],
    "full_name" : "emqx:sysmon_os",
    "desc" : "This part of the configuration is responsible for monitoring\n the host OS health, such as free memory, disk space, CPU load, etc.",
    "fields" : [
      {
        "raw_default" : "60s",
        "aliases" : [
          
        ],
        "desc" : "定期 CPU 检查的时间间隔。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:duration()"
        },
        "name" : "cpu_check_interval",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"60s\""
        }
      },
      {
        "raw_default" : "80%",
        "aliases" : [
          
        ],
        "desc" : "在发出相应警报之前可以使用多少系统 CPU 的阈值，以系统 CPU 负载的百分比表示。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:percent()"
        },
        "name" : "cpu_high_watermark",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"80%\""
        }
      },
      {
        "raw_default" : "60%",
        "aliases" : [
          
        ],
        "desc" : "在解除相应警报之前可以使用多少系统 CPU 的阈值，以系统 CPU 负载的百分比表示。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:percent()"
        },
        "name" : "cpu_low_watermark",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"60%\""
        }
      },
      {
        "raw_default" : "60s",
        "aliases" : [
          
        ],
        "desc" : "定期内存检查的时间间隔。",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "singleton",
              "name" : "disabled"
            },
            {
              "kind" : "primitive",
              "name" : "emqx_schema:duration()"
            }
          ],
          "kind" : "union"
        },
        "name" : "mem_check_interval",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"60s\""
        }
      },
      {
        "raw_default" : "70%",
        "aliases" : [
          
        ],
        "desc" : "在发出相应报警之前可以分配多少系统内存的阈值，以系统内存的百分比表示。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:percent()"
        },
        "name" : "sysmem_high_watermark",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"70%\""
        }
      },
      {
        "raw_default" : "5%",
        "aliases" : [
          
        ],
        "desc" : "在发出相应警报之前，一个 Erlang 进程可以分配多少系统内存的阈值，以系统内存的百分比表示。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:percent()"
        },
        "name" : "procmem_high_watermark",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"5%\""
        }
      }
    ]
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "sysmon.vm"
    ],
    "full_name" : "emqx:sysmon_vm",
    "desc" : "This part of the configuration is responsible for collecting\n BEAM VM events, such as long garbage collection, traffic congestion in the inter-broker\n communication, etc.",
    "fields" : [
      {
        "raw_default" : "30s",
        "aliases" : [
          
        ],
        "desc" : "定期进程限制检查的时间间隔。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:duration()"
        },
        "name" : "process_check_interval",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"30s\""
        }
      },
      {
        "raw_default" : "80%",
        "aliases" : [
          
        ],
        "desc" : "在发出相应警报之前，本地节点上可以同时存在多少进程的阈值（以进程百分比表示）。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:percent()"
        },
        "name" : "process_high_watermark",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"80%\""
        }
      },
      {
        "raw_default" : "60%",
        "aliases" : [
          
        ],
        "desc" : "在清除相应警报之前，本地节点上可以同时存在多少进程的阈值（以进程百分比表示）。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:percent()"
        },
        "name" : "process_low_watermark",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"60%\""
        }
      },
      {
        "raw_default" : "disabled",
        "aliases" : [
          
        ],
        "desc" : "当系统检测到某个 Erlang 进程垃圾回收占用过长时间，会触发一条带有 <code>long_gc</code> 关键字的日志。\n同时还会发布一条主题为 <code>$SYS/sysmon/long_gc</code> 的 MQTT 系统消息。",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "singleton",
              "name" : "disabled"
            },
            {
              "kind" : "primitive",
              "name" : "emqx_schema:duration()"
            }
          ],
          "kind" : "union"
        },
        "name" : "long_gc",
        "default" : {
          "oneliner" : true,
          "hocon" : "disabled"
        }
      },
      {
        "raw_default" : "240ms",
        "aliases" : [
          
        ],
        "desc" : "启用后，如果 Erlang VM 调度器出现某个任务占用时间过长时，会触发一条带有 'long_schedule' 关键字的日志。\n同时还会发布一条主题为 <code>$SYS/sysmon/long_schedule</code> 的 MQTT 系统消息。",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "singleton",
              "name" : "disabled"
            },
            {
              "kind" : "primitive",
              "name" : "emqx_schema:duration()"
            }
          ],
          "kind" : "union"
        },
        "name" : "long_schedule",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"240ms\""
        }
      },
      {
        "raw_default" : "32MB",
        "aliases" : [
          
        ],
        "desc" : "启用后，当一个 Erlang 进程申请了大量内存，系统会触发一条带有 <code>large_heap</code> 关键字的\nwarning 级别日志。同时还会发布一条主题为 <code>$SYS/sysmon/busy_dist_port</code> 的 MQTT 系统消息。",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "singleton",
              "name" : "disabled"
            },
            {
              "kind" : "primitive",
              "name" : "emqx_schema:bytesize()"
            }
          ],
          "kind" : "union"
        },
        "name" : "large_heap",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"32MB\""
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "启用后，当用于集群接点之间 RPC 的连接过忙时，会触发一条带有 <code>busy_dist_port</code> 关键字的 warning 级别日志。\n同时还会发布一条主题为 <code>$SYS/sysmon/busy_dist_port</code> 的 MQTT 系统消息。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "busy_dist_port",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "当一个系统接口（例如 TCP socket）过忙，会触发一条带有 <code>busy_port</code> 关键字的 warning 级别的日志。\n同时还会发布一条主题为 <code>$SYS/sysmon/busy_port</code> 的 MQTT 系统消息。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "busy_port",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      }
    ]
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "gateway.exproto.listeners.ssl.$name.tcp_options",
      "gateway.exproto.listeners.tcp.$name.tcp_options",
      "gateway.stomp.listeners.ssl.$name.tcp_options",
      "gateway.stomp.listeners.tcp.$name.tcp_options",
      "listeners.ssl.$name.tcp_options",
      "listeners.tcp.$name.tcp_options",
      "listeners.ws.$name.tcp_options",
      "listeners.wss.$name.tcp_options"
    ],
    "full_name" : "emqx:tcp_opts",
    "desc" : "TCP listener options.",
    "fields" : [
      {
        "raw_default" : 100,
        "aliases" : [
          
        ],
        "desc" : "为此套接字指定{active，N}选项<br/>\nSee: https://erlang.org/doc/man/inet.html#setopts-2",
        "type" : {
          "kind" : "primitive",
          "name" : "non_neg_integer()"
        },
        "name" : "active_n",
        "default" : {
          "oneliner" : true,
          "hocon" : "100"
        }
      },
      {
        "raw_default" : 1024,
        "aliases" : [
          
        ],
        "desc" : "TCP backlog 定义了挂起连接队列可以增长到的最大长度。",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "backlog",
        "default" : {
          "oneliner" : true,
          "hocon" : "1024"
        }
      },
      {
        "raw_default" : "15s",
        "aliases" : [
          
        ],
        "desc" : "连接的 TCP 发送超时。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:duration()"
        },
        "name" : "send_timeout",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15s\""
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "如果发送超时，则关闭连接。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "send_timeout_close",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "examples" : [
          "2KB"
        ],
        "aliases" : [
          
        ],
        "desc" : "连接的 TCP 接收缓冲区（OS 内核）。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:bytesize()"
        },
        "name" : "recbuf"
      },
      {
        "examples" : [
          "4KB"
        ],
        "aliases" : [
          
        ],
        "desc" : "连接的 TCP 发送缓冲区（OS 内核）。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:bytesize()"
        },
        "name" : "sndbuf"
      },
      {
        "raw_default" : "4KB",
        "examples" : [
          "4KB"
        ],
        "aliases" : [
          
        ],
        "desc" : "驱动程序使用的用户空间缓冲区的大小。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:bytesize()"
        },
        "name" : "buffer",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"4KB\""
        }
      },
      {
        "raw_default" : "1MB",
        "aliases" : [
          
        ],
        "desc" : "当 VM 套接字实现内部排队的数据量达到此限制时，套接字将设置为忙碌状态。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:bytesize()"
        },
        "name" : "high_watermark",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"1MB\""
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "连接的 TCP_NODELAY 标识",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "nodelay",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "连接的 SO_REUSEADDR 标识。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "reuseaddr",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : "none",
        "aliases" : [
          
        ],
        "desc" : "为 MQTT 连接在 TCP 或 SSL 上启用 TCP 保活。\n值是以逗号分隔的三个数字，格式为 'Idle,Interval,Probes'\n - Idle: 在服务器开始发送保活探测之前，连接需要处于空闲状态的秒数（Linux 默认为 7200）。\n - Interval: TCP 保活探测间隔的秒数（Linux 默认值为 75）。\n - Probes: 在放弃并终止连接之前，从另一端未获得响应时要发送的 TCP 保活探测的最大数量（Linux 默认值为 9 次）。\n例如 \"240,30,5\" 表示：在连接空闲 240 秒后发送 TCP 保活探测，每隔 30 秒发送一次，直到收到响应，如果连续丢失 5 个响应，连接应该被关闭。\n默认值为 'none'",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "keepalive",
        "default" : {
          "oneliner" : true,
          "hocon" : "none"
        }
      }
    ]
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "listeners.ws.$name.websocket",
      "listeners.wss.$name.websocket"
    ],
    "full_name" : "emqx:ws_opts",
    "desc" : "WebSocket listener options.",
    "fields" : [
      {
        "raw_default" : "/mqtt",
        "aliases" : [
          
        ],
        "desc" : "WebSocket 的 MQTT 协议路径。因此，EMQX Broker 的 WebSocket 地址为：\n<code>ws://{ip}:{port}/mqtt</code>",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "mqtt_path",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"/mqtt\""
        }
      },
      {
        "raw_default" : "multiple",
        "aliases" : [
          
        ],
        "desc" : "WebSocket 消息是否允许包含多个 MQTT 数据包。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "single",
            "multiple"
          ]
        },
        "name" : "mqtt_piggyback",
        "default" : {
          "oneliner" : true,
          "hocon" : "multiple"
        }
      },
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "如果 <code>true</code>，则使用 <code>zlib</code> 压缩 WebSocket 消息<br/>\n<code>deflate_opts</code> 下的配置项属于压缩相关参数配置。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "compress",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "raw_default" : "7200s",
        "aliases" : [
          
        ],
        "desc" : "关闭在此间隔内未发送 MQTT CONNECT 消息的客户端的传输层连接。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:duration()"
        },
        "name" : "idle_timeout",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"7200s\""
        }
      },
      {
        "raw_default" : "infinity",
        "aliases" : [
          
        ],
        "desc" : "单个 MQTT 数据包的最大长度。",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "singleton",
              "name" : "infinity"
            },
            {
              "kind" : "primitive",
              "name" : "pos_integer()"
            }
          ],
          "kind" : "union"
        },
        "name" : "max_frame_size",
        "default" : {
          "oneliner" : true,
          "hocon" : "infinity"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "如果<code>true</code>，当客户端未携带<code>Sec WebSocket Protocol</code>字段时，服务器将返回一个错误。\n<br/>注意：微信小程序需要禁用此验证。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "fail_if_no_subprotocol",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : "mqtt, mqtt-v3, mqtt-v3.1.1, mqtt-v5",
        "aliases" : [
          
        ],
        "desc" : "逗号分隔的 subprotocols 支持列表。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:comma_separated_list()"
        },
        "name" : "supported_subprotocols",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"mqtt, mqtt-v3, mqtt-v3.1.1, mqtt-v5\""
        }
      },
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "如果<code>true</code>，<code>origin</code>HTTP 头将根据<code>check_origins</code>参数中配置的允许来源列表进行验证。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "check_origin_enable",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "如果设置为 <code>false</code> 并且 <code>check_origin_enable</code> 为 <code>true</code>，服务器将拒绝没有 <code>origin</code> HTTP 头的请求。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "allow_origin_absence",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : "http://localhost:18083, http://127.0.0.1:18083",
        "aliases" : [
          
        ],
        "desc" : "允许的 origins 列表",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:comma_separated_binary()"
        },
        "name" : "check_origins",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"http://localhost:18083, http://127.0.0.1:18083\""
        }
      },
      {
        "raw_default" : "x-forwarded-for",
        "aliases" : [
          
        ],
        "desc" : "HTTP 头，用于传递有关客户端 IP 地址的信息。\n当 EMQX 集群部署在负载平衡器后面时，这一点非常重要。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "proxy_address_header",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"x-forwarded-for\""
        }
      },
      {
        "raw_default" : "x-forwarded-port",
        "aliases" : [
          
        ],
        "desc" : "HTTP 头，用于传递有关客户端端口的信息。当 EMQX 集群部署在负载平衡器后面时，这一点非常重要。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "proxy_port_header",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"x-forwarded-port\""
        }
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "emqx:deflate_opts"
        },
        "name" : "deflate_opts"
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "设置为 <code>false</code> 可以禁用 WebSocket 帧 UTF-8 验证以提高性能。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "validate_utf8",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "exhook"
    ],
    "full_name" : "exhook",
    "desc" : "External hook (exhook) configuration.",
    "fields" : [
      {
        "raw_default" : [
          
        ],
        "aliases" : [
          
        ],
        "desc" : "ExHook 服务器列表",
        "type" : {
          "elements" : {
            "kind" : "struct",
            "name" : "exhook:server"
          },
          "kind" : "array"
        },
        "name" : "servers",
        "default" : {
          "oneliner" : true,
          "hocon" : "[]"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "exhook.servers.$INDEX"
    ],
    "full_name" : "exhook:server",
    "desc" : "gRPC server configuration.",
    "fields" : [
      {
        "examples" : [
          "default"
        ],
        "aliases" : [
          
        ],
        "desc" : "ExHook 服务器名称",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "name"
      },
      {
        "examples" : [
          "http://127.0.0.1:9000"
        ],
        "aliases" : [
          
        ],
        "desc" : "gRPC 服务器地址",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "url"
      },
      {
        "raw_default" : "5s",
        "aliases" : [
          
        ],
        "desc" : "gRPC 服务器请求超时",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:timeout_duration()"
        },
        "name" : "request_timeout",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"5s\""
        }
      },
      {
        "raw_default" : "deny",
        "aliases" : [
          
        ],
        "desc" : "当 gRPC 请求失败后的操作",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "deny",
            "ignore"
          ]
        },
        "name" : "failed_action",
        "default" : {
          "oneliner" : true,
          "hocon" : "deny"
        }
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "exhook:ssl_conf"
        },
        "name" : "ssl"
      },
      {
        "raw_default" : {
          "nodelay" : true,
          "keepalive" : true
        },
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "exhook:socket_options"
        },
        "name" : "socket_options",
        "default" : {
          "oneliner" : true,
          "hocon" : "{keepalive = true, nodelay = true}"
        }
      },
      {
        "raw_default" : "60s",
        "aliases" : [
          
        ],
        "desc" : "自动重连到 gRPC 服务器的设置。\n当 gRPC 服务器不可用时，Exhook 将会按照这里设置的间隔时间进行重连，并重新初始化注册的钩子",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "singleton",
              "name" : "false"
            },
            {
              "kind" : "primitive",
              "name" : "emqx_schema:timeout_duration()"
            }
          ],
          "kind" : "union"
        },
        "name" : "auto_reconnect",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"60s\""
        }
      },
      {
        "raw_default" : 8,
        "aliases" : [
          
        ],
        "desc" : "gRPC 客户端进程池大小",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "pool_size",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "exhook.servers.$INDEX.socket_options"
    ],
    "full_name" : "exhook:socket_options",
    "desc" : "连接套接字设置",
    "fields" : [
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "当没有其他数据交换时，是否向连接的对端套接字定期的发送探测包。如果另一端没有响应，则认为连接断开，并向控制进程发送错误消息。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "keepalive",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "如果为 true，则为套接字设置 TCP_NODELAY 选项，这意味着会立即发送数据包",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "nodelay",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "examples" : [
          "64KB"
        ],
        "aliases" : [
          
        ],
        "desc" : "套接字的最小接收缓冲区大小",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:bytesize()"
        },
        "name" : "recbuf"
      },
      {
        "examples" : [
          "16KB"
        ],
        "aliases" : [
          
        ],
        "desc" : "套接字的最小发送缓冲区大小",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:bytesize()"
        },
        "name" : "sndbuf"
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "exhook.servers.$INDEX.ssl"
    ],
    "full_name" : "exhook:ssl_conf",
    "desc" : "SSL client configuration.",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "cacertfile"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "Deprecated since 5.1.4.",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "cacerts"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "certfile"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "PEM 格式的私钥文件。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "keyfile"
      },
      {
        "raw_default" : "verify_none",
        "aliases" : [
          
        ],
        "desc" : "启用或禁用对等验证。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "verify_peer",
            "verify_none"
          ]
        },
        "name" : "verify",
        "default" : {
          "oneliner" : true,
          "hocon" : "verify_none"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "启用 TLS 会话重用。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "reuse_sessions",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : 10,
        "aliases" : [
          
        ],
        "desc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
        "type" : {
          "kind" : "primitive",
          "name" : "non_neg_integer()"
        },
        "name" : "depth",
        "default" : {
          "oneliner" : true,
          "hocon" : "10"
        }
      },
      {
        "examples" : [
          ""
        ],
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "password"
      },
      {
        "raw_default" : [
          "tlsv1.3",
          "tlsv1.2"
        ],
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
        "type" : {
          "elements" : {
            "kind" : "primitive",
            "name" : "atom()"
          },
          "kind" : "array"
        },
        "name" : "versions",
        "default" : {
          "oneliner" : true,
          "hocon" : "[\"tlsv1.3\", \"tlsv1.2\"]"
        }
      },
      {
        "raw_default" : [
          
        ],
        "aliases" : [
          
        ],
        "desc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
        "type" : {
          "elements" : {
            "kind" : "primitive",
            "name" : "string()"
          },
          "kind" : "array"
        },
        "name" : "ciphers",
        "default" : {
          "oneliner" : true,
          "hocon" : "[]"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "secure_renegotiate",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : "notice",
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "emergency",
            "alert",
            "critical",
            "error",
            "warning",
            "notice",
            "info",
            "debug",
            "none",
            "all"
          ]
        },
        "name" : "log_level",
        "default" : {
          "oneliner" : true,
          "hocon" : "notice"
        }
      },
      {
        "raw_default" : "5s",
        "aliases" : [
          
        ],
        "desc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:duration()"
        },
        "name" : "hibernate_after",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"5s\""
        }
      },
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "启用 TLS。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "enable",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "examples" : [
          "disable"
        ],
        "aliases" : [
          
        ],
        "desc" : "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "singleton",
              "name" : "disable"
            },
            {
              "kind" : "primitive",
              "name" : "string()"
            }
          ],
          "kind" : "union"
        },
        "name" : "server_name_indication"
      }
    ]
  },
  {
    "tags" : [
      "Gateway"
    ],
    "paths" : [
      "gateway.coap.clientinfo_override",
      "gateway.exproto.clientinfo_override",
      "gateway.lwm2m.clientinfo_override",
      "gateway.mqttsn.clientinfo_override",
      "gateway.stomp.clientinfo_override"
    ],
    "full_name" : "gateway:clientinfo_override",
    "desc" : "ClientInfo override.",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "username 重写模板",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "username"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "password 重写模板",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "password"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "clientid 重写模板",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "clientid"
      }
    ]
  },
  {
    "tags" : [
      "Gateway"
    ],
    "paths" : [
      "gateway.coap.listeners.dtls.$name",
      "gateway.exproto.listeners.dtls.$name",
      "gateway.lwm2m.listeners.dtls.$name",
      "gateway.mqttsn.listeners.dtls.$name"
    ],
    "full_name" : "gateway:dtls_listener",
    "desc" : "Settings for DTLS listener.",
    "fields" : [
      {
        "raw_default" : 16,
        "aliases" : [
          
        ],
        "desc" : "Acceptor 进程池大小。",
        "type" : {
          "kind" : "primitive",
          "name" : "integer()"
        },
        "name" : "acceptors",
        "default" : {
          "oneliner" : true,
          "hocon" : "16"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "Some Cloud platform use a `request-reply` mechanism to check whether a UDP port is healthy, here can configure this pair.",
        "type" : {
          "kind" : "struct",
          "name" : "gateway:udp_health_check"
        },
        "name" : "health_check"
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "gateway:udp_opts"
        },
        "name" : "udp_options"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "监听器绑定的 IP 地址或端口。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_gateway_schema:ip_port()"
        },
        "name" : "bind"
      },
      {
        "raw_default" : 1024,
        "aliases" : [
          
        ],
        "desc" : "监听器支持的最大连接数。",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "primitive",
              "name" : "pos_integer()"
            },
            {
              "kind" : "singleton",
              "name" : "infinity"
            }
          ],
          "kind" : "union"
        },
        "name" : "max_connections",
        "default" : {
          "oneliner" : true,
          "hocon" : "1024"
        }
      },
      {
        "raw_default" : 1000,
        "aliases" : [
          
        ],
        "desc" : "监听器支持的最大连接速率。",
        "type" : {
          "kind" : "primitive",
          "name" : "integer()"
        },
        "name" : "max_conn_rate",
        "default" : {
          "oneliner" : true,
          "hocon" : "1000"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "配置 <code>true</code> （默认值）启用客户端进行身份认证。\n配置 <code>false</code> 时，将不对客户端做任何认证。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "enable_authn",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "发布或订阅时，在所有主题前增加前缀字符串。\n当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。\n例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，\n则客户端实际上订阅了 `some_tenant/t` 主题。\n类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，\n则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。\n挂载点字符串中可用的变量：<br/>\n   - <code>${clientid}</code>：clientid<br/>\n   - <code>${username}</code>：用户名",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "mountpoint"
      },
      {
        "raw_default" : [
          
        ],
        "aliases" : [
          
        ],
        "desc" : "配置监听器的访问控制规则。\n见：https://github.com/emqtt/esockd#allowdeny",
        "type" : {
          "elements" : {
            "kind" : "primitive",
            "name" : "string()"
          },
          "kind" : "array"
        },
        "name" : "access_rules",
        "default" : {
          "oneliner" : true,
          "hocon" : "[]"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "DTLS Socket 配置",
        "type" : {
          "kind" : "struct",
          "name" : "gateway:dtls_opts"
        },
        "name" : "dtls_options"
      }
    ]
  },
  {
    "tags" : [
      "Gateway"
    ],
    "paths" : [
      "gateway.coap.listeners.dtls.$name.dtls_options",
      "gateway.exproto.listeners.dtls.$name.dtls_options",
      "gateway.lwm2m.listeners.dtls.$name.dtls_options",
      "gateway.mqttsn.listeners.dtls.$name.dtls_options"
    ],
    "full_name" : "gateway:dtls_opts",
    "desc" : "Settings for DTLS protocol.",
    "fields" : [
      {
        "raw_default" : "${EMQX_ETC_DIR}/certs/cacert.pem",
        "aliases" : [
          
        ],
        "desc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "cacertfile",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"${EMQX_ETC_DIR}/certs/cacert.pem\""
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "Deprecated since 5.1.4.",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "cacerts"
      },
      {
        "raw_default" : "${EMQX_ETC_DIR}/certs/cert.pem",
        "aliases" : [
          
        ],
        "desc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "certfile",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"${EMQX_ETC_DIR}/certs/cert.pem\""
        }
      },
      {
        "raw_default" : "${EMQX_ETC_DIR}/certs/key.pem",
        "aliases" : [
          
        ],
        "desc" : "PEM 格式的私钥文件。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "keyfile",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"${EMQX_ETC_DIR}/certs/key.pem\""
        }
      },
      {
        "raw_default" : "verify_none",
        "aliases" : [
          
        ],
        "desc" : "启用或禁用对等验证。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "verify_peer",
            "verify_none"
          ]
        },
        "name" : "verify",
        "default" : {
          "oneliner" : true,
          "hocon" : "verify_none"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "启用 TLS 会话重用。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "reuse_sessions",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : 10,
        "aliases" : [
          
        ],
        "desc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
        "type" : {
          "kind" : "primitive",
          "name" : "non_neg_integer()"
        },
        "name" : "depth",
        "default" : {
          "oneliner" : true,
          "hocon" : "10"
        }
      },
      {
        "examples" : [
          ""
        ],
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "password"
      },
      {
        "raw_default" : [
          "dtlsv1.2"
        ],
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
        "type" : {
          "elements" : {
            "kind" : "primitive",
            "name" : "atom()"
          },
          "kind" : "array"
        },
        "name" : "versions",
        "default" : {
          "oneliner" : true,
          "hocon" : "[\"dtlsv1.2\"]"
        }
      },
      {
        "raw_default" : [
          
        ],
        "aliases" : [
          
        ],
        "desc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
        "type" : {
          "elements" : {
            "kind" : "primitive",
            "name" : "string()"
          },
          "kind" : "array"
        },
        "name" : "ciphers",
        "default" : {
          "oneliner" : true,
          "hocon" : "[]"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "secure_renegotiate",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : "notice",
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "emergency",
            "alert",
            "critical",
            "error",
            "warning",
            "notice",
            "info",
            "debug",
            "none",
            "all"
          ]
        },
        "name" : "log_level",
        "default" : {
          "oneliner" : true,
          "hocon" : "notice"
        }
      },
      {
        "raw_default" : "5s",
        "aliases" : [
          
        ],
        "desc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:duration()"
        },
        "name" : "hibernate_after",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"5s\""
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "如果协商使用 Diffie-Hellman 密钥交换的密码套件，则服务器将使用包含 PEM 编码的 Diffie-Hellman 参数的文件的路径。如果未指定，则使用默认参数。<br/>\n注意：TLS 1.3 不支持<code>dhfile</code>选项。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "dhfile"
      },
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "TLS/DTLS 服务器与 {verify，verify_peer} 一起使用。\n如果设置为 true，则如果客户端没有要发送的证书，即发送空证书，服务器将失败。\n如果设置为 false，则仅当客户端发送无效证书（空证书被视为有效证书）时才会失败。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "fail_if_no_peer_cert",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "一个重要的安全设置，它强制根据服务器指定的顺序而不是客户机指定的顺序设置密码，从而强制服务器管理员执行（通常配置得更正确）安全顺序。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "honor_cipher_order",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "在支持客户机发起的重新协商的协议中，这种操作的资源成本对于服务器来说高于客户机。\n这可能会成为拒绝服务攻击的载体。\nSSL 应用程序已经采取措施来反击此类尝试，但通过将此选项设置为 false，可以严格禁用客户端发起的重新协商。\n默认值为 true。请注意，由于基础密码套件可以加密的消息数量有限，禁用重新协商可能会导致长期连接变得不可用。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "client_renegotiation",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : "15s",
        "aliases" : [
          
        ],
        "desc" : "握手完成所允许的最长时间",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:duration()"
        },
        "name" : "handshake_timeout",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15s\""
        }
      },
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "内存使用调优。如果启用，将在 TLS/SSL 握手完成后立即执行垃圾回收。TLS/SSL 握手建立后立即进行 GC。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "gc_after_handshake",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "emqx:ocsp"
        },
        "name" : "ocsp"
      },
      {
        "raw_default" : false,
        "importance" : "medium",
        "aliases" : [
          
        ],
        "desc" : "是否为该监听器启用 CRL 检查。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "enable_crl_check",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      }
    ]
  },
  {
    "tags" : [
      "Gateway"
    ],
    "paths" : [
      "gateway"
    ],
    "full_name" : "gateway",
    "desc" : "EMQX Gateway configuration root.",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "gateway:coap"
        },
        "name" : "coap"
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "gateway:exproto"
        },
        "name" : "exproto"
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "gateway:lwm2m"
        },
        "name" : "lwm2m"
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "gateway:mqttsn"
        },
        "name" : "mqttsn"
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "gateway:stomp"
        },
        "name" : "stomp"
      }
    ]
  },
  {
    "tags" : [
      "Gateway"
    ],
    "paths" : [
      "gateway.exproto.listeners.ssl.$name",
      "gateway.stomp.listeners.ssl.$name"
    ],
    "full_name" : "gateway:ssl_listener",
    "desc" : "Settings for SSL listener.",
    "fields" : [
      {
        "raw_default" : 16,
        "aliases" : [
          
        ],
        "desc" : "Acceptor 进程池大小。",
        "type" : {
          "kind" : "primitive",
          "name" : "integer()"
        },
        "name" : "acceptors",
        "default" : {
          "oneliner" : true,
          "hocon" : "16"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "TCP Socket 配置。",
        "type" : {
          "kind" : "struct",
          "name" : "emqx:tcp_opts"
        },
        "name" : "tcp_options"
      },
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "是否开启 Proxy Protocol V1/2。当 EMQX 集群部署在 HAProxy 或 Nginx 后需要获取客户端真实 IP 时常用到该选项。参考：https://www.haproxy.com/blog/haproxy/proxy-protocol/",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "proxy_protocol",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "raw_default" : "3s",
        "aliases" : [
          
        ],
        "desc" : "接收 Proxy Protocol 报文头的超时时间。如果在超时内没有收到 Proxy Protocol 包，EMQX 将关闭 TCP 连接。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_gateway_schema:duration()"
        },
        "name" : "proxy_protocol_timeout",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"3s\""
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "监听器绑定的 IP 地址或端口。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_gateway_schema:ip_port()"
        },
        "name" : "bind"
      },
      {
        "raw_default" : 1024,
        "aliases" : [
          
        ],
        "desc" : "监听器支持的最大连接数。",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "primitive",
              "name" : "pos_integer()"
            },
            {
              "kind" : "singleton",
              "name" : "infinity"
            }
          ],
          "kind" : "union"
        },
        "name" : "max_connections",
        "default" : {
          "oneliner" : true,
          "hocon" : "1024"
        }
      },
      {
        "raw_default" : 1000,
        "aliases" : [
          
        ],
        "desc" : "监听器支持的最大连接速率。",
        "type" : {
          "kind" : "primitive",
          "name" : "integer()"
        },
        "name" : "max_conn_rate",
        "default" : {
          "oneliner" : true,
          "hocon" : "1000"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "配置 <code>true</code> （默认值）启用客户端进行身份认证。\n配置 <code>false</code> 时，将不对客户端做任何认证。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "enable_authn",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "发布或订阅时，在所有主题前增加前缀字符串。\n当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。\n例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，\n则客户端实际上订阅了 `some_tenant/t` 主题。\n类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，\n则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。\n挂载点字符串中可用的变量：<br/>\n   - <code>${clientid}</code>：clientid<br/>\n   - <code>${username}</code>：用户名",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "mountpoint"
      },
      {
        "raw_default" : [
          
        ],
        "aliases" : [
          
        ],
        "desc" : "配置监听器的访问控制规则。\n见：https://github.com/emqtt/esockd#allowdeny",
        "type" : {
          "elements" : {
            "kind" : "primitive",
            "name" : "string()"
          },
          "kind" : "array"
        },
        "name" : "access_rules",
        "default" : {
          "oneliner" : true,
          "hocon" : "[]"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "SSL Socket 配置。",
        "type" : {
          "kind" : "struct",
          "name" : "emqx:listener_ssl_opts"
        },
        "name" : "ssl_options"
      }
    ]
  },
  {
    "tags" : [
      "Gateway"
    ],
    "paths" : [
      "gateway.exproto.listeners.tcp.$name",
      "gateway.stomp.listeners.tcp.$name"
    ],
    "full_name" : "gateway:tcp_listener",
    "desc" : "Settings for TCP listener.",
    "fields" : [
      {
        "raw_default" : 16,
        "aliases" : [
          
        ],
        "desc" : "Acceptor 进程池大小。",
        "type" : {
          "kind" : "primitive",
          "name" : "integer()"
        },
        "name" : "acceptors",
        "default" : {
          "oneliner" : true,
          "hocon" : "16"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "TCP Socket 配置。",
        "type" : {
          "kind" : "struct",
          "name" : "emqx:tcp_opts"
        },
        "name" : "tcp_options"
      },
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "是否开启 Proxy Protocol V1/2。当 EMQX 集群部署在 HAProxy 或 Nginx 后需要获取客户端真实 IP 时常用到该选项。参考：https://www.haproxy.com/blog/haproxy/proxy-protocol/",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "proxy_protocol",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "raw_default" : "3s",
        "aliases" : [
          
        ],
        "desc" : "接收 Proxy Protocol 报文头的超时时间。如果在超时内没有收到 Proxy Protocol 包，EMQX 将关闭 TCP 连接。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_gateway_schema:duration()"
        },
        "name" : "proxy_protocol_timeout",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"3s\""
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "监听器绑定的 IP 地址或端口。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_gateway_schema:ip_port()"
        },
        "name" : "bind"
      },
      {
        "raw_default" : 1024,
        "aliases" : [
          
        ],
        "desc" : "监听器支持的最大连接数。",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "primitive",
              "name" : "pos_integer()"
            },
            {
              "kind" : "singleton",
              "name" : "infinity"
            }
          ],
          "kind" : "union"
        },
        "name" : "max_connections",
        "default" : {
          "oneliner" : true,
          "hocon" : "1024"
        }
      },
      {
        "raw_default" : 1000,
        "aliases" : [
          
        ],
        "desc" : "监听器支持的最大连接速率。",
        "type" : {
          "kind" : "primitive",
          "name" : "integer()"
        },
        "name" : "max_conn_rate",
        "default" : {
          "oneliner" : true,
          "hocon" : "1000"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "配置 <code>true</code> （默认值）启用客户端进行身份认证。\n配置 <code>false</code> 时，将不对客户端做任何认证。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "enable_authn",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "发布或订阅时，在所有主题前增加前缀字符串。\n当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。\n例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，\n则客户端实际上订阅了 `some_tenant/t` 主题。\n类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，\n则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。\n挂载点字符串中可用的变量：<br/>\n   - <code>${clientid}</code>：clientid<br/>\n   - <code>${username}</code>：用户名",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "mountpoint"
      },
      {
        "raw_default" : [
          
        ],
        "aliases" : [
          
        ],
        "desc" : "配置监听器的访问控制规则。\n见：https://github.com/emqtt/esockd#allowdeny",
        "type" : {
          "elements" : {
            "kind" : "primitive",
            "name" : "string()"
          },
          "kind" : "array"
        },
        "name" : "access_rules",
        "default" : {
          "oneliner" : true,
          "hocon" : "[]"
        }
      }
    ]
  },
  {
    "tags" : [
      "Gateway"
    ],
    "paths" : [
      "gateway.stomp.listeners"
    ],
    "full_name" : "gateway:tcp_listeners",
    "desc" : "Settings for the TCP listeners.",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "从监听器名称到配置参数的映射。",
        "type" : {
          "kind" : "map",
          "values" : {
            "kind" : "struct",
            "name" : "gateway:tcp_listener"
          },
          "name" : "name"
        },
        "name" : "tcp"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "从监听器名称到配置参数的映射。",
        "type" : {
          "kind" : "map",
          "values" : {
            "kind" : "struct",
            "name" : "gateway:ssl_listener"
          },
          "name" : "name"
        },
        "name" : "ssl"
      }
    ]
  },
  {
    "tags" : [
      "Gateway"
    ],
    "paths" : [
      "gateway.exproto.listeners"
    ],
    "full_name" : "gateway:tcp_udp_listeners",
    "desc" : "Settings for TCP and UDP listeners.",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "从监听器名称到配置参数的映射。",
        "type" : {
          "kind" : "map",
          "values" : {
            "kind" : "struct",
            "name" : "gateway:tcp_listener"
          },
          "name" : "name"
        },
        "name" : "tcp"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "从监听器名称到配置参数的映射。",
        "type" : {
          "kind" : "map",
          "values" : {
            "kind" : "struct",
            "name" : "gateway:ssl_listener"
          },
          "name" : "name"
        },
        "name" : "ssl"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "从监听器名称到配置参数的映射。",
        "type" : {
          "kind" : "map",
          "values" : {
            "kind" : "struct",
            "name" : "gateway:udp_listener"
          },
          "name" : "name"
        },
        "name" : "udp"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "从监听器名称到配置参数的映射。",
        "type" : {
          "kind" : "map",
          "values" : {
            "kind" : "struct",
            "name" : "gateway:dtls_listener"
          },
          "name" : "name"
        },
        "name" : "dtls"
      }
    ]
  },
  {
    "tags" : [
      "Gateway"
    ],
    "paths" : [
      "gateway.coap.listeners.dtls.$name.health_check",
      "gateway.coap.listeners.udp.$name.health_check",
      "gateway.exproto.listeners.dtls.$name.health_check",
      "gateway.exproto.listeners.udp.$name.health_check",
      "gateway.lwm2m.listeners.dtls.$name.health_check",
      "gateway.lwm2m.listeners.udp.$name.health_check",
      "gateway.mqttsn.listeners.dtls.$name.health_check",
      "gateway.mqttsn.listeners.udp.$name.health_check"
    ],
    "full_name" : "gateway:udp_health_check",
    "desc" : "UDP health check",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "The content of the request.",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "request"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "The content to reply.",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "reply"
      }
    ]
  },
  {
    "tags" : [
      "Gateway"
    ],
    "paths" : [
      "gateway.coap.listeners.udp.$name",
      "gateway.exproto.listeners.udp.$name",
      "gateway.lwm2m.listeners.udp.$name",
      "gateway.mqttsn.listeners.udp.$name"
    ],
    "full_name" : "gateway:udp_listener",
    "desc" : "Settings for UDP listener.",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "Some Cloud platform use a `request-reply` mechanism to check whether a UDP port is healthy, here can configure this pair.",
        "type" : {
          "kind" : "struct",
          "name" : "gateway:udp_health_check"
        },
        "name" : "health_check"
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "gateway:udp_opts"
        },
        "name" : "udp_options"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "监听器绑定的 IP 地址或端口。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_gateway_schema:ip_port()"
        },
        "name" : "bind"
      },
      {
        "raw_default" : 1024,
        "aliases" : [
          
        ],
        "desc" : "监听器支持的最大连接数。",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "primitive",
              "name" : "pos_integer()"
            },
            {
              "kind" : "singleton",
              "name" : "infinity"
            }
          ],
          "kind" : "union"
        },
        "name" : "max_connections",
        "default" : {
          "oneliner" : true,
          "hocon" : "1024"
        }
      },
      {
        "raw_default" : 1000,
        "aliases" : [
          
        ],
        "desc" : "监听器支持的最大连接速率。",
        "type" : {
          "kind" : "primitive",
          "name" : "integer()"
        },
        "name" : "max_conn_rate",
        "default" : {
          "oneliner" : true,
          "hocon" : "1000"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "配置 <code>true</code> （默认值）启用客户端进行身份认证。\n配置 <code>false</code> 时，将不对客户端做任何认证。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "enable_authn",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "发布或订阅时，在所有主题前增加前缀字符串。\n当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。\n例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，\n则客户端实际上订阅了 `some_tenant/t` 主题。\n类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，\n则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。\n挂载点字符串中可用的变量：<br/>\n   - <code>${clientid}</code>：clientid<br/>\n   - <code>${username}</code>：用户名",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "mountpoint"
      },
      {
        "raw_default" : [
          
        ],
        "aliases" : [
          
        ],
        "desc" : "配置监听器的访问控制规则。\n见：https://github.com/emqtt/esockd#allowdeny",
        "type" : {
          "elements" : {
            "kind" : "primitive",
            "name" : "string()"
          },
          "kind" : "array"
        },
        "name" : "access_rules",
        "default" : {
          "oneliner" : true,
          "hocon" : "[]"
        }
      }
    ]
  },
  {
    "tags" : [
      "Gateway"
    ],
    "paths" : [
      "gateway.coap.listeners",
      "gateway.lwm2m.listeners",
      "gateway.mqttsn.listeners"
    ],
    "full_name" : "gateway:udp_listeners",
    "desc" : "Settings for the UDP listeners.",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "从监听器名称到配置参数的映射。",
        "type" : {
          "kind" : "map",
          "values" : {
            "kind" : "struct",
            "name" : "gateway:udp_listener"
          },
          "name" : "name"
        },
        "name" : "udp"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "从监听器名称到配置参数的映射。",
        "type" : {
          "kind" : "map",
          "values" : {
            "kind" : "struct",
            "name" : "gateway:dtls_listener"
          },
          "name" : "name"
        },
        "name" : "dtls"
      }
    ]
  },
  {
    "tags" : [
      "Gateway"
    ],
    "paths" : [
      "gateway.coap.listeners.dtls.$name.udp_options",
      "gateway.coap.listeners.udp.$name.udp_options",
      "gateway.exproto.listeners.dtls.$name.udp_options",
      "gateway.exproto.listeners.udp.$name.udp_options",
      "gateway.lwm2m.listeners.dtls.$name.udp_options",
      "gateway.lwm2m.listeners.udp.$name.udp_options",
      "gateway.mqttsn.listeners.dtls.$name.udp_options",
      "gateway.mqttsn.listeners.udp.$name.udp_options"
    ],
    "full_name" : "gateway:udp_opts",
    "desc" : "Settings for UDP sockets.",
    "fields" : [
      {
        "raw_default" : 100,
        "aliases" : [
          
        ],
        "desc" : "为 Socket 指定 {active, N} 选项。\n参见：https://erlang.org/doc/man/inet.html#setopts-2",
        "type" : {
          "kind" : "primitive",
          "name" : "integer()"
        },
        "name" : "active_n",
        "default" : {
          "oneliner" : true,
          "hocon" : "100"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "Socket 在内核空间接收缓冲区的大小。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_gateway_schema:bytesize()"
        },
        "name" : "recbuf"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "Socket 在内核空间发送缓冲区的大小。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_gateway_schema:bytesize()"
        },
        "name" : "sndbuf"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "Socket 在用户空间的缓冲区大小。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_gateway_schema:bytesize()"
        },
        "name" : "buffer"
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "允许重用本地处于 TIME_WAIT 的端口号。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "reuseaddr",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "gateway.lwm2m"
    ],
    "full_name" : "gateway:lwm2m",
    "desc" : "The LwM2M protocol gateway.",
    "fields" : [
      {
        "examples" : [
          "/etc/emqx/lwm2m_xml"
        ],
        "aliases" : [
          
        ],
        "desc" : "LwM2M Resource 定义的 XML 文件目录路径。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "xml_dir"
      },
      {
        "raw_default" : "15s",
        "aliases" : [
          
        ],
        "desc" : "允许 LwM2M 客户端允许设置的心跳最小值。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_lwm2m_schema:duration()"
        },
        "name" : "lifetime_min",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15s\""
        }
      },
      {
        "raw_default" : "86400s",
        "aliases" : [
          
        ],
        "desc" : "允许 LwM2M 客户端允许设置的心跳最大值。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_lwm2m_schema:duration()"
        },
        "name" : "lifetime_max",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"86400s\""
        }
      },
      {
        "raw_default" : "22s",
        "aliases" : [
          
        ],
        "desc" : "在 QMode 模式下，LwM2M 网关认为网络链接有效的时间窗口的值。\n例如，在收到客户端的更新信息后，在这个时间窗口内的任何信息都会直接发送到 LwM2M 客户端，而超过这个时间窗口的所有信息都会暂时储存在内存中。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_lwm2m_schema:duration_s()"
        },
        "name" : "qmode_time_window",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"22s\""
        }
      },
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "自动 Observe REGISTER 数据包的 Object 列表。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "auto_observe",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "raw_default" : "contains_object_list",
        "aliases" : [
          
        ],
        "desc" : "发布 UPDATE 事件消息的策略。<br/>\n  - always: 只要收到 UPDATE 请求，就发送更新事件。<br/>\n  - contains_object_list: 仅当 UPDATE 请求携带 Object 列表时才发送更新事件。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "always",
            "contains_object_list"
          ]
        },
        "name" : "update_msg_publish_condition",
        "default" : {
          "oneliner" : true,
          "hocon" : "contains_object_list"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "LwM2M 网关订阅/发布消息的主题映射配置。",
        "type" : {
          "kind" : "struct",
          "name" : "gateway:lwm2m_translators"
        },
        "name" : "translators"
      },
      {
        "raw_default" : "lwm2m/${endpoint_name}/",
        "aliases" : [
          
        ],
        "desc" : "发布或订阅时，在所有主题前增加前缀字符串。\n当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。\n例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，\n则客户端实际上订阅了 `some_tenant/t` 主题。\n类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，\n则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。\n挂载点字符串中可用的变量：<br/>\n   - <code>${clientid}</code>：clientid<br/>\n   - <code>${username}</code>：用户名",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "mountpoint",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"lwm2m/${endpoint_name}/\""
        }
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "gateway:udp_listeners"
        },
        "name" : "listeners"
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "是否开启客户端统计",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "enable_stats",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : "30s",
        "aliases" : [
          
        ],
        "desc" : "客户端连接过程的空闲时间。该配置用于：\n  1. 一个新创建的客户端进程如果在该时间间隔内没有收到任何客户端请求，将被直接关闭。\n  2. 一个正在运行的客户进程如果在这段时间后没有收到任何客户请求，将进入休眠状态以节省资源。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_gateway_schema:duration()"
        },
        "name" : "idle_timeout",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"30s\""
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "ClientInfo 重写。",
        "type" : {
          "kind" : "struct",
          "name" : "gateway:clientinfo_override"
        },
        "name" : "clientinfo_override"
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "gateway.lwm2m.translators"
    ],
    "full_name" : "gateway:lwm2m_translators",
    "desc" : "MQTT topics that correspond to LwM2M events.",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "下行命令主题。\n对于每个成功上线的新 LwM2M 客户端，网关会创建一个订阅关系来接收下行消息并将其发送给客户端",
        "type" : {
          "kind" : "struct",
          "name" : "gateway:translator"
        },
        "name" : "command"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "用于网关发布来自 LwM2M 客户端的确认事件的主题。",
        "type" : {
          "kind" : "struct",
          "name" : "gateway:translator"
        },
        "name" : "response"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "用于发布来自 LwM2M 客户端的通知事件的主题。\n在成功 Observe 到 LwM2M 客户端的资源后，如果客户端报告任何资源状态的变化，网关将通过该主题发送通知事件",
        "type" : {
          "kind" : "struct",
          "name" : "gateway:translator"
        },
        "name" : "notify"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "用于发布来自 LwM2M 客户端的注册事件的主题。",
        "type" : {
          "kind" : "struct",
          "name" : "gateway:translator"
        },
        "name" : "register"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "用于发布来自 LwM2M 客户端的更新事件的主题。",
        "type" : {
          "kind" : "struct",
          "name" : "gateway:translator"
        },
        "name" : "update"
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "gateway.lwm2m.translators.command",
      "gateway.lwm2m.translators.notify",
      "gateway.lwm2m.translators.register",
      "gateway.lwm2m.translators.response",
      "gateway.lwm2m.translators.update"
    ],
    "full_name" : "gateway:translator",
    "desc" : "MQTT topic that corresponds to a particular type of event.",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "主题名称",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "topic"
      },
      {
        "raw_default" : 0,
        "aliases" : [
          
        ],
        "desc" : "QoS 等级",
        "type" : {
          "kind" : "primitive",
          "name" : "qos()"
        },
        "name" : "qos",
        "default" : {
          "oneliner" : true,
          "hocon" : "0"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "delayed"
    ],
    "full_name" : "modules:delayed",
    "desc" : "Settings for the delayed module.",
    "fields" : [
      {
        "raw_default" : 0,
        "aliases" : [
          
        ],
        "desc" : "延迟消息的数量上限(0 代表不限数量)",
        "type" : {
          "kind" : "primitive",
          "name" : "integer()"
        },
        "name" : "max_delayed_messages",
        "default" : {
          "oneliner" : true,
          "hocon" : "0"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "opentelemetry"
    ],
    "full_name" : "opentelemetry",
    "desc" : "Open Telemetry 工具包配置",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "Open Telemetry 指标配置。",
        "type" : {
          "kind" : "struct",
          "name" : "opentelemetry:otel_metrics"
        },
        "name" : "metrics"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "Open Telemetry 日志配置。如果启用，EMQX 将安装一个日志处理器，根据 Open Telemetry 日志数据模型格式化事件，并将它们导出到配置的 Open Telemetry 收集器或后端。",
        "type" : {
          "kind" : "struct",
          "name" : "opentelemetry:otel_logs"
        },
        "name" : "logs"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "Open Telemetry 追踪配置。",
        "type" : {
          "kind" : "struct",
          "name" : "opentelemetry:otel_traces"
        },
        "name" : "traces"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "Open Telemetry 导出器",
        "type" : {
          "kind" : "struct",
          "name" : "opentelemetry:otel_exporter"
        },
        "name" : "exporter"
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "opentelemetry.exporter"
    ],
    "full_name" : "opentelemetry:otel_exporter",
    "desc" : "Open Telemetry 导出器",
    "fields" : [
      {
        "raw_default" : [
          104,
          116,
          116,
          112,
          58,
          47,
          47,
          108,
          111,
          99,
          97,
          108,
          104,
          111,
          115,
          116,
          58,
          52,
          51,
          49,
          55
        ],
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "导出器将要发送 Open Telemetry 信号数据的目标 URL。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:url()"
        },
        "name" : "endpoint",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"http://localhost:4317\""
        }
      },
      {
        "raw_default" : {
          "enable" : false
        },
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "Open Telemetry 导出器的 SSL 配置",
        "type" : {
          "kind" : "struct",
          "name" : "emqx:ssl_client_opts"
        },
        "name" : "ssl_options",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "opentelemetry.logs"
    ],
    "full_name" : "opentelemetry:otel_logs",
    "desc" : "Open Telemetry 日志配置。如果启用，EMQX 将安装一个日志处理器，根据 Open Telemetry 日志数据模型格式化事件，并将它们导出到配置的 Open Telemetry 收集器或后端。",
    "fields" : [
      {
        "raw_default" : "warning",
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "Open Telemetry 日志处理器的日志级别。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "debug",
            "info",
            "notice",
            "warning",
            "error",
            "critical",
            "alert",
            "emergency",
            "all"
          ]
        },
        "name" : "level",
        "default" : {
          "oneliner" : true,
          "hocon" : "warning"
        }
      },
      {
        "raw_default" : false,
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "启用或禁用 open telemetry 指标",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "enable",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "raw_default" : "1s",
        "importance" : "medium",
        "aliases" : [
          
        ],
        "desc" : "两次连续导出 Open Telemetry 信号之间的延迟间隔。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:timeout_duration_ms()"
        },
        "name" : "scheduled_delay",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"1s\""
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "opentelemetry.metrics"
    ],
    "full_name" : "opentelemetry:otel_metrics",
    "desc" : "Open Telemetry 指标配置。",
    "fields" : [
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "启用或禁用 open telemetry 指标",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "enable",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "raw_default" : "10s",
        "importance" : "medium",
        "aliases" : [
          "scheduled_delay"
        ],
        "desc" : "两次连续导出 Open Telemetry 信号之间的延迟间隔。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:timeout_duration_ms()"
        },
        "name" : "interval",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"10s\""
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "opentelemetry.traces"
    ],
    "full_name" : "opentelemetry:otel_traces",
    "desc" : "Open Telemetry 追踪配置。",
    "fields" : [
      {
        "raw_default" : false,
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "启用或禁用 open telemetry 指标",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "enable",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "raw_default" : "5s",
        "importance" : "medium",
        "aliases" : [
          
        ],
        "desc" : "两次连续导出 Open Telemetry 信号之间的延迟间隔。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:timeout_duration_ms()"
        },
        "name" : "scheduled_delay",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"5s\""
        }
      },
      {
        "importance" : "medium",
        "aliases" : [
          
        ],
        "desc" : "Open Telemetry 追踪过滤器配置",
        "type" : {
          "kind" : "struct",
          "name" : "opentelemetry:trace_filter"
        },
        "name" : "filter"
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "opentelemetry.traces.filter"
    ],
    "full_name" : "opentelemetry:trace_filter",
    "desc" : "Open Telemetry 追踪过滤器配置",
    "fields" : [
      {
        "raw_default" : false,
        "importance" : "medium",
        "aliases" : [
          
        ],
        "desc" : "如果启用，将追踪所有发布的消息，如果无法从消息中提取追踪 ID，则生成新的追踪 ID。\n否则，只追踪带有追踪上下文的消息。默认禁用。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "trace_all",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "prometheus.collectors"
    ],
    "full_name" : "prometheus:collectors",
    "desc" : "虚拟机的内部高级指标最初是禁用的\n通常只在性能测试期间启用。\n启用它们将增加 CPU 负载。",
    "fields" : [
      {
        "raw_default" : "disabled",
        "aliases" : [
          
        ],
        "desc" : "开启或关闭 VM 分布采集器，收集 Erlang 分布机制中涉及的套接字和进程的信息。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "disabled",
            "enabled"
          ]
        },
        "name" : "vm_dist",
        "default" : {
          "oneliner" : true,
          "hocon" : "disabled"
        }
      },
      {
        "raw_default" : "disabled",
        "aliases" : [
          
        ],
        "desc" : "开启或关闭 Mnesia 采集器, 使用 mnesia:system_info/1 收集 Mnesia 相关指标",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "enabled",
            "disabled"
          ]
        },
        "name" : "mnesia",
        "default" : {
          "oneliner" : true,
          "hocon" : "disabled"
        }
      },
      {
        "raw_default" : "disabled",
        "aliases" : [
          
        ],
        "desc" : "开启或关闭 VM 统计采集器, 使用 erlang:statistics/1 收集 Erlang VM 相关指标",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "enabled",
            "disabled"
          ]
        },
        "name" : "vm_statistics",
        "default" : {
          "oneliner" : true,
          "hocon" : "disabled"
        }
      },
      {
        "raw_default" : "disabled",
        "aliases" : [
          
        ],
        "desc" : "开启或关闭 VM 系统信息采集器, 使用 erlang:system_info/1 收集 Erlang VM 相关指标",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "enabled",
            "disabled"
          ]
        },
        "name" : "vm_system_info",
        "default" : {
          "oneliner" : true,
          "hocon" : "disabled"
        }
      },
      {
        "raw_default" : "disabled",
        "aliases" : [
          
        ],
        "desc" : "开启或关闭 VM 内存采集器, 使用 erlang:memory/0 收集 Erlang 虚拟机动态分配的内存信息，同时提供基本的 (D)ETS 统计信息",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "enabled",
            "disabled"
          ]
        },
        "name" : "vm_memory",
        "default" : {
          "oneliner" : true,
          "hocon" : "disabled"
        }
      },
      {
        "raw_default" : "disabled",
        "aliases" : [
          
        ],
        "desc" : "开启或关闭 VM msacc 采集器, 使用 erlang:statistics(microstate_accounting) 收集微状态计数指标",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "enabled",
            "disabled"
          ]
        },
        "name" : "vm_msacc",
        "default" : {
          "oneliner" : true,
          "hocon" : "disabled"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "prometheus"
    ],
    "full_name" : "prometheus:legacy_deprecated_setting",
    "desc" : "自5.4.0版本起弃用。",
    "fields" : [
      {
        "raw_default" : "http://127.0.0.1:9091",
        "aliases" : [
          
        ],
        "desc" : "自5.4.0版本起弃用，改用 `prometheus.push_gateway.url`。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "push_gateway_server",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"http://127.0.0.1:9091\""
        }
      },
      {
        "raw_default" : "15s",
        "aliases" : [
          
        ],
        "desc" : "自5.4.0版本起弃用，改用 `prometheus.push_gateway.interval`。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:timeout_duration_ms()"
        },
        "name" : "interval",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15s\""
        }
      },
      {
        "raw_default" : {
          
        },
        "aliases" : [
          
        ],
        "desc" : "自5.4.0版本起弃用，改用 `prometheus.push_gateway.headers`。",
        "type" : {
          "kind" : "primitive",
          "name" : "map(string(), string())"
        },
        "name" : "headers",
        "default" : {
          "oneliner" : true,
          "hocon" : "{}"
        }
      },
      {
        "raw_default" : "${name}/instance/${name}~${host}",
        "aliases" : [
          
        ],
        "desc" : "自5.4.0版本起弃用，改用 `prometheus.push_gateway.job_name`。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "job_name",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"${name}/instance/${name}~${host}\""
        }
      },
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "自5.4.0版本起弃用，改用 `prometheus.push_gateway.url`。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "enable",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "raw_default" : "disabled",
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "自5.4.0版本起弃用，改用 `prometheus.collectors.vm_dist`。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "disabled",
            "enabled"
          ]
        },
        "name" : "vm_dist_collector",
        "default" : {
          "oneliner" : true,
          "hocon" : "disabled"
        }
      },
      {
        "raw_default" : "disabled",
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "自5.4.0版本起弃用，改用 `prometheus.collectors.mnesia`。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "enabled",
            "disabled"
          ]
        },
        "name" : "mnesia_collector",
        "default" : {
          "oneliner" : true,
          "hocon" : "disabled"
        }
      },
      {
        "raw_default" : "disabled",
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "自5.4.0版本起弃用，改用 `prometheus.collectors.vm_statistics`。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "enabled",
            "disabled"
          ]
        },
        "name" : "vm_statistics_collector",
        "default" : {
          "oneliner" : true,
          "hocon" : "disabled"
        }
      },
      {
        "raw_default" : "disabled",
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "自5.4.0版本起弃用，改用 `prometheus.collectors.vm_system_info`。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "enabled",
            "disabled"
          ]
        },
        "name" : "vm_system_info_collector",
        "default" : {
          "oneliner" : true,
          "hocon" : "disabled"
        }
      },
      {
        "raw_default" : "disabled",
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "自5.4.0版本起弃用，改用 `prometheus.collectors.vm_memory`。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "enabled",
            "disabled"
          ]
        },
        "name" : "vm_memory_collector",
        "default" : {
          "oneliner" : true,
          "hocon" : "disabled"
        }
      },
      {
        "raw_default" : "disabled",
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "自5.4.0版本起弃用，改用 `prometheus.collectors.vm_msacc`。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "enabled",
            "disabled"
          ]
        },
        "name" : "vm_msacc_collector",
        "default" : {
          "oneliner" : true,
          "hocon" : "disabled"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "prometheus.push_gateway"
    ],
    "full_name" : "prometheus:push_gateway",
    "desc" : "Push Gateway 是可选的，如果 Prometheus 要抓取 EMQX，则不应配置。",
    "fields" : [
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "启用或禁用 Pushgateway。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "enable",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "raw_default" : "http://127.0.0.1:9091",
        "aliases" : [
          
        ],
        "desc" : "Pushgateway 服务器的 URL。Push Gateway 是可选的，如果 Prometheus 要抓取 EMQX，则不应配置。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "url",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"http://127.0.0.1:9091\""
        }
      },
      {
        "raw_default" : "15s",
        "aliases" : [
          
        ],
        "desc" : "数据推送间隔",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:timeout_duration_ms()"
        },
        "name" : "interval",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15s\""
        }
      },
      {
        "raw_default" : {
          
        },
        "aliases" : [
          
        ],
        "desc" : "推送到 Push Gateway 的 HTTP Headers 列表。<br/>\n例如，<code> { Authorization = \"some-authz-tokens\"}</code>",
        "type" : {
          "kind" : "primitive",
          "name" : "map(string(), string())"
        },
        "name" : "headers",
        "default" : {
          "oneliner" : true,
          "hocon" : "{}"
        }
      },
      {
        "raw_default" : "${name}/instance/${name}~${host}",
        "aliases" : [
          
        ],
        "desc" : "推送到 Push Gateway 的 Job 名称。可用变量为：<br/>\n- ${name}: EMQX 节点的名称。\n- ${host}: EMQX 节点主机名。\n例如，当 EMQX 节点名为 <code>emqx@127.0.0.1</code> 则 name 变量的值为 <code>emqx</code>，host 变量的值为 <code>127.0.0.1</code>。<br/>\n默认值为: <code>${name}/instance/${name}~${host}</code>",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "job_name",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"${name}/instance/${name}~${host}\""
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "prometheus"
    ],
    "full_name" : "prometheus:recommend_setting",
    "desc" : "推荐的设置",
    "fields" : [
      {
        "raw_default" : false,
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "启用或禁用 Prometheus 抓取 API 的基本认证，不适用于 Push Gateway。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "enable_basic_auth",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "importance" : "medium",
        "aliases" : [
          
        ],
        "desc" : "Push Gateway 是可选的，如果 Prometheus 要抓取 EMQX，则不应配置。",
        "type" : {
          "kind" : "struct",
          "name" : "prometheus:push_gateway"
        },
        "name" : "push_gateway"
      },
      {
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "虚拟机的内部高级指标最初是禁用的\n通常只在性能测试期间启用。\n启用它们将增加 CPU 负载。",
        "type" : {
          "kind" : "struct",
          "name" : "prometheus:collectors"
        },
        "name" : "collectors"
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "retainer.backend"
    ],
    "full_name" : "retainer:mnesia_config",
    "desc" : "Configuration of the internal database storing retained messages.",
    "fields" : [
      {
        "raw_default" : "built_in_database",
        "aliases" : [
          
        ],
        "desc" : "后端类型",
        "type" : {
          "kind" : "singleton",
          "name" : "built_in_database"
        },
        "name" : "type",
        "default" : {
          "oneliner" : true,
          "hocon" : "built_in_database"
        }
      },
      {
        "raw_default" : "ram",
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "选择消息是存放在磁盘还是内存中",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "ram",
            "disc"
          ]
        },
        "name" : "storage_type",
        "default" : {
          "oneliner" : true,
          "hocon" : "ram"
        }
      },
      {
        "raw_default" : 0,
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "消息保留的数量上限。0 表示无限",
        "type" : {
          "kind" : "primitive",
          "name" : "non_neg_integer()"
        },
        "name" : "max_retained_messages",
        "default" : {
          "oneliner" : true,
          "hocon" : "0"
        }
      },
      {
        "raw_default" : [
          [
            1,
            2,
            3
          ],
          [
            1,
            3
          ],
          [
            2,
            3
          ],
          [
            3
          ]
        ],
        "examples" : [
          [
            [
              2,
              4
            ],
            [
              1,
              3
            ]
          ]
        ],
        "aliases" : [
          
        ],
        "desc" : "Retainer index specifications: list of arrays of positive ascending integers. Each array specifies an index. Numbers in an index specification are 1-based word positions in topics. Words from specified positions will be used for indexing.<br/>For example, it is good to have <code>[2, 4]</code> index to optimize <code>+/X/+/Y/...</code> topic wildcard subscriptions.",
        "type" : {
          "kind" : "primitive",
          "name" : "[[integer()]]"
        },
        "name" : "index_specs",
        "default" : {
          "oneliner" : true,
          "hocon" : "[[1, 2, 3], [1, 3], [2, 3], [3]]"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "retainer"
    ],
    "full_name" : "retainer",
    "desc" : "Configuration related to handling `PUBLISH` packets with a `retain` flag set to 1.",
    "fields" : [
      {
        "raw_default" : "0s",
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "消息保留时间。0 代表永久保留",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:duration_ms()"
        },
        "name" : "msg_expiry_interval",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"0s\""
        }
      },
      {
        "raw_default" : "0s",
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "消息清理间隔。0 代表不进行清理",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:timeout_duration_ms()"
        },
        "name" : "msg_clear_interval",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"0s\""
        }
      },
      {
        "raw_default" : "1MB",
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "消息大小最大值",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:bytesize()"
        },
        "name" : "max_payload_size",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"1MB\""
        }
      },
      {
        "raw_default" : false,
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "当 PUBLISH 消息的保留标志被设置且有效载荷为空时，是否继续发布消息。\n参见：\nhttp://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718038",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "stop_publish_clear_msg",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "raw_default" : "1000/s",
        "examples" : [
          "1000/s"
        ],
        "aliases" : [
          "deliver_rate"
        ],
        "desc" : "发送保留消息的最大速率",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "delivery_rate",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"1000/s\""
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "保留消息的存储后端",
        "type" : {
          "kind" : "struct",
          "name" : "retainer:mnesia_config"
        },
        "name" : "backend"
      }
    ]
  },
  {
    "tags" : [
      "Actions",
      "Sources"
    ],
    "paths" : [
      "actions"
    ],
    "full_name" : "actions_and_sources:actions",
    "desc" : "数据桥接的配置信息",
    "fields" : [
      {
        "aliases" : [
          "webhook"
        ],
        "desc" : "HTTP Action Config",
        "type" : {
          "kind" : "map",
          "values" : {
            "kind" : "struct",
            "name" : "bridge_http:http_action"
          },
          "name" : "name"
        },
        "name" : "http"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "MQTT Publisher Action Config",
        "type" : {
          "kind" : "map",
          "values" : {
            "kind" : "struct",
            "name" : "bridge_mqtt_publisher:mqtt_publisher_action"
          },
          "name" : "name"
        },
        "name" : "mqtt"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "Elasticsearch 动作",
        "type" : {
          "kind" : "map",
          "values" : {
            "kind" : "struct",
            "name" : "bridge_elasticsearch:action_config"
          },
          "name" : "action_name"
        },
        "name" : "elasticsearch"
      }
    ]
  },
  {
    "tags" : [
      "Actions",
      "Sources"
    ],
    "paths" : [
      "sources"
    ],
    "full_name" : "actions_and_sources:sources",
    "desc" : "Source 的配置。",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "MQTT Subscriber Source Config",
        "type" : {
          "kind" : "map",
          "values" : {
            "kind" : "struct",
            "name" : "bridge_mqtt_publisher:mqtt_subscriber_source"
          },
          "name" : "name"
        },
        "name" : "mqtt"
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "authentication.$INDEX"
    ],
    "full_name" : "authn:http_get",
    "desc" : "使用 HTTP Server 作为认证服务的认证器的配置项 (使用 GET 请求)。",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "HTTP 请求方法。",
        "type" : {
          "kind" : "singleton",
          "name" : "get"
        },
        "name" : "method"
      },
      {
        "raw_default" : {
          "keep-alive" : "timeout=30, max=1000",
          "connection" : "keep-alive",
          "cache-control" : "no-cache",
          "accept" : "application/json"
        },
        "aliases" : [
          
        ],
        "desc" : "HTTP Headers 列表 (无 <code>content-type</code>) 。",
        "type" : {
          "kind" : "primitive",
          "name" : "map()"
        },
        "name" : "headers",
        "default" : {
          "oneliner" : true,
          "hocon" : "{accept = \"application/json\", cache-control = \"no-cache\", connection = \"keep-alive\", keep-alive = \"timeout=30, max=1000\"}"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "认证方式。",
        "type" : {
          "kind" : "singleton",
          "name" : "password_based"
        },
        "name" : "mechanism"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "后端类型。",
        "type" : {
          "kind" : "singleton",
          "name" : "http"
        },
        "name" : "backend"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "认证 HTTP 服务器地址。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "url"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "HTTP 请求体。",
        "type" : {
          "kind" : "primitive",
          "name" : "map()"
        },
        "name" : "body"
      },
      {
        "raw_default" : "5s",
        "aliases" : [
          
        ],
        "desc" : "HTTP 请求超时时长。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:duration_ms()"
        },
        "name" : "request_timeout",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"5s\""
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "配置 HTTP 请求参数。",
        "type" : {
          "kind" : "struct",
          "name" : "connector_http:request"
        },
        "name" : "request"
      },
      {
        "raw_default" : {
          "enable" : false
        },
        "aliases" : [
          
        ],
        "desc" : "启用 SSL 连接。",
        "type" : {
          "kind" : "struct",
          "name" : "emqx:ssl_client_opts"
        },
        "name" : "ssl",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        }
      },
      {
        "raw_default" : 8,
        "aliases" : [
          
        ],
        "desc" : "连接池大小。",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "pool_size",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        }
      },
      {
        "raw_default" : "15s",
        "aliases" : [
          
        ],
        "desc" : "连接到 HTTP 服务器的超时时间。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:timeout_duration_ms()"
        },
        "name" : "connect_timeout",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15s\""
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "Deprecated since 5.0.4.",
        "type" : {
          "kind" : "primitive",
          "name" : "non_neg_integer()"
        },
        "name" : "max_retries"
      },
      {
        "raw_default" : 100,
        "aliases" : [
          
        ],
        "desc" : "一个正整数。是否连续发送 HTTP 请求，当设置为1时，意味着在发送每个 HTTP 请求后，需要等待服务器返回，然后继续发送下一个请求。",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "enable_pipelining",
        "default" : {
          "oneliner" : true,
          "hocon" : "100"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "Deprecated since 5.0.4.",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:timeout_duration()"
        },
        "name" : "retry_interval"
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "authentication.$INDEX"
    ],
    "full_name" : "authn:http_post",
    "desc" : "使用 HTTP Server 作为认证服务的认证器的配置项 (使用 POST 请求)。",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "HTTP 请求方法。",
        "type" : {
          "kind" : "singleton",
          "name" : "post"
        },
        "name" : "method"
      },
      {
        "raw_default" : {
          "keep-alive" : "timeout=30, max=1000",
          "content-type" : "application/json",
          "connection" : "keep-alive",
          "cache-control" : "no-cache",
          "accept" : "application/json"
        },
        "aliases" : [
          
        ],
        "desc" : "HTTP Headers 列表",
        "type" : {
          "kind" : "primitive",
          "name" : "map()"
        },
        "name" : "headers",
        "default" : {
          "oneliner" : true,
          "hocon" : "{accept = \"application/json\", cache-control = \"no-cache\", connection = \"keep-alive\", content-type = \"application/json\", keep-alive = \"timeout=30, max=1000\"}"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "认证方式。",
        "type" : {
          "kind" : "singleton",
          "name" : "password_based"
        },
        "name" : "mechanism"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "后端类型。",
        "type" : {
          "kind" : "singleton",
          "name" : "http"
        },
        "name" : "backend"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "认证 HTTP 服务器地址。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "url"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "HTTP 请求体。",
        "type" : {
          "kind" : "primitive",
          "name" : "map()"
        },
        "name" : "body"
      },
      {
        "raw_default" : "5s",
        "aliases" : [
          
        ],
        "desc" : "HTTP 请求超时时长。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:duration_ms()"
        },
        "name" : "request_timeout",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"5s\""
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "配置 HTTP 请求参数。",
        "type" : {
          "kind" : "struct",
          "name" : "connector_http:request"
        },
        "name" : "request"
      },
      {
        "raw_default" : {
          "enable" : false
        },
        "aliases" : [
          
        ],
        "desc" : "启用 SSL 连接。",
        "type" : {
          "kind" : "struct",
          "name" : "emqx:ssl_client_opts"
        },
        "name" : "ssl",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        }
      },
      {
        "raw_default" : 8,
        "aliases" : [
          
        ],
        "desc" : "连接池大小。",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "pool_size",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        }
      },
      {
        "raw_default" : "15s",
        "aliases" : [
          
        ],
        "desc" : "连接到 HTTP 服务器的超时时间。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:timeout_duration_ms()"
        },
        "name" : "connect_timeout",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15s\""
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "Deprecated since 5.0.4.",
        "type" : {
          "kind" : "primitive",
          "name" : "non_neg_integer()"
        },
        "name" : "max_retries"
      },
      {
        "raw_default" : 100,
        "aliases" : [
          
        ],
        "desc" : "一个正整数。是否连续发送 HTTP 请求，当设置为1时，意味着在发送每个 HTTP 请求后，需要等待服务器返回，然后继续发送下一个请求。",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "enable_pipelining",
        "default" : {
          "oneliner" : true,
          "hocon" : "100"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "Deprecated since 5.0.4.",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:timeout_duration()"
        },
        "name" : "retry_interval"
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "authentication.$INDEX"
    ],
    "full_name" : "authn:jwt_hmac",
    "desc" : "用于认证的 JWT 使用 HMAC 算法签发时的配置。",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "JWT 签名算法，支持 HMAC (配置为 <code>hmac-based</code>）和 RSA、ECDSA (配置为 <code>public-key</code>)。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "hmac-based"
          ]
        },
        "name" : "algorithm"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "使用 HMAC 算法时用于验证 JWT 的密钥",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "secret"
      },
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "密钥是否为 base64 编码。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "secret_base64_encoded",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "认证方式。",
        "type" : {
          "kind" : "singleton",
          "name" : "jwt"
        },
        "name" : "mechanism"
      },
      {
        "raw_default" : "acl",
        "aliases" : [
          
        ],
        "desc" : "用于获取 ACL 规则的 JWT 声明名称。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "acl_claim_name",
        "default" : {
          "oneliner" : true,
          "hocon" : "acl"
        }
      },
      {
        "raw_default" : {
          
        },
        "aliases" : [
          
        ],
        "desc" : "需要验证的自定义声明列表，是一个由名称/值对组成的列表。指定一个键(Key)来查找 JWT 中对应的声明(Claim)，并提供一个预期值(Expected Value)来与声明的实际值进行比较，以确保只有满足特定条件的 JWT 才能被接受和使用。\n例如要求 JWT 中的特定声明(如 clientid)的值必须与当前连接的客户端 ID 相匹配。\n预期值可以使用以下占位符：\n- <code>${username}</code>: 将在运行时被替换为客户端连接时使用的用户名\n- <code>${clientid}</code>: 将在运行时被替换为客户端连接时使用的客户端 ID\n身份认证将确认 JWT 中的声明值（从密码字段中获取）与 <code>verify_claims</code> 中要求的内容是否匹配。",
        "type" : {
          "kind" : "primitive",
          "name" : "map()"
        },
        "name" : "verify_claims",
        "default" : {
          "oneliner" : true,
          "hocon" : "{}"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "在 token 过期后断开客户端连接。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "disconnect_after_expire",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : "password",
        "aliases" : [
          
        ],
        "desc" : "指定客户端连接请求中 JWT 的位置。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "username",
            "password"
          ]
        },
        "name" : "from",
        "default" : {
          "oneliner" : true,
          "hocon" : "password"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "authentication.$INDEX"
    ],
    "full_name" : "authn:jwt_jwks",
    "desc" : "用于认证的 JWTs 需要从 JWKS 端点获取时的配置。",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "是否使用 JWKS。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "true"
          ]
        },
        "name" : "use_jwks"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "JWKS 端点， 它是一个以 JWKS 格式返回服务端的公钥集的只读端点。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "endpoint"
      },
      {
        "raw_default" : {
          "Accept" : "application/json"
        },
        "aliases" : [
          
        ],
        "desc" : "List of HTTP headers to send with the JWKS request.",
        "type" : {
          "kind" : "primitive",
          "name" : "map()"
        },
        "name" : "headers",
        "default" : {
          "oneliner" : true,
          "hocon" : "{Accept = \"application/json\"}"
        }
      },
      {
        "raw_default" : 8,
        "aliases" : [
          
        ],
        "desc" : "桥接远端服务时使用的连接池大小。",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "pool_size",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        }
      },
      {
        "raw_default" : 300,
        "aliases" : [
          
        ],
        "desc" : "JWKS 刷新间隔。",
        "type" : {
          "kind" : "primitive",
          "name" : "integer()"
        },
        "name" : "refresh_interval",
        "default" : {
          "oneliner" : true,
          "hocon" : "300"
        }
      },
      {
        "raw_default" : {
          "enable" : false
        },
        "aliases" : [
          
        ],
        "desc" : "SSL 选项。",
        "type" : {
          "kind" : "struct",
          "name" : "emqx:ssl_client_opts"
        },
        "name" : "ssl",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "认证方式。",
        "type" : {
          "kind" : "singleton",
          "name" : "jwt"
        },
        "name" : "mechanism"
      },
      {
        "raw_default" : "acl",
        "aliases" : [
          
        ],
        "desc" : "用于获取 ACL 规则的 JWT 声明名称。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "acl_claim_name",
        "default" : {
          "oneliner" : true,
          "hocon" : "acl"
        }
      },
      {
        "raw_default" : {
          
        },
        "aliases" : [
          
        ],
        "desc" : "需要验证的自定义声明列表，是一个由名称/值对组成的列表。指定一个键(Key)来查找 JWT 中对应的声明(Claim)，并提供一个预期值(Expected Value)来与声明的实际值进行比较，以确保只有满足特定条件的 JWT 才能被接受和使用。\n例如要求 JWT 中的特定声明(如 clientid)的值必须与当前连接的客户端 ID 相匹配。\n预期值可以使用以下占位符：\n- <code>${username}</code>: 将在运行时被替换为客户端连接时使用的用户名\n- <code>${clientid}</code>: 将在运行时被替换为客户端连接时使用的客户端 ID\n身份认证将确认 JWT 中的声明值（从密码字段中获取）与 <code>verify_claims</code> 中要求的内容是否匹配。",
        "type" : {
          "kind" : "primitive",
          "name" : "map()"
        },
        "name" : "verify_claims",
        "default" : {
          "oneliner" : true,
          "hocon" : "{}"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "在 token 过期后断开客户端连接。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "disconnect_after_expire",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : "password",
        "aliases" : [
          
        ],
        "desc" : "指定客户端连接请求中 JWT 的位置。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "username",
            "password"
          ]
        },
        "name" : "from",
        "default" : {
          "oneliner" : true,
          "hocon" : "password"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "authentication.$INDEX"
    ],
    "full_name" : "authn:jwt_public_key",
    "desc" : "用于认证的 JWT 使用 RSA 或 ECDSA 算法签发时的配置。",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "JWT 签名算法，支持 HMAC (配置为 <code>hmac-based</code>）和 RSA、ECDSA (配置为 <code>public-key</code>)。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "public-key"
          ]
        },
        "name" : "algorithm"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "用于验证 JWT 的公钥。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "public_key"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "认证方式。",
        "type" : {
          "kind" : "singleton",
          "name" : "jwt"
        },
        "name" : "mechanism"
      },
      {
        "raw_default" : "acl",
        "aliases" : [
          
        ],
        "desc" : "用于获取 ACL 规则的 JWT 声明名称。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "acl_claim_name",
        "default" : {
          "oneliner" : true,
          "hocon" : "acl"
        }
      },
      {
        "raw_default" : {
          
        },
        "aliases" : [
          
        ],
        "desc" : "需要验证的自定义声明列表，是一个由名称/值对组成的列表。指定一个键(Key)来查找 JWT 中对应的声明(Claim)，并提供一个预期值(Expected Value)来与声明的实际值进行比较，以确保只有满足特定条件的 JWT 才能被接受和使用。\n例如要求 JWT 中的特定声明(如 clientid)的值必须与当前连接的客户端 ID 相匹配。\n预期值可以使用以下占位符：\n- <code>${username}</code>: 将在运行时被替换为客户端连接时使用的用户名\n- <code>${clientid}</code>: 将在运行时被替换为客户端连接时使用的客户端 ID\n身份认证将确认 JWT 中的声明值（从密码字段中获取）与 <code>verify_claims</code> 中要求的内容是否匹配。",
        "type" : {
          "kind" : "primitive",
          "name" : "map()"
        },
        "name" : "verify_claims",
        "default" : {
          "oneliner" : true,
          "hocon" : "{}"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "在 token 过期后断开客户端连接。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "disconnect_after_expire",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : "password",
        "aliases" : [
          
        ],
        "desc" : "指定客户端连接请求中 JWT 的位置。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "username",
            "password"
          ]
        },
        "name" : "from",
        "default" : {
          "oneliner" : true,
          "hocon" : "password"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "authentication.$INDEX.method"
    ],
    "full_name" : "authn:bind_method",
    "desc" : "通过 LDAP 绑定操作进行认证。",
    "fields" : [
      {
        "raw_default" : "bind",
        "aliases" : [
          
        ],
        "desc" : "认证方式类型。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "bind"
          ]
        },
        "name" : "type",
        "default" : {
          "oneliner" : true,
          "hocon" : "bind"
        }
      },
      {
        "raw_default" : "${password}",
        "examples" : [
          "${password}"
        ],
        "aliases" : [
          
        ],
        "desc" : "绑定密码的模版",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "bind_password",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"${password}\""
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "authentication.$INDEX.method"
    ],
    "full_name" : "authn:hash_method",
    "desc" : "通过将本地密码与经过由`密码属性`指定的算法加密的密码进行比对来进行认证。",
    "fields" : [
      {
        "raw_default" : "hash",
        "aliases" : [
          
        ],
        "desc" : "认证方式类型。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "hash"
          ]
        },
        "name" : "type",
        "default" : {
          "oneliner" : true,
          "hocon" : "hash"
        }
      },
      {
        "raw_default" : "userPassword",
        "aliases" : [
          
        ],
        "desc" : "指示哪个属性用于表示用户密码。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "password_attribute",
        "default" : {
          "oneliner" : true,
          "hocon" : "userPassword"
        }
      },
      {
        "raw_default" : "isSuperuser",
        "aliases" : [
          
        ],
        "desc" : "指示哪个属性用于表示用户是否为超级用户。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "is_superuser_attribute",
        "default" : {
          "oneliner" : true,
          "hocon" : "isSuperuser"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "authentication.$INDEX"
    ],
    "full_name" : "authn:ldap",
    "desc" : "使用 LDAP 作为认证数据源的认证器的配置项。",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "认证方式。",
        "type" : {
          "kind" : "singleton",
          "name" : "password_based"
        },
        "name" : "mechanism"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "后端类型。",
        "type" : {
          "kind" : "singleton",
          "name" : "ldap"
        },
        "name" : "backend"
      },
      {
        "raw_default" : "5s",
        "aliases" : [
          
        ],
        "desc" : "LDAP 查询的超时时间。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:timeout_duration_ms()"
        },
        "name" : "query_timeout",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"5s\""
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "要连接的 IPv4 或 IPv6 地址或主机名。<br/>\n主机名条目的格式为：`主机[:端口]`。<br/>\n如果 `[:端口]` 未指定， 将使用 LDAP 默认端口 389。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "server"
      },
      {
        "raw_default" : 8,
        "aliases" : [
          
        ],
        "desc" : "桥接远端服务时使用的连接池大小。",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "pool_size",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "内部数据库的用户名。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "username"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "内部数据库密码。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema_secret:secret()"
        },
        "name" : "password"
      },
      {
        "examples" : [
          "uid=${username},ou=testdevice,dc=emqx,dc=io"
        ],
        "aliases" : [
          
        ],
        "desc" : "与基本对象条目（或根）相关的名称。\n搜索用户的起点。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "base_dn"
      },
      {
        "raw_default" : "(objectClass=mqttUser)",
        "examples" : [
          "(& (objectClass=mqttUser) (uid=${username}))"
        ],
        "aliases" : [
          
        ],
        "desc" : "定义哪些条件必须被依次满足的过滤器\n用于搜索匹配一条给定的条目.<br>\n筛选器的语法遵循 RFC 4515，并且还支持占位符。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "filter",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"(objectClass=mqttUser)\""
        }
      },
      {
        "raw_default" : "10s",
        "aliases" : [
          
        ],
        "desc" : "设置每个单独请求所使用的最大时间（以毫秒为单位）。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:timeout_duration_ms()"
        },
        "name" : "request_timeout",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"10s\""
        }
      },
      {
        "raw_default" : {
          "enable" : false
        },
        "aliases" : [
          
        ],
        "desc" : "启用 SSL 连接。",
        "type" : {
          "kind" : "struct",
          "name" : "ldap:ssl"
        },
        "name" : "ssl",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "认证方式。",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "struct",
              "name" : "authn:hash_method"
            },
            {
              "kind" : "struct",
              "name" : "authn:bind_method"
            }
          ],
          "kind" : "union"
        },
        "name" : "method"
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "authentication.$INDEX"
    ],
    "full_name" : "authn:ldap_deprecated",
    "desc" : "这是一种已弃用的形式，应避免使用。",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "认证方式。",
        "type" : {
          "kind" : "singleton",
          "name" : "password_based"
        },
        "name" : "mechanism"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "后端类型。",
        "type" : {
          "kind" : "singleton",
          "name" : "ldap"
        },
        "name" : "backend"
      },
      {
        "raw_default" : "5s",
        "aliases" : [
          
        ],
        "desc" : "LDAP 查询的超时时间。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:timeout_duration_ms()"
        },
        "name" : "query_timeout",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"5s\""
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "要连接的 IPv4 或 IPv6 地址或主机名。<br/>\n主机名条目的格式为：`主机[:端口]`。<br/>\n如果 `[:端口]` 未指定， 将使用 LDAP 默认端口 389。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "server"
      },
      {
        "raw_default" : 8,
        "aliases" : [
          
        ],
        "desc" : "桥接远端服务时使用的连接池大小。",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "pool_size",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "内部数据库的用户名。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "username"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "内部数据库密码。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema_secret:secret()"
        },
        "name" : "password"
      },
      {
        "examples" : [
          "uid=${username},ou=testdevice,dc=emqx,dc=io"
        ],
        "aliases" : [
          
        ],
        "desc" : "与基本对象条目（或根）相关的名称。\n搜索用户的起点。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "base_dn"
      },
      {
        "raw_default" : "(objectClass=mqttUser)",
        "examples" : [
          "(& (objectClass=mqttUser) (uid=${username}))"
        ],
        "aliases" : [
          
        ],
        "desc" : "定义哪些条件必须被依次满足的过滤器\n用于搜索匹配一条给定的条目.<br>\n筛选器的语法遵循 RFC 4515，并且还支持占位符。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "filter",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"(objectClass=mqttUser)\""
        }
      },
      {
        "raw_default" : "10s",
        "aliases" : [
          
        ],
        "desc" : "设置每个单独请求所使用的最大时间（以毫秒为单位）。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:timeout_duration_ms()"
        },
        "name" : "request_timeout",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"10s\""
        }
      },
      {
        "raw_default" : {
          "enable" : false
        },
        "aliases" : [
          
        ],
        "desc" : "启用 SSL 连接。",
        "type" : {
          "kind" : "struct",
          "name" : "ldap:ssl"
        },
        "name" : "ssl",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        }
      },
      {
        "raw_default" : "userPassword",
        "aliases" : [
          
        ],
        "desc" : "指示哪个属性用于表示用户密码。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "password_attribute",
        "default" : {
          "oneliner" : true,
          "hocon" : "userPassword"
        }
      },
      {
        "raw_default" : "isSuperuser",
        "aliases" : [
          
        ],
        "desc" : "指示哪个属性用于表示用户是否为超级用户。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "is_superuser_attribute",
        "default" : {
          "oneliner" : true,
          "hocon" : "isSuperuser"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "authentication.$INDEX"
    ],
    "full_name" : "authn:builtin_db",
    "desc" : "使用内置数据库作为认证数据源的认证器的配置项。",
    "fields" : [
      {
        "raw_default" : {
          "salt_position" : "prefix",
          "name" : "sha256"
        },
        "aliases" : [
          
        ],
        "desc" : "Options for password hash creation and verification.",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "struct",
              "name" : "authn_hash:bcrypt_rw"
            },
            {
              "kind" : "struct",
              "name" : "authn_hash:pbkdf2"
            },
            {
              "kind" : "struct",
              "name" : "authn_hash:simple"
            }
          ],
          "kind" : "union"
        },
        "name" : "password_hash_algorithm",
        "default" : {
          "oneliner" : true,
          "hocon" : "{name = sha256, salt_position = prefix}"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "认证方式。",
        "type" : {
          "kind" : "singleton",
          "name" : "password_based"
        },
        "name" : "mechanism"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "后端类型。",
        "type" : {
          "kind" : "singleton",
          "name" : "built_in_database"
        },
        "name" : "backend"
      },
      {
        "raw_default" : "username",
        "aliases" : [
          
        ],
        "desc" : "指定用于客户端身份 ID 认证的字段。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "clientid",
            "username"
          ]
        },
        "name" : "user_id_type",
        "default" : {
          "oneliner" : true,
          "hocon" : "username"
        }
      },
      {
        "raw_default" : "${EMQX_ETC_DIR}/auth-built-in-db-bootstrap.csv",
        "aliases" : [
          
        ],
        "desc" : "The bootstrap file imports users into the built-in database.\nIt will not import a user ID that already exists in the database.\nThe file content format is determined by `bootstrap_type`.",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "bootstrap_file",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"${EMQX_ETC_DIR}/auth-built-in-db-bootstrap.csv\""
        }
      },
      {
        "raw_default" : "plain",
        "aliases" : [
          
        ],
        "desc" : "Specify which type of content the bootstrap file has.\n\n- **`plain`**:\n  - Expected data fields: `user_id`, `password`, `is_superuser`\n  - `user_id`: Can be Client ID or username, depending on built-in database authentication's `user_id_type` config.\n  - `password`: User's plaintext password.\n  - `is_superuser`: Boolean, user's administrative status.\n\n- **`hash`**:\n  - Expected data fields: `user_id`,`password_hash`,`salt`,`is_superuser`\n  - Definitions similar to `plain` type, with `password_hash` and `salt` added for security.\n\nThe content can be either in CSV, or JSON format.\n\nHere is a CSV example: `user_id,password_hash,salt,is_superuser\\nmy_user,b6c743545a7817ae8c8f624371d5f5f0373234bb0ff36b8ffbf19bce0e06ab75,de1024f462fb83910fd13151bd4bd235,true`\n\nAnd JSON content should be decoded into an array of objects, for example: `[{\"user_id\": \"my_user\",\"password\": \"s3cr3tp@ssw0rd\",\"is_superuser\": true}]`.\n\nThe hash string for `password_hash` depends on how `password_hash_algorithm` is configured for the built-in database authentication mechanism. For example, if it's configured as `password_hash_algorithm {name = sha256, salt_position = suffix}`, then the salt is appended to the password before hashed. Here is the equivalent Python expression: `hashlib.sha256(password + salt).hexdigest()`.",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "hash",
            "plain"
          ]
        },
        "name" : "bootstrap_type",
        "default" : {
          "oneliner" : true,
          "hocon" : "plain"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "authentication.$INDEX"
    ],
    "full_name" : "authn:mongo_rs",
    "desc" : "使用 MongoDB (Replica Set) 作为认证数据源的认证器的配置项。",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "认证方式。",
        "type" : {
          "kind" : "singleton",
          "name" : "password_based"
        },
        "name" : "mechanism"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "后端类型。",
        "type" : {
          "kind" : "singleton",
          "name" : "mongodb"
        },
        "name" : "backend"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "存储认证数据的集合。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "collection"
      },
      {
        "raw_default" : {
          
        },
        "aliases" : [
          
        ],
        "desc" : "在查询中定义过滤条件的条件表达式。\n过滤器支持如下占位符：\n- <code>${username}</code>: 将在运行时被替换为客户端连接时使用的用户名\n- <code>${clientid}</code>: 将在运行时被替换为客户端连接时使用的客户端 ID",
        "type" : {
          "kind" : "primitive",
          "name" : "map()"
        },
        "name" : "filter",
        "default" : {
          "oneliner" : true,
          "hocon" : "{}"
        }
      },
      {
        "raw_default" : "password_hash",
        "aliases" : [
          
        ],
        "desc" : "存储密码散列值字段。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "password_hash_field",
        "default" : {
          "oneliner" : true,
          "hocon" : "password_hash"
        }
      },
      {
        "raw_default" : "salt",
        "aliases" : [
          
        ],
        "desc" : "用于存储盐值的字段。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "salt_field",
        "default" : {
          "oneliner" : true,
          "hocon" : "salt"
        }
      },
      {
        "raw_default" : "is_superuser",
        "aliases" : [
          
        ],
        "desc" : "定义用户是否具有超级用户权限的字段。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "is_superuser_field",
        "default" : {
          "oneliner" : true,
          "hocon" : "is_superuser"
        }
      },
      {
        "raw_default" : {
          "salt_position" : "prefix",
          "name" : "sha256"
        },
        "aliases" : [
          
        ],
        "desc" : "Options for password hash verification.",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "struct",
              "name" : "authn_hash:bcrypt"
            },
            {
              "kind" : "struct",
              "name" : "authn_hash:pbkdf2"
            },
            {
              "kind" : "struct",
              "name" : "authn_hash:simple"
            }
          ],
          "kind" : "union"
        },
        "name" : "password_hash_algorithm",
        "default" : {
          "oneliner" : true,
          "hocon" : "{name = sha256, salt_position = prefix}"
        }
      },
      {
        "raw_default" : "rs",
        "aliases" : [
          
        ],
        "desc" : "副本集。当MongoDB服务器以`副本集`模式运行时，必须设置为`rs`。",
        "type" : {
          "kind" : "singleton",
          "name" : "rs"
        },
        "name" : "mongo_type",
        "default" : {
          "oneliner" : true,
          "hocon" : "rs"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "集群连接的节点列表。节点应使用逗号分隔，例如：节点[,节点]。\n对于每个节点，应该是要连接的 IPv4 或 IPv6 地址或主机名。\n主机条目具有以下形式：主机[:端口]。\n如果未指定[:端口]，则使用 MongoDB 的默认端口27017。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "servers"
      },
      {
        "raw_default" : "unsafe",
        "aliases" : [
          
        ],
        "desc" : "写入模式",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "unsafe",
            "safe"
          ]
        },
        "name" : "w_mode",
        "default" : {
          "oneliner" : true,
          "hocon" : "unsafe"
        }
      },
      {
        "raw_default" : "master",
        "aliases" : [
          
        ],
        "desc" : "读取模式。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "master",
            "slave_ok"
          ]
        },
        "name" : "r_mode",
        "default" : {
          "oneliner" : true,
          "hocon" : "master"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "副本集的名称。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "replica_set_name"
      },
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "使用 DNS SRV 记录。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "srv_record",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "raw_default" : 8,
        "aliases" : [
          
        ],
        "desc" : "桥接远端服务时使用的连接池大小。",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "pool_size",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "内部数据库的用户名。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "username"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "内部数据库密码。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema_secret:secret()"
        },
        "name" : "password"
      },
      {
        "raw_default" : "auto",
        "aliases" : [
          
        ],
        "desc" : "是否使用 MongoDB 的传统协议与数据库通信。默认情况下，将尝试自动确定是否支持较新的协议。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "auto",
            "true",
            "false"
          ]
        },
        "name" : "use_legacy_protocol",
        "default" : {
          "oneliner" : true,
          "hocon" : "auto"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "与用户认证信息关联的数据库名称。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "auth_source"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "数据库名字。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "database"
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "mongo:topology"
        },
        "name" : "topology"
      },
      {
        "raw_default" : {
          "enable" : false
        },
        "aliases" : [
          
        ],
        "desc" : "启用 SSL 连接。",
        "type" : {
          "kind" : "struct",
          "name" : "emqx:ssl_client_opts"
        },
        "name" : "ssl",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "authentication.$INDEX"
    ],
    "full_name" : "authn:mongo_sharded",
    "desc" : "使用 MongoDB (Sharded Cluster) 作为认证数据源的认证器的配置项。",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "认证方式。",
        "type" : {
          "kind" : "singleton",
          "name" : "password_based"
        },
        "name" : "mechanism"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "后端类型。",
        "type" : {
          "kind" : "singleton",
          "name" : "mongodb"
        },
        "name" : "backend"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "存储认证数据的集合。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "collection"
      },
      {
        "raw_default" : {
          
        },
        "aliases" : [
          
        ],
        "desc" : "在查询中定义过滤条件的条件表达式。\n过滤器支持如下占位符：\n- <code>${username}</code>: 将在运行时被替换为客户端连接时使用的用户名\n- <code>${clientid}</code>: 将在运行时被替换为客户端连接时使用的客户端 ID",
        "type" : {
          "kind" : "primitive",
          "name" : "map()"
        },
        "name" : "filter",
        "default" : {
          "oneliner" : true,
          "hocon" : "{}"
        }
      },
      {
        "raw_default" : "password_hash",
        "aliases" : [
          
        ],
        "desc" : "存储密码散列值字段。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "password_hash_field",
        "default" : {
          "oneliner" : true,
          "hocon" : "password_hash"
        }
      },
      {
        "raw_default" : "salt",
        "aliases" : [
          
        ],
        "desc" : "用于存储盐值的字段。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "salt_field",
        "default" : {
          "oneliner" : true,
          "hocon" : "salt"
        }
      },
      {
        "raw_default" : "is_superuser",
        "aliases" : [
          
        ],
        "desc" : "定义用户是否具有超级用户权限的字段。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "is_superuser_field",
        "default" : {
          "oneliner" : true,
          "hocon" : "is_superuser"
        }
      },
      {
        "raw_default" : {
          "salt_position" : "prefix",
          "name" : "sha256"
        },
        "aliases" : [
          
        ],
        "desc" : "Options for password hash verification.",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "struct",
              "name" : "authn_hash:bcrypt"
            },
            {
              "kind" : "struct",
              "name" : "authn_hash:pbkdf2"
            },
            {
              "kind" : "struct",
              "name" : "authn_hash:simple"
            }
          ],
          "kind" : "union"
        },
        "name" : "password_hash_algorithm",
        "default" : {
          "oneliner" : true,
          "hocon" : "{name = sha256, salt_position = prefix}"
        }
      },
      {
        "raw_default" : "sharded",
        "aliases" : [
          
        ],
        "desc" : "分片集群。当 MongoDB 服务器以`分片`模式运行时，必须设置为`sharded`。",
        "type" : {
          "kind" : "singleton",
          "name" : "sharded"
        },
        "name" : "mongo_type",
        "default" : {
          "oneliner" : true,
          "hocon" : "sharded"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "集群连接的节点列表。节点应使用逗号分隔，例如：节点[,节点]。\n对于每个节点，应该是要连接的 IPv4 或 IPv6 地址或主机名。\n主机条目具有以下形式：主机[:端口]。\n如果未指定[:端口]，则使用 MongoDB 的默认端口27017。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "servers"
      },
      {
        "raw_default" : "unsafe",
        "aliases" : [
          
        ],
        "desc" : "写入模式",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "unsafe",
            "safe"
          ]
        },
        "name" : "w_mode",
        "default" : {
          "oneliner" : true,
          "hocon" : "unsafe"
        }
      },
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "使用 DNS SRV 记录。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "srv_record",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "raw_default" : 8,
        "aliases" : [
          
        ],
        "desc" : "桥接远端服务时使用的连接池大小。",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "pool_size",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "内部数据库的用户名。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "username"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "内部数据库密码。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema_secret:secret()"
        },
        "name" : "password"
      },
      {
        "raw_default" : "auto",
        "aliases" : [
          
        ],
        "desc" : "是否使用 MongoDB 的传统协议与数据库通信。默认情况下，将尝试自动确定是否支持较新的协议。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "auto",
            "true",
            "false"
          ]
        },
        "name" : "use_legacy_protocol",
        "default" : {
          "oneliner" : true,
          "hocon" : "auto"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "与用户认证信息关联的数据库名称。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "auth_source"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "数据库名字。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "database"
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "mongo:topology"
        },
        "name" : "topology"
      },
      {
        "raw_default" : {
          "enable" : false
        },
        "aliases" : [
          
        ],
        "desc" : "启用 SSL 连接。",
        "type" : {
          "kind" : "struct",
          "name" : "emqx:ssl_client_opts"
        },
        "name" : "ssl",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "authentication.$INDEX"
    ],
    "full_name" : "authn:mongo_single",
    "desc" : "使用 MongoDB (Standalone) 作为认证数据源的认证器的配置项。",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "认证方式。",
        "type" : {
          "kind" : "singleton",
          "name" : "password_based"
        },
        "name" : "mechanism"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "后端类型。",
        "type" : {
          "kind" : "singleton",
          "name" : "mongodb"
        },
        "name" : "backend"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "存储认证数据的集合。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "collection"
      },
      {
        "raw_default" : {
          
        },
        "aliases" : [
          
        ],
        "desc" : "在查询中定义过滤条件的条件表达式。\n过滤器支持如下占位符：\n- <code>${username}</code>: 将在运行时被替换为客户端连接时使用的用户名\n- <code>${clientid}</code>: 将在运行时被替换为客户端连接时使用的客户端 ID",
        "type" : {
          "kind" : "primitive",
          "name" : "map()"
        },
        "name" : "filter",
        "default" : {
          "oneliner" : true,
          "hocon" : "{}"
        }
      },
      {
        "raw_default" : "password_hash",
        "aliases" : [
          
        ],
        "desc" : "存储密码散列值字段。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "password_hash_field",
        "default" : {
          "oneliner" : true,
          "hocon" : "password_hash"
        }
      },
      {
        "raw_default" : "salt",
        "aliases" : [
          
        ],
        "desc" : "用于存储盐值的字段。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "salt_field",
        "default" : {
          "oneliner" : true,
          "hocon" : "salt"
        }
      },
      {
        "raw_default" : "is_superuser",
        "aliases" : [
          
        ],
        "desc" : "定义用户是否具有超级用户权限的字段。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "is_superuser_field",
        "default" : {
          "oneliner" : true,
          "hocon" : "is_superuser"
        }
      },
      {
        "raw_default" : {
          "salt_position" : "prefix",
          "name" : "sha256"
        },
        "aliases" : [
          
        ],
        "desc" : "Options for password hash verification.",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "struct",
              "name" : "authn_hash:bcrypt"
            },
            {
              "kind" : "struct",
              "name" : "authn_hash:pbkdf2"
            },
            {
              "kind" : "struct",
              "name" : "authn_hash:simple"
            }
          ],
          "kind" : "union"
        },
        "name" : "password_hash_algorithm",
        "default" : {
          "oneliner" : true,
          "hocon" : "{name = sha256, salt_position = prefix}"
        }
      },
      {
        "raw_default" : "single",
        "aliases" : [
          
        ],
        "desc" : "独立实例。当MongoDB服务器以独立模式运行时，必须设置为`single`。",
        "type" : {
          "kind" : "singleton",
          "name" : "single"
        },
        "name" : "mongo_type",
        "default" : {
          "oneliner" : true,
          "hocon" : "single"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "要连接的 IPv4 或 IPv6 地址或主机名。<br/>主机条目具有以下形式：主机[:端口]。<br/>如果未指定[:端口]，则使用MongoDB的默认端口27017。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "server"
      },
      {
        "raw_default" : "unsafe",
        "aliases" : [
          
        ],
        "desc" : "写入模式",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "unsafe",
            "safe"
          ]
        },
        "name" : "w_mode",
        "default" : {
          "oneliner" : true,
          "hocon" : "unsafe"
        }
      },
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "使用 DNS SRV 记录。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "srv_record",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "raw_default" : 8,
        "aliases" : [
          
        ],
        "desc" : "桥接远端服务时使用的连接池大小。",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "pool_size",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "内部数据库的用户名。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "username"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "内部数据库密码。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema_secret:secret()"
        },
        "name" : "password"
      },
      {
        "raw_default" : "auto",
        "aliases" : [
          
        ],
        "desc" : "是否使用 MongoDB 的传统协议与数据库通信。默认情况下，将尝试自动确定是否支持较新的协议。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "auto",
            "true",
            "false"
          ]
        },
        "name" : "use_legacy_protocol",
        "default" : {
          "oneliner" : true,
          "hocon" : "auto"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "与用户认证信息关联的数据库名称。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "auth_source"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "数据库名字。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "database"
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "mongo:topology"
        },
        "name" : "topology"
      },
      {
        "raw_default" : {
          "enable" : false
        },
        "aliases" : [
          
        ],
        "desc" : "启用 SSL 连接。",
        "type" : {
          "kind" : "struct",
          "name" : "emqx:ssl_client_opts"
        },
        "name" : "ssl",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "authentication.$INDEX"
    ],
    "full_name" : "authn:mysql",
    "desc" : "使用 MySQL 作为认证数据源的认证器的配置项。",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "认证方式。",
        "type" : {
          "kind" : "singleton",
          "name" : "password_based"
        },
        "name" : "mechanism"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "后端类型。",
        "type" : {
          "kind" : "singleton",
          "name" : "mysql"
        },
        "name" : "backend"
      },
      {
        "raw_default" : {
          "salt_position" : "prefix",
          "name" : "sha256"
        },
        "aliases" : [
          
        ],
        "desc" : "Options for password hash verification.",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "struct",
              "name" : "authn_hash:bcrypt"
            },
            {
              "kind" : "struct",
              "name" : "authn_hash:pbkdf2"
            },
            {
              "kind" : "struct",
              "name" : "authn_hash:simple"
            }
          ],
          "kind" : "union"
        },
        "name" : "password_hash_algorithm",
        "default" : {
          "oneliner" : true,
          "hocon" : "{name = sha256, salt_position = prefix}"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "用于查询密码散列等用于认证的数据的 SQL 语句。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "query"
      },
      {
        "raw_default" : "5s",
        "aliases" : [
          
        ],
        "desc" : "SQL 查询的超时时间。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:duration_ms()"
        },
        "name" : "query_timeout",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"5s\""
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "用于连接的 IPv4 或 IPv6 地址或主机名。<br/>\n主机条目的格式如下：主机[:端口]。<br/>\n如果未指定[:端口]，将使用 MySQL 的默认端口3306。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "server"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "数据库名字。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "database"
      },
      {
        "raw_default" : 8,
        "aliases" : [
          
        ],
        "desc" : "桥接远端服务时使用的连接池大小。",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "pool_size",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        }
      },
      {
        "raw_default" : "root",
        "aliases" : [
          
        ],
        "desc" : "内部数据库的用户名。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "username",
        "default" : {
          "oneliner" : true,
          "hocon" : "root"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "内部数据库密码。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema_secret:secret()"
        },
        "name" : "password"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "Deprecated since v5.0.15.",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "auto_reconnect"
      },
      {
        "raw_default" : {
          "enable" : false
        },
        "aliases" : [
          
        ],
        "desc" : "启用 SSL 连接。",
        "type" : {
          "kind" : "struct",
          "name" : "emqx:ssl_client_opts"
        },
        "name" : "ssl",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "authentication.$INDEX"
    ],
    "full_name" : "authn:postgresql",
    "desc" : "使用 PostgreSQL 作为认证数据源的认证器的配置项。",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "认证方式。",
        "type" : {
          "kind" : "singleton",
          "name" : "password_based"
        },
        "name" : "mechanism"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "后端类型。",
        "type" : {
          "kind" : "singleton",
          "name" : "postgresql"
        },
        "name" : "backend"
      },
      {
        "raw_default" : {
          "salt_position" : "prefix",
          "name" : "sha256"
        },
        "aliases" : [
          
        ],
        "desc" : "Options for password hash verification.",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "struct",
              "name" : "authn_hash:bcrypt"
            },
            {
              "kind" : "struct",
              "name" : "authn_hash:pbkdf2"
            },
            {
              "kind" : "struct",
              "name" : "authn_hash:simple"
            }
          ],
          "kind" : "union"
        },
        "name" : "password_hash_algorithm",
        "default" : {
          "oneliner" : true,
          "hocon" : "{name = sha256, salt_position = prefix}"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "用于查询密码散列等用于认证的数据的 SQL 语句。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "query"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "要连接的 IPv4 或 IPv6 地址或主机名。<br/>\n一个主机条目的格式为：Host[:Port]。<br/>\n如果没有指定 [:Port]，将使用 PostgreSQL 默认端口 5432。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "server"
      },
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "在连接中禁用预处理语句的使用。\n某些端点，如 PGBouncer 或 Transaction 模式下的 Supabase，\n不支持像处理语句这样的会话功能。 \n 对于此类连接，应启用此选项。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "disable_prepared_statements",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "数据库名字。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "database"
      },
      {
        "raw_default" : 8,
        "aliases" : [
          
        ],
        "desc" : "桥接远端服务时使用的连接池大小。",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "pool_size",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "内部数据库的用户名。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "username"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "内部数据库密码。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema_secret:secret()"
        },
        "name" : "password"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "Deprecated since v5.0.15.",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "auto_reconnect"
      },
      {
        "raw_default" : {
          "enable" : false
        },
        "aliases" : [
          
        ],
        "desc" : "启用 SSL 连接。",
        "type" : {
          "kind" : "struct",
          "name" : "emqx:ssl_client_opts"
        },
        "name" : "ssl",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "authentication.$INDEX"
    ],
    "full_name" : "authn:redis_cluster",
    "desc" : "使用 Redis (Cluster) 作为认证数据源的认证器的配置项。",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "认证方式。",
        "type" : {
          "kind" : "singleton",
          "name" : "password_based"
        },
        "name" : "mechanism"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "后端类型。",
        "type" : {
          "kind" : "singleton",
          "name" : "redis"
        },
        "name" : "backend"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "用于查询密码散列等用于认证的数据的 Redis 命令，目前仅支持 <code>HGET</code> 与 <code>HMGET</code>。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "cmd"
      },
      {
        "raw_default" : {
          "salt_position" : "prefix",
          "name" : "sha256"
        },
        "aliases" : [
          
        ],
        "desc" : "Options for password hash verification.",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "struct",
              "name" : "authn_hash:bcrypt"
            },
            {
              "kind" : "struct",
              "name" : "authn_hash:pbkdf2"
            },
            {
              "kind" : "struct",
              "name" : "authn_hash:simple"
            }
          ],
          "kind" : "union"
        },
        "name" : "password_hash_algorithm",
        "default" : {
          "oneliner" : true,
          "hocon" : "{name = sha256, salt_position = prefix}"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "集群将要连接的节点列表。 节点之间用逗号分隔，如：Node[,Node]。每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。主机名具有以下形式：Host[:Port]。如果未指定 [:Port]，则使用 Redis 默认端口 6379。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "servers"
      },
      {
        "raw_default" : "cluster",
        "aliases" : [
          
        ],
        "desc" : "Cluster 模式。当 Redis 服务器在集群模式下运行时必须设置为'cluster'。",
        "type" : {
          "kind" : "singleton",
          "name" : "cluster"
        },
        "name" : "redis_type",
        "default" : {
          "oneliner" : true,
          "hocon" : "cluster"
        }
      },
      {
        "raw_default" : 8,
        "aliases" : [
          
        ],
        "desc" : "桥接远端服务时使用的连接池大小。",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "pool_size",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "内部数据库的用户名。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "username"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "内部数据库密码。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema_secret:secret()"
        },
        "name" : "password"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "Deprecated since v5.0.15.",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "auto_reconnect"
      },
      {
        "raw_default" : {
          "enable" : false
        },
        "aliases" : [
          
        ],
        "desc" : "启用 SSL 连接。",
        "type" : {
          "kind" : "struct",
          "name" : "emqx:ssl_client_opts"
        },
        "name" : "ssl",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "authentication.$INDEX"
    ],
    "full_name" : "authn:redis_sentinel",
    "desc" : "使用 Redis (Sentinel) 作为认证数据源的认证器的配置项。",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "认证方式。",
        "type" : {
          "kind" : "singleton",
          "name" : "password_based"
        },
        "name" : "mechanism"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "后端类型。",
        "type" : {
          "kind" : "singleton",
          "name" : "redis"
        },
        "name" : "backend"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "用于查询密码散列等用于认证的数据的 Redis 命令，目前仅支持 <code>HGET</code> 与 <code>HMGET</code>。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "cmd"
      },
      {
        "raw_default" : {
          "salt_position" : "prefix",
          "name" : "sha256"
        },
        "aliases" : [
          
        ],
        "desc" : "Options for password hash verification.",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "struct",
              "name" : "authn_hash:bcrypt"
            },
            {
              "kind" : "struct",
              "name" : "authn_hash:pbkdf2"
            },
            {
              "kind" : "struct",
              "name" : "authn_hash:simple"
            }
          ],
          "kind" : "union"
        },
        "name" : "password_hash_algorithm",
        "default" : {
          "oneliner" : true,
          "hocon" : "{name = sha256, salt_position = prefix}"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "集群将要连接的节点列表。 节点之间用逗号分隔，如：Node[,Node]。每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。主机名具有以下形式：Host[:Port]。如果未指定 [:Port]，则使用 Redis 默认端口 6379。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "servers"
      },
      {
        "raw_default" : "sentinel",
        "aliases" : [
          
        ],
        "desc" : "Sentinel 模式。 当 Redis 服务器在 Senitel 模式下运行时必须设置为 'sentinel' 。",
        "type" : {
          "kind" : "singleton",
          "name" : "sentinel"
        },
        "name" : "redis_type",
        "default" : {
          "oneliner" : true,
          "hocon" : "sentinel"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "Redis sentinel 模式下的集群名称。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "sentinel"
      },
      {
        "raw_default" : 8,
        "aliases" : [
          
        ],
        "desc" : "桥接远端服务时使用的连接池大小。",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "pool_size",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "内部数据库的用户名。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "username"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "内部数据库密码。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema_secret:secret()"
        },
        "name" : "password"
      },
      {
        "raw_default" : 0,
        "aliases" : [
          
        ],
        "desc" : "Redis 数据库 ID。",
        "type" : {
          "kind" : "primitive",
          "name" : "non_neg_integer()"
        },
        "name" : "database",
        "default" : {
          "oneliner" : true,
          "hocon" : "0"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "Deprecated since v5.0.15.",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "auto_reconnect"
      },
      {
        "raw_default" : {
          "enable" : false
        },
        "aliases" : [
          
        ],
        "desc" : "启用 SSL 连接。",
        "type" : {
          "kind" : "struct",
          "name" : "emqx:ssl_client_opts"
        },
        "name" : "ssl",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "authentication.$INDEX"
    ],
    "full_name" : "authn:redis_single",
    "desc" : "使用 Redis (Standalone) 作为认证数据源的认证器的配置项。",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "认证方式。",
        "type" : {
          "kind" : "singleton",
          "name" : "password_based"
        },
        "name" : "mechanism"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "后端类型。",
        "type" : {
          "kind" : "singleton",
          "name" : "redis"
        },
        "name" : "backend"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "用于查询密码散列等用于认证的数据的 Redis 命令，目前仅支持 <code>HGET</code> 与 <code>HMGET</code>。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "cmd"
      },
      {
        "raw_default" : {
          "salt_position" : "prefix",
          "name" : "sha256"
        },
        "aliases" : [
          
        ],
        "desc" : "Options for password hash verification.",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "struct",
              "name" : "authn_hash:bcrypt"
            },
            {
              "kind" : "struct",
              "name" : "authn_hash:pbkdf2"
            },
            {
              "kind" : "struct",
              "name" : "authn_hash:simple"
            }
          ],
          "kind" : "union"
        },
        "name" : "password_hash_algorithm",
        "default" : {
          "oneliner" : true,
          "hocon" : "{name = sha256, salt_position = prefix}"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "将要连接的 IPv4 或 IPv6 地址，或者主机名。主机名具有以下形式：Host[:Port]。如果未指定 [:Port]，则使用 Redis 默认端口 6379。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "server"
      },
      {
        "raw_default" : "single",
        "aliases" : [
          
        ],
        "desc" : "Single 模式。 当 Redis 服务器在 Single 模式下运行时必须设置为 'single' 。",
        "type" : {
          "kind" : "singleton",
          "name" : "single"
        },
        "name" : "redis_type",
        "default" : {
          "oneliner" : true,
          "hocon" : "single"
        }
      },
      {
        "raw_default" : 8,
        "aliases" : [
          
        ],
        "desc" : "桥接远端服务时使用的连接池大小。",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "pool_size",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "内部数据库的用户名。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "username"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "内部数据库密码。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema_secret:secret()"
        },
        "name" : "password"
      },
      {
        "raw_default" : 0,
        "aliases" : [
          
        ],
        "desc" : "Redis 数据库 ID。",
        "type" : {
          "kind" : "primitive",
          "name" : "non_neg_integer()"
        },
        "name" : "database",
        "default" : {
          "oneliner" : true,
          "hocon" : "0"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "Deprecated since v5.0.15.",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "auto_reconnect"
      },
      {
        "raw_default" : {
          "enable" : false
        },
        "aliases" : [
          
        ],
        "desc" : "启用 SSL 连接。",
        "type" : {
          "kind" : "struct",
          "name" : "emqx:ssl_client_opts"
        },
        "name" : "ssl",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "authentication.$INDEX"
    ],
    "full_name" : "authn:scram",
    "desc" : "Settings for Salted Challenge Response Authentication Mechanism\n(SCRAM) authentication.",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "认证方式。",
        "type" : {
          "kind" : "singleton",
          "name" : "scram"
        },
        "name" : "mechanism"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "后端类型。",
        "type" : {
          "kind" : "singleton",
          "name" : "built_in_database"
        },
        "name" : "backend"
      },
      {
        "raw_default" : "sha256",
        "aliases" : [
          
        ],
        "desc" : "Hashing algorithm.",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "sha256",
            "sha512"
          ]
        },
        "name" : "algorithm",
        "default" : {
          "oneliner" : true,
          "hocon" : "sha256"
        }
      },
      {
        "raw_default" : 4096,
        "aliases" : [
          
        ],
        "desc" : "Iteration count.",
        "type" : {
          "kind" : "primitive",
          "name" : "non_neg_integer()"
        },
        "name" : "iteration_count",
        "default" : {
          "oneliner" : true,
          "hocon" : "4096"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "authentication.$INDEX.password_hash_algorithm"
    ],
    "full_name" : "authn_hash:bcrypt",
    "desc" : "Settings for bcrypt password hashing algorithm.",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "BCRYPT password hashing.",
        "type" : {
          "kind" : "singleton",
          "name" : "bcrypt"
        },
        "name" : "name"
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "authentication.$INDEX.password_hash_algorithm"
    ],
    "full_name" : "authn_hash:bcrypt_rw",
    "desc" : "Settings for bcrypt password hashing algorithm (for DB backends with write capability).",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "BCRYPT password hashing.",
        "type" : {
          "kind" : "singleton",
          "name" : "bcrypt"
        },
        "name" : "name"
      },
      {
        "raw_default" : 10,
        "examples" : [
          10
        ],
        "aliases" : [
          
        ],
        "desc" : "Work factor for BCRYPT password generation.",
        "type" : {
          "kind" : "primitive",
          "name" : "5..10"
        },
        "name" : "salt_rounds",
        "default" : {
          "oneliner" : true,
          "hocon" : "10"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "authentication.$INDEX.password_hash_algorithm"
    ],
    "full_name" : "authn_hash:pbkdf2",
    "desc" : "Settings for PBKDF2 password hashing algorithm.",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "PBKDF2 password hashing.",
        "type" : {
          "kind" : "singleton",
          "name" : "pbkdf2"
        },
        "name" : "name"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "Specifies mac_fun for PBKDF2 hashing algorithm.",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "md4",
            "md5",
            "ripemd160",
            "sha",
            "sha224",
            "sha256",
            "sha384",
            "sha512"
          ]
        },
        "name" : "mac_fun"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "Iteration count for PBKDF2 hashing algorithm.",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "iterations"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "Derived length for PBKDF2 hashing algorithm. If not specified, calculated automatically based on `mac_fun`.",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "dk_length"
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "authentication.$INDEX.password_hash_algorithm"
    ],
    "full_name" : "authn_hash:simple",
    "desc" : "Settings for simple algorithms.",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "Simple password hashing algorithm.",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "plain",
            "md5",
            "sha",
            "sha256",
            "sha512"
          ]
        },
        "name" : "name"
      },
      {
        "raw_default" : "prefix",
        "aliases" : [
          
        ],
        "desc" : "Salt position for PLAIN, MD5, SHA, SHA256 and SHA512 algorithms.",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "disable",
            "prefix",
            "suffix"
          ]
        },
        "name" : "salt_position",
        "default" : {
          "oneliner" : true,
          "hocon" : "prefix"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "authorization.sources.$INDEX"
    ],
    "full_name" : "authz:file",
    "desc" : "使用 ACL 文件授权。",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "数据后端类型",
        "type" : {
          "kind" : "singleton",
          "name" : "file"
        },
        "name" : "type"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "包含 ACL 规则的文件路径。\n如果该文件在启动 EMQX 节点之前已经配置好，\n只要 EMQX 有读取权限，它可以放置在任何位置。\n即，EMQX 将把它视为只读。\n\n如果规则集是从 EMQX Dashboard 或 HTTP API 创建或更新的，\n将创建一个新文件并放置在 EMQX 的 data_dir 中的 authz 子目录下，\n旧文件将不再使用。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "path"
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "authorization.sources.$INDEX"
    ],
    "full_name" : "authz:http_get",
    "desc" : "使用外部 HTTP 服务器授权(GET 请求)。",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "数据后端类型",
        "type" : {
          "kind" : "singleton",
          "name" : "http"
        },
        "name" : "type"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "认证服务器地址",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "url"
      },
      {
        "raw_default" : "30s",
        "aliases" : [
          
        ],
        "desc" : "HTTP 请求超时。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "request_timeout",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"30s\""
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "HTTP 请求体",
        "type" : {
          "kind" : "map",
          "values" : {
            "kind" : "primitive",
            "name" : "binary()"
          },
          "name" : "name"
        },
        "name" : "body"
      },
      {
        "raw_default" : "15s",
        "aliases" : [
          
        ],
        "desc" : "连接到 HTTP 服务器的超时时间。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:timeout_duration_ms()"
        },
        "name" : "connect_timeout",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15s\""
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "Deprecated since 5.0.4.",
        "type" : {
          "kind" : "primitive",
          "name" : "non_neg_integer()"
        },
        "name" : "max_retries"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "Deprecated since 5.0.4.",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:timeout_duration()"
        },
        "name" : "retry_interval"
      },
      {
        "raw_default" : 8,
        "aliases" : [
          
        ],
        "desc" : "连接池大小。",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "pool_size",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        }
      },
      {
        "raw_default" : 100,
        "aliases" : [
          
        ],
        "desc" : "一个正整数。是否连续发送 HTTP 请求，当设置为1时，意味着在发送每个 HTTP 请求后，需要等待服务器返回，然后继续发送下一个请求。",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "enable_pipelining",
        "default" : {
          "oneliner" : true,
          "hocon" : "100"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "配置 HTTP 请求参数。",
        "type" : {
          "kind" : "struct",
          "name" : "connector_http:request"
        },
        "name" : "request"
      },
      {
        "raw_default" : {
          "enable" : false
        },
        "aliases" : [
          
        ],
        "desc" : "启用 SSL 连接。",
        "type" : {
          "kind" : "struct",
          "name" : "emqx:ssl_client_opts"
        },
        "name" : "ssl",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "HTTP 请求方法",
        "type" : {
          "kind" : "singleton",
          "name" : "get"
        },
        "name" : "method"
      },
      {
        "raw_default" : {
          "keep-alive" : "timeout=30, max=1000",
          "connection" : "keep-alive",
          "cache-control" : "no-cache",
          "accept" : "application/json"
        },
        "aliases" : [
          
        ],
        "desc" : "HTTP Headers 列表 (无 <code>content-type</code>) 。",
        "type" : {
          "kind" : "primitive",
          "name" : "map()"
        },
        "name" : "headers",
        "default" : {
          "oneliner" : true,
          "hocon" : "{accept = \"application/json\", cache-control = \"no-cache\", connection = \"keep-alive\", keep-alive = \"timeout=30, max=1000\"}"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "authorization.sources.$INDEX"
    ],
    "full_name" : "authz:http_post",
    "desc" : "使用外部 HTTP 服务器授权(POST 请求)。",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "数据后端类型",
        "type" : {
          "kind" : "singleton",
          "name" : "http"
        },
        "name" : "type"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "认证服务器地址",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "url"
      },
      {
        "raw_default" : "30s",
        "aliases" : [
          
        ],
        "desc" : "HTTP 请求超时。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "request_timeout",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"30s\""
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "HTTP 请求体",
        "type" : {
          "kind" : "map",
          "values" : {
            "kind" : "primitive",
            "name" : "binary()"
          },
          "name" : "name"
        },
        "name" : "body"
      },
      {
        "raw_default" : "15s",
        "aliases" : [
          
        ],
        "desc" : "连接到 HTTP 服务器的超时时间。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:timeout_duration_ms()"
        },
        "name" : "connect_timeout",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15s\""
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "Deprecated since 5.0.4.",
        "type" : {
          "kind" : "primitive",
          "name" : "non_neg_integer()"
        },
        "name" : "max_retries"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "Deprecated since 5.0.4.",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:timeout_duration()"
        },
        "name" : "retry_interval"
      },
      {
        "raw_default" : 8,
        "aliases" : [
          
        ],
        "desc" : "连接池大小。",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "pool_size",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        }
      },
      {
        "raw_default" : 100,
        "aliases" : [
          
        ],
        "desc" : "一个正整数。是否连续发送 HTTP 请求，当设置为1时，意味着在发送每个 HTTP 请求后，需要等待服务器返回，然后继续发送下一个请求。",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "enable_pipelining",
        "default" : {
          "oneliner" : true,
          "hocon" : "100"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "配置 HTTP 请求参数。",
        "type" : {
          "kind" : "struct",
          "name" : "connector_http:request"
        },
        "name" : "request"
      },
      {
        "raw_default" : {
          "enable" : false
        },
        "aliases" : [
          
        ],
        "desc" : "启用 SSL 连接。",
        "type" : {
          "kind" : "struct",
          "name" : "emqx:ssl_client_opts"
        },
        "name" : "ssl",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "HTTP 请求方法",
        "type" : {
          "kind" : "singleton",
          "name" : "post"
        },
        "name" : "method"
      },
      {
        "raw_default" : {
          "keep-alive" : "timeout=30, max=1000",
          "content-type" : "application/json",
          "connection" : "keep-alive",
          "cache-control" : "no-cache",
          "accept" : "application/json"
        },
        "aliases" : [
          
        ],
        "desc" : "HTTP Headers 列表",
        "type" : {
          "kind" : "primitive",
          "name" : "map()"
        },
        "name" : "headers",
        "default" : {
          "oneliner" : true,
          "hocon" : "{accept = \"application/json\", cache-control = \"no-cache\", connection = \"keep-alive\", content-type = \"application/json\", keep-alive = \"timeout=30, max=1000\"}"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "authorization.sources.$INDEX"
    ],
    "full_name" : "authz:ldap",
    "desc" : "AuthZ with LDAP",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "数据后端类型",
        "type" : {
          "kind" : "singleton",
          "name" : "ldap"
        },
        "name" : "type"
      },
      {
        "raw_default" : "mqttPublishTopic",
        "aliases" : [
          
        ],
        "desc" : "表示使用哪个属性来表示允许`发布`的主题列表。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "publish_attribute",
        "default" : {
          "oneliner" : true,
          "hocon" : "mqttPublishTopic"
        }
      },
      {
        "raw_default" : "mqttSubscriptionTopic",
        "aliases" : [
          
        ],
        "desc" : "表示使用哪个属性来表示允许`订阅`的主题列表。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "subscribe_attribute",
        "default" : {
          "oneliner" : true,
          "hocon" : "mqttSubscriptionTopic"
        }
      },
      {
        "raw_default" : "mqttPubSubTopic",
        "aliases" : [
          
        ],
        "desc" : "表示使用哪个属性来表示允许`发布`和`订阅`的主题列表。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "all_attribute",
        "default" : {
          "oneliner" : true,
          "hocon" : "mqttPubSubTopic"
        }
      },
      {
        "raw_default" : "5s",
        "aliases" : [
          
        ],
        "desc" : "LDAP 查询超时。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:timeout_duration_ms()"
        },
        "name" : "query_timeout",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"5s\""
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "要连接的 IPv4 或 IPv6 地址或主机名。<br/>\n主机名条目的格式为：`主机[:端口]`。<br/>\n如果 `[:端口]` 未指定， 将使用 LDAP 默认端口 389。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "server"
      },
      {
        "raw_default" : 8,
        "aliases" : [
          
        ],
        "desc" : "桥接远端服务时使用的连接池大小。",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "pool_size",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "内部数据库的用户名。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "username"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "内部数据库密码。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema_secret:secret()"
        },
        "name" : "password"
      },
      {
        "examples" : [
          "uid=${username},ou=testdevice,dc=emqx,dc=io"
        ],
        "aliases" : [
          
        ],
        "desc" : "与基本对象条目（或根）相关的名称。\n搜索用户的起点。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "base_dn"
      },
      {
        "raw_default" : "(objectClass=mqttUser)",
        "examples" : [
          "(& (objectClass=mqttUser) (uid=${username}))"
        ],
        "aliases" : [
          
        ],
        "desc" : "定义哪些条件必须被依次满足的过滤器\n用于搜索匹配一条给定的条目.<br>\n筛选器的语法遵循 RFC 4515，并且还支持占位符。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "filter",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"(objectClass=mqttUser)\""
        }
      },
      {
        "raw_default" : "10s",
        "aliases" : [
          
        ],
        "desc" : "设置每个单独请求所使用的最大时间（以毫秒为单位）。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:timeout_duration_ms()"
        },
        "name" : "request_timeout",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"10s\""
        }
      },
      {
        "raw_default" : {
          "enable" : false
        },
        "aliases" : [
          
        ],
        "desc" : "启用 SSL 连接。",
        "type" : {
          "kind" : "struct",
          "name" : "ldap:ssl"
        },
        "name" : "ssl",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "authorization.sources.$INDEX"
    ],
    "full_name" : "authz:builtin_db",
    "desc" : "使用内置数据库 (mnesia) 进行授权。",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "数据后端类型",
        "type" : {
          "kind" : "singleton",
          "name" : "built_in_database"
        },
        "name" : "type"
      },
      {
        "raw_default" : 100,
        "aliases" : [
          
        ],
        "desc" : "Maximum number of rules per client/user. Note that performance may decrease as number of rules increases.",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "max_rules",
        "default" : {
          "oneliner" : true,
          "hocon" : "100"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "authorization.sources.$INDEX"
    ],
    "full_name" : "authz:mongo_rs",
    "desc" : "使用 MongoDB 授权（副本集模式）",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "数据后端类型",
        "type" : {
          "kind" : "singleton",
          "name" : "mongodb"
        },
        "name" : "type"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "包含授权数据的 `MongoDB` 集合。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "collection"
      },
      {
        "raw_default" : {
          
        },
        "aliases" : [
          
        ],
        "desc" : "定义查询中过滤条件的条件表达式。\n过滤器支持以下占位符<br/>\n - <code>${username}</code>：在连接时将用客户端使用的 <code>用户名</code> 替换<br/>\n - <code>${clientid}</code>：在连接时将用客户端使用的 <code>客户端 ID</code> 替换",
        "type" : {
          "kind" : "primitive",
          "name" : "map()"
        },
        "name" : "filter",
        "default" : {
          "oneliner" : true,
          "hocon" : "{}"
        }
      },
      {
        "raw_default" : "rs",
        "aliases" : [
          
        ],
        "desc" : "副本集。当MongoDB服务器以`副本集`模式运行时，必须设置为`rs`。",
        "type" : {
          "kind" : "singleton",
          "name" : "rs"
        },
        "name" : "mongo_type",
        "default" : {
          "oneliner" : true,
          "hocon" : "rs"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "集群连接的节点列表。节点应使用逗号分隔，例如：节点[,节点]。\n对于每个节点，应该是要连接的 IPv4 或 IPv6 地址或主机名。\n主机条目具有以下形式：主机[:端口]。\n如果未指定[:端口]，则使用 MongoDB 的默认端口27017。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "servers"
      },
      {
        "raw_default" : "unsafe",
        "aliases" : [
          
        ],
        "desc" : "写入模式",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "unsafe",
            "safe"
          ]
        },
        "name" : "w_mode",
        "default" : {
          "oneliner" : true,
          "hocon" : "unsafe"
        }
      },
      {
        "raw_default" : "master",
        "aliases" : [
          
        ],
        "desc" : "读取模式。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "master",
            "slave_ok"
          ]
        },
        "name" : "r_mode",
        "default" : {
          "oneliner" : true,
          "hocon" : "master"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "副本集的名称。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "replica_set_name"
      },
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "使用 DNS SRV 记录。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "srv_record",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "raw_default" : 8,
        "aliases" : [
          
        ],
        "desc" : "桥接远端服务时使用的连接池大小。",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "pool_size",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "内部数据库的用户名。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "username"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "内部数据库密码。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema_secret:secret()"
        },
        "name" : "password"
      },
      {
        "raw_default" : "auto",
        "aliases" : [
          
        ],
        "desc" : "是否使用 MongoDB 的传统协议与数据库通信。默认情况下，将尝试自动确定是否支持较新的协议。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "auto",
            "true",
            "false"
          ]
        },
        "name" : "use_legacy_protocol",
        "default" : {
          "oneliner" : true,
          "hocon" : "auto"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "与用户认证信息关联的数据库名称。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "auth_source"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "数据库名字。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "database"
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "mongo:topology"
        },
        "name" : "topology"
      },
      {
        "raw_default" : {
          "enable" : false
        },
        "aliases" : [
          
        ],
        "desc" : "启用 SSL 连接。",
        "type" : {
          "kind" : "struct",
          "name" : "emqx:ssl_client_opts"
        },
        "name" : "ssl",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "authorization.sources.$INDEX"
    ],
    "full_name" : "authz:mongo_sharded",
    "desc" : "使用 MongoDB 授权（分片集群模式）。",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "数据后端类型",
        "type" : {
          "kind" : "singleton",
          "name" : "mongodb"
        },
        "name" : "type"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "包含授权数据的 `MongoDB` 集合。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "collection"
      },
      {
        "raw_default" : {
          
        },
        "aliases" : [
          
        ],
        "desc" : "定义查询中过滤条件的条件表达式。\n过滤器支持以下占位符<br/>\n - <code>${username}</code>：在连接时将用客户端使用的 <code>用户名</code> 替换<br/>\n - <code>${clientid}</code>：在连接时将用客户端使用的 <code>客户端 ID</code> 替换",
        "type" : {
          "kind" : "primitive",
          "name" : "map()"
        },
        "name" : "filter",
        "default" : {
          "oneliner" : true,
          "hocon" : "{}"
        }
      },
      {
        "raw_default" : "sharded",
        "aliases" : [
          
        ],
        "desc" : "分片集群。当 MongoDB 服务器以`分片`模式运行时，必须设置为`sharded`。",
        "type" : {
          "kind" : "singleton",
          "name" : "sharded"
        },
        "name" : "mongo_type",
        "default" : {
          "oneliner" : true,
          "hocon" : "sharded"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "集群连接的节点列表。节点应使用逗号分隔，例如：节点[,节点]。\n对于每个节点，应该是要连接的 IPv4 或 IPv6 地址或主机名。\n主机条目具有以下形式：主机[:端口]。\n如果未指定[:端口]，则使用 MongoDB 的默认端口27017。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "servers"
      },
      {
        "raw_default" : "unsafe",
        "aliases" : [
          
        ],
        "desc" : "写入模式",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "unsafe",
            "safe"
          ]
        },
        "name" : "w_mode",
        "default" : {
          "oneliner" : true,
          "hocon" : "unsafe"
        }
      },
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "使用 DNS SRV 记录。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "srv_record",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "raw_default" : 8,
        "aliases" : [
          
        ],
        "desc" : "桥接远端服务时使用的连接池大小。",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "pool_size",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "内部数据库的用户名。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "username"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "内部数据库密码。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema_secret:secret()"
        },
        "name" : "password"
      },
      {
        "raw_default" : "auto",
        "aliases" : [
          
        ],
        "desc" : "是否使用 MongoDB 的传统协议与数据库通信。默认情况下，将尝试自动确定是否支持较新的协议。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "auto",
            "true",
            "false"
          ]
        },
        "name" : "use_legacy_protocol",
        "default" : {
          "oneliner" : true,
          "hocon" : "auto"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "与用户认证信息关联的数据库名称。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "auth_source"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "数据库名字。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "database"
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "mongo:topology"
        },
        "name" : "topology"
      },
      {
        "raw_default" : {
          "enable" : false
        },
        "aliases" : [
          
        ],
        "desc" : "启用 SSL 连接。",
        "type" : {
          "kind" : "struct",
          "name" : "emqx:ssl_client_opts"
        },
        "name" : "ssl",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "authorization.sources.$INDEX"
    ],
    "full_name" : "authz:mongo_single",
    "desc" : "使用 MongoDB 授权（单实例）。",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "数据后端类型",
        "type" : {
          "kind" : "singleton",
          "name" : "mongodb"
        },
        "name" : "type"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "包含授权数据的 `MongoDB` 集合。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "collection"
      },
      {
        "raw_default" : {
          
        },
        "aliases" : [
          
        ],
        "desc" : "定义查询中过滤条件的条件表达式。\n过滤器支持以下占位符<br/>\n - <code>${username}</code>：在连接时将用客户端使用的 <code>用户名</code> 替换<br/>\n - <code>${clientid}</code>：在连接时将用客户端使用的 <code>客户端 ID</code> 替换",
        "type" : {
          "kind" : "primitive",
          "name" : "map()"
        },
        "name" : "filter",
        "default" : {
          "oneliner" : true,
          "hocon" : "{}"
        }
      },
      {
        "raw_default" : "single",
        "aliases" : [
          
        ],
        "desc" : "独立实例。当MongoDB服务器以独立模式运行时，必须设置为`single`。",
        "type" : {
          "kind" : "singleton",
          "name" : "single"
        },
        "name" : "mongo_type",
        "default" : {
          "oneliner" : true,
          "hocon" : "single"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "要连接的 IPv4 或 IPv6 地址或主机名。<br/>主机条目具有以下形式：主机[:端口]。<br/>如果未指定[:端口]，则使用MongoDB的默认端口27017。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "server"
      },
      {
        "raw_default" : "unsafe",
        "aliases" : [
          
        ],
        "desc" : "写入模式",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "unsafe",
            "safe"
          ]
        },
        "name" : "w_mode",
        "default" : {
          "oneliner" : true,
          "hocon" : "unsafe"
        }
      },
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "使用 DNS SRV 记录。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "srv_record",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "raw_default" : 8,
        "aliases" : [
          
        ],
        "desc" : "桥接远端服务时使用的连接池大小。",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "pool_size",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "内部数据库的用户名。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "username"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "内部数据库密码。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema_secret:secret()"
        },
        "name" : "password"
      },
      {
        "raw_default" : "auto",
        "aliases" : [
          
        ],
        "desc" : "是否使用 MongoDB 的传统协议与数据库通信。默认情况下，将尝试自动确定是否支持较新的协议。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "auto",
            "true",
            "false"
          ]
        },
        "name" : "use_legacy_protocol",
        "default" : {
          "oneliner" : true,
          "hocon" : "auto"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "与用户认证信息关联的数据库名称。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "auth_source"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "数据库名字。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "database"
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "mongo:topology"
        },
        "name" : "topology"
      },
      {
        "raw_default" : {
          "enable" : false
        },
        "aliases" : [
          
        ],
        "desc" : "启用 SSL 连接。",
        "type" : {
          "kind" : "struct",
          "name" : "emqx:ssl_client_opts"
        },
        "name" : "ssl",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "authorization.sources.$INDEX"
    ],
    "full_name" : "authz:mysql",
    "desc" : "使用 MySQL 数据库进行授权。",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "数据后端类型",
        "type" : {
          "kind" : "singleton",
          "name" : "mysql"
        },
        "name" : "type"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "用于连接的 IPv4 或 IPv6 地址或主机名。<br/>\n主机条目的格式如下：主机[:端口]。<br/>\n如果未指定[:端口]，将使用 MySQL 的默认端口3306。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "server"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "数据库名字。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "database"
      },
      {
        "raw_default" : 8,
        "aliases" : [
          
        ],
        "desc" : "桥接远端服务时使用的连接池大小。",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "pool_size",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        }
      },
      {
        "raw_default" : "root",
        "aliases" : [
          
        ],
        "desc" : "内部数据库的用户名。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "username",
        "default" : {
          "oneliner" : true,
          "hocon" : "root"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "内部数据库密码。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema_secret:secret()"
        },
        "name" : "password"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "Deprecated since v5.0.15.",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "auto_reconnect"
      },
      {
        "raw_default" : {
          "enable" : false
        },
        "aliases" : [
          
        ],
        "desc" : "启用 SSL 连接。",
        "type" : {
          "kind" : "struct",
          "name" : "emqx:ssl_client_opts"
        },
        "name" : "ssl",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "SQL 预处理语句列表。",
        "type" : {
          "kind" : "primitive",
          "name" : "map()"
        },
        "name" : "prepare_statement"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "用于检索授权数据的数据库查询。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "query"
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "authorization.sources.$INDEX"
    ],
    "full_name" : "authz:postgresql",
    "desc" : "使用 PostgreSQL 数据库进行授权。",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "数据后端类型",
        "type" : {
          "kind" : "singleton",
          "name" : "postgresql"
        },
        "name" : "type"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "要连接的 IPv4 或 IPv6 地址或主机名。<br/>\n一个主机条目的格式为：Host[:Port]。<br/>\n如果没有指定 [:Port]，将使用 PostgreSQL 默认端口 5432。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "server"
      },
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "在连接中禁用预处理语句的使用。\n某些端点，如 PGBouncer 或 Transaction 模式下的 Supabase，\n不支持像处理语句这样的会话功能。 \n 对于此类连接，应启用此选项。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "disable_prepared_statements",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "数据库名字。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "database"
      },
      {
        "raw_default" : 8,
        "aliases" : [
          
        ],
        "desc" : "桥接远端服务时使用的连接池大小。",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "pool_size",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "内部数据库的用户名。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "username"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "内部数据库密码。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema_secret:secret()"
        },
        "name" : "password"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "Deprecated since v5.0.15.",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "auto_reconnect"
      },
      {
        "raw_default" : {
          "enable" : false
        },
        "aliases" : [
          
        ],
        "desc" : "启用 SSL 连接。",
        "type" : {
          "kind" : "struct",
          "name" : "emqx:ssl_client_opts"
        },
        "name" : "ssl",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "SQL 预处理语句列表。",
        "type" : {
          "kind" : "primitive",
          "name" : "map()"
        },
        "name" : "prepare_statement"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "用于检索授权数据的数据库查询。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "query"
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "authorization.sources.$INDEX"
    ],
    "full_name" : "authz:redis_cluster",
    "desc" : "使用 Redis 集群进行授权。",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "数据后端类型",
        "type" : {
          "kind" : "singleton",
          "name" : "redis"
        },
        "name" : "type"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "集群将要连接的节点列表。 节点之间用逗号分隔，如：Node[,Node]。每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。主机名具有以下形式：Host[:Port]。如果未指定 [:Port]，则使用 Redis 默认端口 6379。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "servers"
      },
      {
        "raw_default" : "cluster",
        "aliases" : [
          
        ],
        "desc" : "Cluster 模式。当 Redis 服务器在集群模式下运行时必须设置为'cluster'。",
        "type" : {
          "kind" : "singleton",
          "name" : "cluster"
        },
        "name" : "redis_type",
        "default" : {
          "oneliner" : true,
          "hocon" : "cluster"
        }
      },
      {
        "raw_default" : 8,
        "aliases" : [
          
        ],
        "desc" : "桥接远端服务时使用的连接池大小。",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "pool_size",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "内部数据库的用户名。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "username"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "内部数据库密码。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema_secret:secret()"
        },
        "name" : "password"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "Deprecated since v5.0.15.",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "auto_reconnect"
      },
      {
        "raw_default" : {
          "enable" : false
        },
        "aliases" : [
          
        ],
        "desc" : "启用 SSL 连接。",
        "type" : {
          "kind" : "struct",
          "name" : "emqx:ssl_client_opts"
        },
        "name" : "ssl",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        }
      },
      {
        "examples" : [
          "HGETALL mqtt_authz"
        ],
        "aliases" : [
          
        ],
        "desc" : "用于检索授权数据的数据库查询。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "cmd"
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "authorization.sources.$INDEX"
    ],
    "full_name" : "authz:redis_sentinel",
    "desc" : "使用 Redis Sentinel 进行授权。",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "数据后端类型",
        "type" : {
          "kind" : "singleton",
          "name" : "redis"
        },
        "name" : "type"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "集群将要连接的节点列表。 节点之间用逗号分隔，如：Node[,Node]。每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。主机名具有以下形式：Host[:Port]。如果未指定 [:Port]，则使用 Redis 默认端口 6379。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "servers"
      },
      {
        "raw_default" : "sentinel",
        "aliases" : [
          
        ],
        "desc" : "Sentinel 模式。 当 Redis 服务器在 Senitel 模式下运行时必须设置为 'sentinel' 。",
        "type" : {
          "kind" : "singleton",
          "name" : "sentinel"
        },
        "name" : "redis_type",
        "default" : {
          "oneliner" : true,
          "hocon" : "sentinel"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "Redis sentinel 模式下的集群名称。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "sentinel"
      },
      {
        "raw_default" : 8,
        "aliases" : [
          
        ],
        "desc" : "桥接远端服务时使用的连接池大小。",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "pool_size",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "内部数据库的用户名。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "username"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "内部数据库密码。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema_secret:secret()"
        },
        "name" : "password"
      },
      {
        "raw_default" : 0,
        "aliases" : [
          
        ],
        "desc" : "Redis 数据库 ID。",
        "type" : {
          "kind" : "primitive",
          "name" : "non_neg_integer()"
        },
        "name" : "database",
        "default" : {
          "oneliner" : true,
          "hocon" : "0"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "Deprecated since v5.0.15.",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "auto_reconnect"
      },
      {
        "raw_default" : {
          "enable" : false
        },
        "aliases" : [
          
        ],
        "desc" : "启用 SSL 连接。",
        "type" : {
          "kind" : "struct",
          "name" : "emqx:ssl_client_opts"
        },
        "name" : "ssl",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        }
      },
      {
        "examples" : [
          "HGETALL mqtt_authz"
        ],
        "aliases" : [
          
        ],
        "desc" : "用于检索授权数据的数据库查询。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "cmd"
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "authorization.sources.$INDEX"
    ],
    "full_name" : "authz:redis_single",
    "desc" : "使用单个 Redis 实例进行授权。",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "数据后端类型",
        "type" : {
          "kind" : "singleton",
          "name" : "redis"
        },
        "name" : "type"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "将要连接的 IPv4 或 IPv6 地址，或者主机名。主机名具有以下形式：Host[:Port]。如果未指定 [:Port]，则使用 Redis 默认端口 6379。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "server"
      },
      {
        "raw_default" : "single",
        "aliases" : [
          
        ],
        "desc" : "Single 模式。 当 Redis 服务器在 Single 模式下运行时必须设置为 'single' 。",
        "type" : {
          "kind" : "singleton",
          "name" : "single"
        },
        "name" : "redis_type",
        "default" : {
          "oneliner" : true,
          "hocon" : "single"
        }
      },
      {
        "raw_default" : 8,
        "aliases" : [
          
        ],
        "desc" : "桥接远端服务时使用的连接池大小。",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "pool_size",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "内部数据库的用户名。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "username"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "内部数据库密码。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema_secret:secret()"
        },
        "name" : "password"
      },
      {
        "raw_default" : 0,
        "aliases" : [
          
        ],
        "desc" : "Redis 数据库 ID。",
        "type" : {
          "kind" : "primitive",
          "name" : "non_neg_integer()"
        },
        "name" : "database",
        "default" : {
          "oneliner" : true,
          "hocon" : "0"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "Deprecated since v5.0.15.",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "auto_reconnect"
      },
      {
        "raw_default" : {
          "enable" : false
        },
        "aliases" : [
          
        ],
        "desc" : "启用 SSL 连接。",
        "type" : {
          "kind" : "struct",
          "name" : "emqx:ssl_client_opts"
        },
        "name" : "ssl",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        }
      },
      {
        "examples" : [
          "HGETALL mqtt_authz"
        ],
        "aliases" : [
          
        ],
        "desc" : "用于检索授权数据的数据库查询。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "cmd"
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "actions.elasticsearch.$action_name"
    ],
    "full_name" : "bridge_elasticsearch:action_config",
    "desc" : "ElasticSearch 动作配置项",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "ElasticSearch 动作参数",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "struct",
              "name" : "bridge_elasticsearch:action_create"
            },
            {
              "kind" : "struct",
              "name" : "bridge_elasticsearch:action_delete"
            },
            {
              "kind" : "struct",
              "name" : "bridge_elasticsearch:action_update"
            }
          ],
          "kind" : "union"
        },
        "name" : "parameters"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "由动作指定的连接器名称，用于选择外部资源。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "connector"
      },
      {
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "连接器的标签",
        "type" : {
          "elements" : {
            "kind" : "primitive",
            "name" : "binary()"
          },
          "kind" : "array"
        },
        "name" : "tags"
      },
      {
        "raw_default" : "",
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "描述性文本。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "description",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"\""
        }
      },
      {
        "raw_default" : {
          
        },
        "aliases" : [
          
        ],
        "desc" : "资源相关的选项。",
        "type" : {
          "kind" : "struct",
          "name" : "bridge_elasticsearch:action_resource_opts"
        },
        "name" : "resource_opts",
        "default" : {
          "oneliner" : true,
          "hocon" : "{}"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "actions.elasticsearch.$action_name.parameters"
    ],
    "full_name" : "bridge_elasticsearch:action_create",
    "desc" : "将一个 JSON 文件添加到指定的索引中，并使其可搜索。\n如果目标是一个索引并且文件已经存在，\n请求会更新该文件并增加其版本。",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "create",
        "type" : {
          "kind" : "singleton",
          "name" : "create"
        },
        "name" : "action"
      },
      {
        "examples" : [
          "${payload.index}"
        ],
        "aliases" : [
          
        ],
        "desc" : "执行操作的索引名称或索引别名。\n此参数是必需的。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:template()"
        },
        "name" : "index"
      },
      {
        "examples" : [
          "${payload.id}"
        ],
        "aliases" : [
          
        ],
        "desc" : "文档 ID。如果没有指定 ID，将自动生成。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:template()"
        },
        "name" : "id"
      },
      {
        "examples" : [
          "${payload.doc}"
        ],
        "aliases" : [
          
        ],
        "desc" : "JSON 文档模板，如果留空则为包含所有可用字段的 JSON 文本，如 clientid、topic、payload 等。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:template()"
        },
        "name" : "doc"
      },
      {
        "examples" : [
          "${payload.routing}"
        ],
        "aliases" : [
          
        ],
        "desc" : "用于将操作路由到特定分片的自定义值。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:template()"
        },
        "name" : "routing"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "如果为 true, 则请求的操作必须针对一个索引别名。默认为 false。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "require_alias"
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "如果指定 _id 的文档已经存在（冲突），将设置为 false，操作将失败。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "overwrite",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : 2,
        "aliases" : [
          
        ],
        "desc" : "如果发送请求时出错，最大的重试次数。",
        "type" : {
          "kind" : "primitive",
          "name" : "non_neg_integer()"
        },
        "name" : "max_retries",
        "default" : {
          "oneliner" : true,
          "hocon" : "2"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "actions.elasticsearch.$action_name.parameters"
    ],
    "full_name" : "bridge_elasticsearch:action_delete",
    "desc" : "从指定的索引中删除一个 JSON 文件。",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "delete",
        "type" : {
          "kind" : "singleton",
          "name" : "delete"
        },
        "name" : "action"
      },
      {
        "examples" : [
          "${payload.index}"
        ],
        "aliases" : [
          
        ],
        "desc" : "执行操作的索引名称或索引别名。\n此参数是必需的。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:template()"
        },
        "name" : "index"
      },
      {
        "examples" : [
          "${payload.id}"
        ],
        "aliases" : [
          
        ],
        "desc" : "文档 ID。如果没有指定 ID，将自动生成。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:template()"
        },
        "name" : "id"
      },
      {
        "examples" : [
          "${payload.routing}"
        ],
        "aliases" : [
          
        ],
        "desc" : "用于将操作路由到特定分片的自定义值。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:template()"
        },
        "name" : "routing"
      },
      {
        "raw_default" : 2,
        "aliases" : [
          
        ],
        "desc" : "如果发送请求时出错，最大的重试次数。",
        "type" : {
          "kind" : "primitive",
          "name" : "non_neg_integer()"
        },
        "name" : "max_retries",
        "default" : {
          "oneliner" : true,
          "hocon" : "2"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "actions.elasticsearch.$action_name.resource_opts"
    ],
    "full_name" : "bridge_elasticsearch:action_resource_opts",
    "desc" : "资源选项。",
    "fields" : [
      {
        "raw_default" : 16,
        "aliases" : [
          
        ],
        "desc" : "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
        "type" : {
          "kind" : "primitive",
          "name" : "1..1024"
        },
        "name" : "worker_pool_size",
        "default" : {
          "oneliner" : true,
          "hocon" : "16"
        }
      },
      {
        "raw_default" : "15s",
        "aliases" : [
          
        ],
        "desc" : "健康检查间隔。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:timeout_duration_ms()"
        },
        "name" : "health_check_interval",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15s\""
        }
      },
      {
        "raw_default" : "async",
        "aliases" : [
          
        ],
        "desc" : "请求模式。可选 '同步/异步'，默认为'异步'模式。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "sync",
            "async"
          ]
        },
        "name" : "query_mode",
        "default" : {
          "oneliner" : true,
          "hocon" : "async"
        }
      },
      {
        "raw_default" : "45s",
        "aliases" : [
          "request_timeout"
        ],
        "desc" : "从请求进入缓冲区的时刻开始，如果请求在指定的时间内仍然停留在缓冲区中，或者已经发送但没有及时收到响应或确认，该请求将被视为过期。",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "primitive",
              "name" : "emqx_schema:timeout_duration_ms()"
            },
            {
              "kind" : "singleton",
              "name" : "infinity"
            }
          ],
          "kind" : "union"
        },
        "name" : "request_ttl",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"45s\""
        }
      },
      {
        "raw_default" : 100,
        "aliases" : [
          "async_inflight_window"
        ],
        "desc" : "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "inflight_window",
        "default" : {
          "oneliner" : true,
          "hocon" : "100"
        }
      },
      {
        "raw_default" : "256MB",
        "aliases" : [
          "max_queue_bytes"
        ],
        "desc" : "每个缓存 worker 允许使用的最大字节数。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:bytesize()"
        },
        "name" : "max_buffer_bytes",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"256MB\""
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "actions.elasticsearch.$action_name.parameters"
    ],
    "full_name" : "bridge_elasticsearch:action_update",
    "desc" : "使用指定的文件更新一个文件。",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "update",
        "type" : {
          "kind" : "singleton",
          "name" : "update"
        },
        "name" : "action"
      },
      {
        "examples" : [
          "${payload.index}"
        ],
        "aliases" : [
          
        ],
        "desc" : "执行操作的索引名称或索引别名。\n此参数是必需的。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:template()"
        },
        "name" : "index"
      },
      {
        "examples" : [
          "${payload.id}"
        ],
        "aliases" : [
          
        ],
        "desc" : "文档 ID。如果没有指定 ID，将自动生成。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:template()"
        },
        "name" : "id"
      },
      {
        "examples" : [
          "${payload.doc}"
        ],
        "aliases" : [
          
        ],
        "desc" : "JSON 文档模板，如果留空则为包含所有可用字段的 JSON 文本，如 clientid、topic、payload 等。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:template()"
        },
        "name" : "doc"
      },
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "你可以将 doc_as_upsert 设置为 true，使用 doc 的内容作为 upsert 值，而不是发送一个不完整的文件加上一个 upsert 文件。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "doc_as_upsert",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "examples" : [
          "${payload.routing}"
        ],
        "aliases" : [
          
        ],
        "desc" : "用于将操作路由到特定分片的自定义值。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:template()"
        },
        "name" : "routing"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "如果为 true, 则请求的操作必须针对一个索引别名。默认为 false。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "require_alias"
      },
      {
        "raw_default" : 2,
        "aliases" : [
          
        ],
        "desc" : "如果发送请求时出错，最大的重试次数。",
        "type" : {
          "kind" : "primitive",
          "name" : "non_neg_integer()"
        },
        "name" : "max_retries",
        "default" : {
          "oneliner" : true,
          "hocon" : "2"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "actions.http.$name.resource_opts"
    ],
    "full_name" : "bridge_http:action_resource_opts",
    "desc" : "资源相关的选项。",
    "fields" : [
      {
        "raw_default" : 16,
        "aliases" : [
          
        ],
        "desc" : "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
        "type" : {
          "kind" : "primitive",
          "name" : "1..1024"
        },
        "name" : "worker_pool_size",
        "default" : {
          "oneliner" : true,
          "hocon" : "16"
        }
      },
      {
        "raw_default" : "15s",
        "aliases" : [
          
        ],
        "desc" : "健康检查间隔。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:timeout_duration_ms()"
        },
        "name" : "health_check_interval",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15s\""
        }
      },
      {
        "raw_default" : "async",
        "aliases" : [
          
        ],
        "desc" : "请求模式。可选 '同步/异步'，默认为'异步'模式。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "sync",
            "async"
          ]
        },
        "name" : "query_mode",
        "default" : {
          "oneliner" : true,
          "hocon" : "async"
        }
      },
      {
        "raw_default" : "45s",
        "aliases" : [
          "request_timeout"
        ],
        "desc" : "从请求进入缓冲区的时刻开始，如果请求在指定的时间内仍然停留在缓冲区中，或者已经发送但没有及时收到响应或确认，该请求将被视为过期。",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "primitive",
              "name" : "emqx_schema:timeout_duration_ms()"
            },
            {
              "kind" : "singleton",
              "name" : "infinity"
            }
          ],
          "kind" : "union"
        },
        "name" : "request_ttl",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"45s\""
        }
      },
      {
        "raw_default" : 100,
        "aliases" : [
          "async_inflight_window"
        ],
        "desc" : "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "inflight_window",
        "default" : {
          "oneliner" : true,
          "hocon" : "100"
        }
      },
      {
        "raw_default" : "256MB",
        "aliases" : [
          "max_queue_bytes"
        ],
        "desc" : "每个缓存 worker 允许使用的最大字节数。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:bytesize()"
        },
        "name" : "max_buffer_bytes",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"256MB\""
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "connectors.elasticsearch.$name.resource_opts",
      "connectors.http.$name.resource_opts"
    ],
    "full_name" : "bridge_http:connector_resource_opts",
    "desc" : "资源相关的选项。",
    "fields" : [
      {
        "raw_default" : "15s",
        "aliases" : [
          
        ],
        "desc" : "健康检查间隔。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:timeout_duration_ms()"
        },
        "name" : "health_check_interval",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15s\""
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "是否在创建资源后立即启动资源。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "start_after_created",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : "5s",
        "aliases" : [
          
        ],
        "desc" : "在回复资源创建请求前等待资源进入健康状态的时间。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:timeout_duration_ms()"
        },
        "name" : "start_timeout",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"5s\""
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "connectors.http.$name"
    ],
    "full_name" : "bridge_http:config_connector",
    "desc" : "HTTP 动作的配置",
    "fields" : [
      {
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "连接器的标签",
        "type" : {
          "elements" : {
            "kind" : "primitive",
            "name" : "binary()"
          },
          "kind" : "array"
        },
        "name" : "tags"
      },
      {
        "raw_default" : "",
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "描述性文本。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "description",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"\""
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "HTTP 动作的 URL。<br/>\n此路径允许使用带有变量的模板，但变量不能用于方案、主机或端口部分。<br/>\n例如，<code> http://localhost:9901/${topic} </code> 是允许的，但\n<code> http://${host}:9901/message </code> 或 <code> http://localhost:${port}/message </code>\n是不允许的。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "url"
      },
      {
        "raw_default" : {
          "keep-alive" : "timeout=5",
          "content-type" : "application/json",
          "connection" : "keep-alive",
          "cache-control" : "no-cache",
          "accept" : "application/json"
        },
        "aliases" : [
          
        ],
        "desc" : "HTTP 请求头。<br/>\n允许使用带有变量的模板。",
        "type" : {
          "kind" : "primitive",
          "name" : "map()"
        },
        "name" : "headers",
        "default" : {
          "oneliner" : true,
          "hocon" : "{accept = \"application/json\", cache-control = \"no-cache\", connection = \"keep-alive\", content-type = \"application/json\", keep-alive = \"timeout=5\"}"
        }
      },
      {
        "raw_default" : "15s",
        "aliases" : [
          
        ],
        "desc" : "连接到 HTTP 服务器的超时时间。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:timeout_duration_ms()"
        },
        "name" : "connect_timeout",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15s\""
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "Deprecated since 5.0.4.",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:timeout_duration()"
        },
        "name" : "retry_interval"
      },
      {
        "raw_default" : "random",
        "aliases" : [
          
        ],
        "desc" : "连接池类型。可以是random、hash之一。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "random",
            "hash"
          ]
        },
        "name" : "pool_type",
        "default" : {
          "oneliner" : true,
          "hocon" : "random"
        }
      },
      {
        "raw_default" : 8,
        "aliases" : [
          
        ],
        "desc" : "连接池大小。",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "pool_size",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        }
      },
      {
        "raw_default" : 100,
        "aliases" : [
          
        ],
        "desc" : "一个正整数。是否连续发送 HTTP 请求，当设置为1时，意味着在发送每个 HTTP 请求后，需要等待服务器返回，然后继续发送下一个请求。",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "enable_pipelining",
        "default" : {
          "oneliner" : true,
          "hocon" : "100"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "Deprecated since 5.3.2.",
        "type" : {
          "kind" : "primitive",
          "name" : "map()"
        },
        "name" : "request"
      },
      {
        "raw_default" : {
          "enable" : false
        },
        "aliases" : [
          
        ],
        "desc" : "启用 SSL 连接。",
        "type" : {
          "kind" : "struct",
          "name" : "emqx:ssl_client_opts"
        },
        "name" : "ssl",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        }
      },
      {
        "raw_default" : {
          
        },
        "aliases" : [
          
        ],
        "desc" : "资源相关的选项。",
        "type" : {
          "kind" : "struct",
          "name" : "bridge_http:connector_resource_opts"
        },
        "name" : "resource_opts",
        "default" : {
          "oneliner" : true,
          "hocon" : "{}"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "actions.http.$name"
    ],
    "full_name" : "bridge_http:http_action",
    "desc" : "HTTP 动作的配置",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "由动作指定的连接器名称，用于选择外部资源。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "connector"
      },
      {
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "连接器的标签",
        "type" : {
          "elements" : {
            "kind" : "primitive",
            "name" : "binary()"
          },
          "kind" : "array"
        },
        "name" : "tags"
      },
      {
        "raw_default" : "",
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "描述性文本。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "description",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"\""
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "HTTP 动作的参数",
        "type" : {
          "kind" : "struct",
          "name" : "bridge_http:parameters_opts"
        },
        "name" : "parameters"
      },
      {
        "raw_default" : {
          
        },
        "aliases" : [
          
        ],
        "desc" : "资源相关的选项。",
        "type" : {
          "kind" : "struct",
          "name" : "bridge_http:action_resource_opts"
        },
        "name" : "resource_opts",
        "default" : {
          "oneliner" : true,
          "hocon" : "{}"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "actions.http.$name.parameters"
    ],
    "full_name" : "bridge_http:parameters_opts",
    "desc" : "HTTP 动作的参数",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "此动作的 URL 路径。<br/>\n此路径将附加到连接器的 <code>url</code> 配置，以形成完整的 URL 地址。\n此选项允许使用带有变量的模板。例如，<code>/room/{$room_no}</code>。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:template()"
        },
        "name" : "path"
      },
      {
        "raw_default" : "post",
        "aliases" : [
          
        ],
        "desc" : "HTTP 请求的方法。所有可用的方法包括：post、put、get、delete。<br/>\n允许使用带有变量的模板。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "post",
            "put",
            "get",
            "delete"
          ]
        },
        "name" : "method",
        "default" : {
          "oneliner" : true,
          "hocon" : "post"
        }
      },
      {
        "raw_default" : {
          "keep-alive" : "timeout=5",
          "content-type" : "application/json",
          "connection" : "keep-alive",
          "cache-control" : "no-cache",
          "accept" : "application/json"
        },
        "aliases" : [
          
        ],
        "desc" : "HTTP 请求头。<br/>\n允许使用带有变量的模板。",
        "type" : {
          "kind" : "primitive",
          "name" : "map()"
        },
        "name" : "headers",
        "default" : {
          "oneliner" : true,
          "hocon" : "{accept = \"application/json\", cache-control = \"no-cache\", connection = \"keep-alive\", content-type = \"application/json\", keep-alive = \"timeout=5\"}"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "HTTP 请求的主体。<br/>\n如果未提供，主体将是所有可用字段的 JSON 对象。<br/>\n这里的“所有可用字段”是指在触发此 Webhook 时的 MQTT 消息的上下文（当 local_topic 已设置并接收到 MQTT 消息时触发），<br/>或者当此 Webhook 用作规则的动作时，在触发此 Webhook 时的事件上下文。<br/>允许使用带有变量的模板。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:template()"
        },
        "name" : "body"
      },
      {
        "raw_default" : 2,
        "aliases" : [
          
        ],
        "desc" : "如果发送请求时出错，最大的重试次数。",
        "type" : {
          "kind" : "primitive",
          "name" : "non_neg_integer()"
        },
        "name" : "max_retries",
        "default" : {
          "oneliner" : true,
          "hocon" : "2"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "Deprecated since v5.0.26.",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:duration_ms()"
        },
        "name" : "request_timeout"
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "actions.mqtt.$name.parameters"
    ],
    "full_name" : "bridge_mqtt_publisher:action_parameters",
    "desc" : "动作的具体配置。",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "要转发到远程代理的主题。<br/>\n允许使用带有变量的模板。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:template()"
        },
        "name" : "topic"
      },
      {
        "raw_default" : 1,
        "aliases" : [
          
        ],
        "desc" : "要发送的 MQTT 消息的 QoS 级别。<br/>\n允许使用带有变量的模板。",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "primitive",
              "name" : "qos()"
            },
            {
              "kind" : "primitive",
              "name" : "emqx_schema:template()"
            }
          ],
          "kind" : "union"
        },
        "name" : "qos",
        "default" : {
          "oneliner" : true,
          "hocon" : "1"
        }
      },
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "要发送的 MQTT 消息的'retain'标志。<br/>\n允许使用带有变量的模板。",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "primitive",
              "name" : "boolean()"
            },
            {
              "kind" : "primitive",
              "name" : "emqx_schema:template()"
            }
          ],
          "kind" : "union"
        },
        "name" : "retain",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "要发送的 MQTT 消息的有效载荷。<br/>\n允许使用带有变量的模板。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:template()"
        },
        "name" : "payload"
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "actions.mqtt.$name.resource_opts"
    ],
    "full_name" : "bridge_mqtt_publisher:action_resource_opts",
    "desc" : "资源启动相关的选项。",
    "fields" : [
      {
        "raw_default" : 16,
        "aliases" : [
          
        ],
        "desc" : "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
        "type" : {
          "kind" : "primitive",
          "name" : "1..1024"
        },
        "name" : "worker_pool_size",
        "default" : {
          "oneliner" : true,
          "hocon" : "16"
        }
      },
      {
        "raw_default" : "15s",
        "aliases" : [
          
        ],
        "desc" : "健康检查间隔。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:timeout_duration_ms()"
        },
        "name" : "health_check_interval",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15s\""
        }
      },
      {
        "raw_default" : "async",
        "aliases" : [
          
        ],
        "desc" : "请求模式。可选 '同步/异步'，默认为'异步'模式。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "sync",
            "async"
          ]
        },
        "name" : "query_mode",
        "default" : {
          "oneliner" : true,
          "hocon" : "async"
        }
      },
      {
        "raw_default" : "45s",
        "aliases" : [
          "request_timeout"
        ],
        "desc" : "从请求进入缓冲区的时刻开始，如果请求在指定的时间内仍然停留在缓冲区中，或者已经发送但没有及时收到响应或确认，该请求将被视为过期。",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "primitive",
              "name" : "emqx_schema:timeout_duration_ms()"
            },
            {
              "kind" : "singleton",
              "name" : "infinity"
            }
          ],
          "kind" : "union"
        },
        "name" : "request_ttl",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"45s\""
        }
      },
      {
        "raw_default" : 100,
        "aliases" : [
          "async_inflight_window"
        ],
        "desc" : "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "inflight_window",
        "default" : {
          "oneliner" : true,
          "hocon" : "100"
        }
      },
      {
        "raw_default" : "256MB",
        "aliases" : [
          "max_queue_bytes"
        ],
        "desc" : "每个缓存 worker 允许使用的最大字节数。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:bytesize()"
        },
        "name" : "max_buffer_bytes",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"256MB\""
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "sources.mqtt.$name.parameters"
    ],
    "full_name" : "bridge_mqtt_publisher:ingress_parameters",
    "desc" : "Source 的具体配置",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "从远程代理接收消息的主题",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "topic"
      },
      {
        "raw_default" : 1,
        "aliases" : [
          
        ],
        "desc" : "订阅远程代理时要使用的 QoS 级别.",
        "type" : {
          "kind" : "primitive",
          "name" : "qos()"
        },
        "name" : "qos",
        "default" : {
          "oneliner" : true,
          "hocon" : "1"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "sources.mqtt.$name.resource_opts"
    ],
    "full_name" : "bridge_mqtt_publisher:source_resource_opts",
    "desc" : "资源启动相关的选项。",
    "fields" : [
      {
        "raw_default" : "15s",
        "aliases" : [
          
        ],
        "desc" : "健康检查间隔。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:timeout_duration_ms()"
        },
        "name" : "health_check_interval",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15s\""
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "actions.mqtt.$name"
    ],
    "full_name" : "bridge_mqtt_publisher:mqtt_publisher_action",
    "desc" : "发布动作的配置。",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "local_topic"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "动作的具体配置。",
        "type" : {
          "kind" : "struct",
          "name" : "bridge_mqtt_publisher:action_parameters"
        },
        "name" : "parameters"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "由动作指定的连接器名称，用于选择外部资源。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "connector"
      },
      {
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "连接器的标签",
        "type" : {
          "elements" : {
            "kind" : "primitive",
            "name" : "binary()"
          },
          "kind" : "array"
        },
        "name" : "tags"
      },
      {
        "raw_default" : "",
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "描述性文本。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "description",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"\""
        }
      },
      {
        "raw_default" : {
          
        },
        "aliases" : [
          
        ],
        "desc" : "资源相关的选项。",
        "type" : {
          "kind" : "struct",
          "name" : "bridge_mqtt_publisher:action_resource_opts"
        },
        "name" : "resource_opts",
        "default" : {
          "oneliner" : true,
          "hocon" : "{}"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "sources.mqtt.$name"
    ],
    "full_name" : "bridge_mqtt_publisher:mqtt_subscriber_source",
    "desc" : "订阅 Source 的配置。",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "bridge_mqtt_publisher:ingress_parameters"
        },
        "name" : "parameters"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "由动作指定的连接器名称，用于选择外部资源。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "connector"
      },
      {
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "连接器的标签",
        "type" : {
          "elements" : {
            "kind" : "primitive",
            "name" : "binary()"
          },
          "kind" : "array"
        },
        "name" : "tags"
      },
      {
        "raw_default" : "",
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "描述性文本。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "description",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"\""
        }
      },
      {
        "raw_default" : {
          
        },
        "aliases" : [
          
        ],
        "desc" : "资源相关的选项。",
        "type" : {
          "kind" : "struct",
          "name" : "bridge_mqtt_publisher:source_resource_opts"
        },
        "name" : "resource_opts",
        "default" : {
          "oneliner" : true,
          "hocon" : "{}"
        }
      }
    ]
  },
  {
    "tags" : [
      "Connector"
    ],
    "paths" : [
      "connectors"
    ],
    "full_name" : "connector:connectors",
    "desc" : "用于连接到外部系统的连接器。",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "HTTP Connector Config",
        "type" : {
          "kind" : "map",
          "values" : {
            "kind" : "struct",
            "name" : "bridge_http:config_connector"
          },
          "name" : "name"
        },
        "name" : "http"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "MQTT Connector Config",
        "type" : {
          "kind" : "map",
          "values" : {
            "kind" : "struct",
            "name" : "connector_mqtt:config_connector"
          },
          "name" : "name"
        },
        "name" : "mqtt"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "ElasticSearch Connector Config",
        "type" : {
          "kind" : "map",
          "values" : {
            "kind" : "struct",
            "name" : "elasticsearch:config"
          },
          "name" : "name"
        },
        "name" : "elasticsearch"
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "authentication.$INDEX.request",
      "authorization.sources.$INDEX.request"
    ],
    "full_name" : "connector_http:request",
    "desc" : "",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "HTTP 请求方法。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "method"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "URL 路径。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:template()"
        },
        "name" : "path"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "HTTP 请求的主体。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:template()"
        },
        "name" : "body"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "HTTP 请求头列表。",
        "type" : {
          "kind" : "primitive",
          "name" : "map()"
        },
        "name" : "headers"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "如果发送请求时出错，最大重试次数。",
        "type" : {
          "kind" : "primitive",
          "name" : "non_neg_integer()"
        },
        "name" : "max_retries"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "HTTP 请求超时时间。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:timeout_duration_ms()"
        },
        "name" : "request_timeout"
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "connectors.mqtt.$name.resource_opts"
    ],
    "full_name" : "connector_mqtt:resource_opts",
    "desc" : "资源相关的选项。",
    "fields" : [
      {
        "raw_default" : "15s",
        "aliases" : [
          
        ],
        "desc" : "健康检查间隔。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:timeout_duration_ms()"
        },
        "name" : "health_check_interval",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15s\""
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "是否在创建资源后立即启动资源。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "start_after_created",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : "5s",
        "aliases" : [
          
        ],
        "desc" : "在回复资源创建请求前等待资源进入健康状态的时间。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:timeout_duration_ms()"
        },
        "name" : "start_timeout",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"5s\""
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "connectors.mqtt.$name"
    ],
    "full_name" : "connector_mqtt:config_connector",
    "desc" : "MQTT connector 的配置。",
    "fields" : [
      {
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "连接器的标签",
        "type" : {
          "elements" : {
            "kind" : "primitive",
            "name" : "binary()"
          },
          "kind" : "array"
        },
        "name" : "tags"
      },
      {
        "raw_default" : "",
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "描述性文本。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "description",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"\""
        }
      },
      {
        "raw_default" : 8,
        "aliases" : [
          
        ],
        "desc" : "将发布消息到远程代理的 MQTT 客户端池的大小。<br/>\n每个 MQTT 客户端都将分配'clientid'，格式为'${clientid_prefix}:${bridge_name}:egress:${node}:${n}'\n其中'n'是池中客户端的编号。",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "pool_size",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        }
      },
      {
        "raw_default" : {
          
        },
        "aliases" : [
          
        ],
        "desc" : "资源相关的选项。",
        "type" : {
          "kind" : "struct",
          "name" : "connector_mqtt:resource_opts"
        },
        "name" : "resource_opts",
        "default" : {
          "oneliner" : true,
          "hocon" : "{}"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "Deprecated since v5.1.0 & e5.1.0.",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "cluster_shareload"
          ]
        },
        "name" : "mode"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "远程 MQTT 代理的主机和端口",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "server"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "附加到 egress 动作使用的 clientid 前缀（可选）。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "clientid_prefix"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "Deprecated since v5.0.16.",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "reconnect_interval"
      },
      {
        "raw_default" : "v4",
        "aliases" : [
          
        ],
        "desc" : "MQTT协议版本",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "v3",
            "v4",
            "v5"
          ]
        },
        "name" : "proto_ver",
        "default" : {
          "oneliner" : true,
          "hocon" : "v4"
        }
      },
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "如果启用桥接模式。\n注意：此设置仅适用于 MQTT 协议版本早于5.0的情况，远程 MQTT\n代理必须支持此功能。\n如果将 bridge_mode 设置为true，则桥接将指示远程代理它是一个桥接而不是普通客户端。\n这意味着循环检测将更加有效，并且保留的消息将被正确传递。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "bridge_mode",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "MQTT 协议的用户名",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "username"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "MQTT 协议的密码",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema_secret:secret()"
        },
        "name" : "password"
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "在重新连接到入口动作时是否启动新会话",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "clean_start",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : "300s",
        "aliases" : [
          
        ],
        "desc" : "MQTT Keepalive. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,\n- `s` for seconds,\n- `m` for minutes,\n- `h` for hours;\n<br/>or combination of whereof: `1h5m0s`",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "keepalive",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"300s\""
        }
      },
      {
        "raw_default" : "15s",
        "aliases" : [
          
        ],
        "desc" : "Message retry interval. Delay for the MQTT bridge to retry sending the QoS1/QoS2 messages in case of ACK not received. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,\n- `s` for seconds,\n- `m` for minutes,\n- `h` for hours;\n<br/>or combination of whereof: `1h5m0s`",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "retry_interval",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15s\""
        }
      },
      {
        "raw_default" : 32,
        "aliases" : [
          
        ],
        "desc" : "MQTT 协议的最大 inflight（已发送但未确认）消息数",
        "type" : {
          "kind" : "primitive",
          "name" : "non_neg_integer()"
        },
        "name" : "max_inflight",
        "default" : {
          "oneliner" : true,
          "hocon" : "32"
        }
      },
      {
        "raw_default" : {
          "enable" : false
        },
        "aliases" : [
          
        ],
        "desc" : "启用 SSL 连接。",
        "type" : {
          "kind" : "struct",
          "name" : "emqx:ssl_client_opts"
        },
        "name" : "ssl",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "connectors.elasticsearch.$name.authentication"
    ],
    "full_name" : "elasticsearch:auth_basic",
    "desc" : "Basic Authentication",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "IoTDB REST 接口配置的用户名",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "username"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "ElasticSearch REST 连接密码",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema_secret:secret()"
        },
        "name" : "password"
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "connectors.elasticsearch.$name"
    ],
    "full_name" : "elasticsearch:config",
    "desc" : "ElasticSearch 动作的配置。",
    "fields" : [
      {
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "连接器的标签",
        "type" : {
          "elements" : {
            "kind" : "primitive",
            "name" : "binary()"
          },
          "kind" : "array"
        },
        "name" : "tags"
      },
      {
        "raw_default" : "",
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "描述性文本。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "description",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"\""
        }
      },
      {
        "raw_default" : "15s",
        "aliases" : [
          
        ],
        "desc" : "连接到 HTTP 服务器的超时时间。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:timeout_duration_ms()"
        },
        "name" : "connect_timeout",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15s\""
        }
      },
      {
        "raw_default" : "random",
        "aliases" : [
          
        ],
        "desc" : "连接池类型。可以是random、hash之一。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "random",
            "hash"
          ]
        },
        "name" : "pool_type",
        "default" : {
          "oneliner" : true,
          "hocon" : "random"
        }
      },
      {
        "raw_default" : 8,
        "aliases" : [
          
        ],
        "desc" : "连接池大小。",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "pool_size",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        }
      },
      {
        "raw_default" : 100,
        "aliases" : [
          
        ],
        "desc" : "一个正整数。是否连续发送 HTTP 请求，当设置为1时，意味着在发送每个 HTTP 请求后，需要等待服务器返回，然后继续发送下一个请求。",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "enable_pipelining",
        "default" : {
          "oneliner" : true,
          "hocon" : "100"
        }
      },
      {
        "raw_default" : {
          "enable" : false
        },
        "aliases" : [
          
        ],
        "desc" : "启用 SSL 连接。",
        "type" : {
          "kind" : "struct",
          "name" : "emqx:ssl_client_opts"
        },
        "name" : "ssl",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        }
      },
      {
        "raw_default" : {
          
        },
        "aliases" : [
          
        ],
        "desc" : "资源相关的选项。",
        "type" : {
          "kind" : "struct",
          "name" : "bridge_http:connector_resource_opts"
        },
        "name" : "resource_opts",
        "default" : {
          "oneliner" : true,
          "hocon" : "{}"
        }
      },
      {
        "raw_default" : "127.0.0.1:9200",
        "aliases" : [
          
        ],
        "desc" : "要连接的 IPv4 或 IPv6 地址或主机名。\n一个主机条目有如下形式：`主机[:端口]`。\n如果没有指定 `[:端口]`，则使用 Elasticsearch 默认端口 9200。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "server",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"127.0.0.1:9200\""
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "认证配置",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "struct",
              "name" : "elasticsearch:auth_basic"
            }
          ],
          "kind" : "union"
        },
        "name" : "authentication"
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "telemetry"
    ],
    "full_name" : "emqxtel:telemetry",
    "desc" : "配置 EMQX 节点向 EMQ 的遥测服务器发送遥测数据。\n详情请参考 https://www.emqx.io/docs/zh/v5.1/telemetry/telemetry.html。",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "设置为 `false` 可以关闭数据发送。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "enable"
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "gateway.coap"
    ],
    "full_name" : "gateway:coap",
    "desc" : "The CoAP protocol gateway provides EMQX with the access capability of the CoAP protocol.\nIt allows publishing, subscribing, and receiving messages to EMQX in accordance\nwith a certain defined CoAP message format.",
    "fields" : [
      {
        "raw_default" : "30s",
        "aliases" : [
          
        ],
        "desc" : "CoAP 网关要求客户端的最小心跳间隔时间。\n当 <code>connection_required</code> 开启后，该参数用于检查客户端连接是否存活",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:duration_s()"
        },
        "name" : "heartbeat",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"30s\""
        }
      },
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "是否开启连接模式。\n连接模式是非标准协议的功能。它维护 CoAP 客户端上线、认证、和连接状态的保持",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "connection_required",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "raw_default" : "qos",
        "aliases" : [
          
        ],
        "desc" : "投递给 CoAP 客户端的通知消息类型。当客户端 Observe 一个资源（或订阅某个主题）时，网关会向客户端推送新产生的消息。其消息类型可设置为：<br/>\n\n  - non: 不需要客户端返回确认消息;<br/>\n  - con: 需要客户端返回一个确认消息;<br/>\n  - qos: 取决于消息的 QoS 等级; QoS 0 会以 `non` 类型下发，QoS 1/2 会以 `con` 类型下发",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "non",
            "con",
            "qos"
          ]
        },
        "name" : "notify_type",
        "default" : {
          "oneliner" : true,
          "hocon" : "qos"
        }
      },
      {
        "raw_default" : "coap",
        "aliases" : [
          
        ],
        "desc" : "客户端订阅请求的默认 QoS 等级。\n当 CoAP 客户端发起订阅请求时，如果未携带 `qos` 参数则会使用该默认值。默认值可设置为：<br/>\n  - qos0、 qos1、qos2: 设置为固定的 QoS 等级<br/>\n  - coap: 依据订阅操作的 CoAP 报文类型来动态决定<br/>\n    * 当订阅请求为 `non-confirmable` 类型时，取值为 qos0<br/>\n    * 当订阅请求为 `confirmable` 类型时，取值为 qos1",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "qos0",
            "qos1",
            "qos2",
            "coap"
          ]
        },
        "name" : "subscribe_qos",
        "default" : {
          "oneliner" : true,
          "hocon" : "coap"
        }
      },
      {
        "raw_default" : "coap",
        "aliases" : [
          
        ],
        "desc" : "客户端发布请求的默认 QoS 等级。\n当 CoAP 客户端发起发布请求时，如果未携带 `qos` 参数则会使用该默认值。默认值可设置为：<br/>\n\n  - qos0、qos1、qos2: 设置为固定的 QoS 等级<br/>\n  - coap: 依据发布操作的 CoAP 报文类型来动态决定<br/>\n    * 当发布请求为 `non-confirmable` 类型时，取值为 qos0<br/>\n    * 当发布请求为 `confirmable` 类型时，取值为 qos1",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "qos0",
            "qos1",
            "qos2",
            "coap"
          ]
        },
        "name" : "publish_qos",
        "default" : {
          "oneliner" : true,
          "hocon" : "coap"
        }
      },
      {
        "raw_default" : "",
        "aliases" : [
          
        ],
        "desc" : "发布或订阅时，在所有主题前增加前缀字符串。\n当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。\n例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，\n则客户端实际上订阅了 `some_tenant/t` 主题。\n类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，\n则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。\n挂载点字符串中可用的变量：<br/>\n   - <code>${clientid}</code>：clientid<br/>\n   - <code>${username}</code>：用户名",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "mountpoint",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"\""
        }
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "gateway:udp_listeners"
        },
        "name" : "listeners"
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "是否开启客户端统计",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "enable_stats",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : "30s",
        "aliases" : [
          
        ],
        "desc" : "客户端连接过程的空闲时间。该配置用于：\n  1. 一个新创建的客户端进程如果在该时间间隔内没有收到任何客户端请求，将被直接关闭。\n  2. 一个正在运行的客户进程如果在这段时间后没有收到任何客户请求，将进入休眠状态以节省资源。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_gateway_schema:duration()"
        },
        "name" : "idle_timeout",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"30s\""
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "ClientInfo 重写。",
        "type" : {
          "kind" : "struct",
          "name" : "gateway:clientinfo_override"
        },
        "name" : "clientinfo_override"
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "gateway.exproto"
    ],
    "full_name" : "gateway:exproto",
    "desc" : "Settings for EMQX extension protocol (exproto).",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "配置 ExProto 网关需要启动的 <code>ConnectionAdapter</code> 服务。\n该服务用于提供客户端的认证、发布、订阅和数据下行等功能。",
        "type" : {
          "kind" : "struct",
          "name" : "gateway:exproto_grpc_server"
        },
        "name" : "server"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "配置 ExProto 网关需要请求的 <code>ConnectionHandler</code> 服务地址。\n该服务用于给 ExProto 提供客户端的 Socket 事件处理、字节解码、订阅消息接收等功能。",
        "type" : {
          "kind" : "struct",
          "name" : "gateway:exproto_grpc_handler"
        },
        "name" : "handler"
      },
      {
        "raw_default" : "",
        "aliases" : [
          
        ],
        "desc" : "发布或订阅时，在所有主题前增加前缀字符串。\n当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。\n例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，\n则客户端实际上订阅了 `some_tenant/t` 主题。\n类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，\n则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。\n挂载点字符串中可用的变量：<br/>\n   - <code>${clientid}</code>：clientid<br/>\n   - <code>${username}</code>：用户名",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "mountpoint",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"\""
        }
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "gateway:tcp_udp_listeners"
        },
        "name" : "listeners"
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "是否开启客户端统计",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "enable_stats",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : "30s",
        "aliases" : [
          
        ],
        "desc" : "客户端连接过程的空闲时间。该配置用于：\n  1. 一个新创建的客户端进程如果在该时间间隔内没有收到任何客户端请求，将被直接关闭。\n  2. 一个正在运行的客户进程如果在这段时间后没有收到任何客户请求，将进入休眠状态以节省资源。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_gateway_schema:duration()"
        },
        "name" : "idle_timeout",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"30s\""
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "ClientInfo 重写。",
        "type" : {
          "kind" : "struct",
          "name" : "gateway:clientinfo_override"
        },
        "name" : "clientinfo_override"
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "gateway.exproto.handler"
    ],
    "full_name" : "gateway:exproto_grpc_handler",
    "desc" : "Settings for the exproto gRPC connection handler.",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "对端 gRPC 服务器地址。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "address"
      },
      {
        "raw_default" : "ConnectionUnaryHandler",
        "aliases" : [
          
        ],
        "desc" : "用于处理连接事件的服务名称\n在初始版本中，我们期望使用流来提高 ConnectionHandler 中请求的效率。\n但不幸的是，不同流之间的事件顺序混乱。\n这导致 OnSocketCreated 事件可能会\n在 OnReceivedBytes 之后到达。\n因此，自 v5.0.25 起，我们添加了 `ConnectionUnaryHandler` 服务，并强制在其中使用了 Unary，以避免顺序问题。",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "singleton",
              "name" : "ConnectionHandler"
            },
            {
              "kind" : "singleton",
              "name" : "ConnectionUnaryHandler"
            }
          ],
          "kind" : "union"
        },
        "name" : "service_name",
        "default" : {
          "oneliner" : true,
          "hocon" : "ConnectionUnaryHandler"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "gRPC 客户端的 SSL 配置。",
        "type" : {
          "kind" : "struct",
          "name" : "emqx:ssl_client_opts"
        },
        "name" : "ssl_options"
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "gateway.exproto.server"
    ],
    "full_name" : "gateway:exproto_grpc_server",
    "desc" : "Settings for the exproto gRPC server.",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "服务监听地址和端口。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_exproto_schema:ip_port()"
        },
        "name" : "bind"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "服务 SSL 配置。",
        "type" : {
          "kind" : "struct",
          "name" : "gateway:ssl_server_opts"
        },
        "name" : "ssl_options"
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "gateway.exproto.server.ssl_options"
    ],
    "full_name" : "gateway:ssl_server_opts",
    "desc" : "SSL configuration for the server.",
    "fields" : [
      {
        "raw_default" : "${EMQX_ETC_DIR}/certs/cacert.pem",
        "aliases" : [
          
        ],
        "desc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "cacertfile",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"${EMQX_ETC_DIR}/certs/cacert.pem\""
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "Deprecated since 5.1.4.",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "cacerts"
      },
      {
        "raw_default" : "${EMQX_ETC_DIR}/certs/cert.pem",
        "aliases" : [
          
        ],
        "desc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "certfile",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"${EMQX_ETC_DIR}/certs/cert.pem\""
        }
      },
      {
        "raw_default" : "${EMQX_ETC_DIR}/certs/key.pem",
        "aliases" : [
          
        ],
        "desc" : "PEM 格式的私钥文件。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "keyfile",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"${EMQX_ETC_DIR}/certs/key.pem\""
        }
      },
      {
        "raw_default" : "verify_none",
        "aliases" : [
          
        ],
        "desc" : "启用或禁用对等验证。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "verify_peer",
            "verify_none"
          ]
        },
        "name" : "verify",
        "default" : {
          "oneliner" : true,
          "hocon" : "verify_none"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "启用 TLS 会话重用。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "reuse_sessions",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : 10,
        "aliases" : [
          
        ],
        "desc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
        "type" : {
          "kind" : "primitive",
          "name" : "non_neg_integer()"
        },
        "name" : "depth",
        "default" : {
          "oneliner" : true,
          "hocon" : "10"
        }
      },
      {
        "examples" : [
          ""
        ],
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "password"
      },
      {
        "raw_default" : [
          "tlsv1.3",
          "tlsv1.2"
        ],
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
        "type" : {
          "elements" : {
            "kind" : "primitive",
            "name" : "atom()"
          },
          "kind" : "array"
        },
        "name" : "versions",
        "default" : {
          "oneliner" : true,
          "hocon" : "[\"tlsv1.3\", \"tlsv1.2\"]"
        }
      },
      {
        "raw_default" : [
          
        ],
        "aliases" : [
          
        ],
        "desc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
        "type" : {
          "elements" : {
            "kind" : "primitive",
            "name" : "string()"
          },
          "kind" : "array"
        },
        "name" : "ciphers",
        "default" : {
          "oneliner" : true,
          "hocon" : "[]"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "secure_renegotiate",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : "notice",
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "emergency",
            "alert",
            "critical",
            "error",
            "warning",
            "notice",
            "info",
            "debug",
            "none",
            "all"
          ]
        },
        "name" : "log_level",
        "default" : {
          "oneliner" : true,
          "hocon" : "notice"
        }
      },
      {
        "raw_default" : "5s",
        "aliases" : [
          
        ],
        "desc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:duration()"
        },
        "name" : "hibernate_after",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"5s\""
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "如果协商使用 Diffie-Hellman 密钥交换的密码套件，则服务器将使用包含 PEM 编码的 Diffie-Hellman 参数的文件的路径。如果未指定，则使用默认参数。<br/>\n注意：TLS 1.3 不支持<code>dhfile</code>选项。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "dhfile"
      },
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "TLS/DTLS 服务器与 {verify，verify_peer} 一起使用。\n如果设置为 true，则如果客户端没有要发送的证书，即发送空证书，服务器将失败。\n如果设置为 false，则仅当客户端发送无效证书（空证书被视为有效证书）时才会失败。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "fail_if_no_peer_cert",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "一个重要的安全设置，它强制根据服务器指定的顺序而不是客户机指定的顺序设置密码，从而强制服务器管理员执行（通常配置得更正确）安全顺序。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "honor_cipher_order",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "在支持客户机发起的重新协商的协议中，这种操作的资源成本对于服务器来说高于客户机。\n这可能会成为拒绝服务攻击的载体。\nSSL 应用程序已经采取措施来反击此类尝试，但通过将此选项设置为 false，可以严格禁用客户端发起的重新协商。\n默认值为 true。请注意，由于基础密码套件可以加密的消息数量有限，禁用重新协商可能会导致长期连接变得不可用。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "client_renegotiation",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : "15s",
        "aliases" : [
          
        ],
        "desc" : "握手完成所允许的最长时间",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:duration()"
        },
        "name" : "handshake_timeout",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15s\""
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "gateway.mqttsn"
    ],
    "full_name" : "gateway:mqttsn",
    "desc" : "The MQTT-SN (MQTT for Sensor Networks) protocol gateway.",
    "fields" : [
      {
        "raw_default" : 1,
        "aliases" : [
          
        ],
        "desc" : "MQTT-SN 网关 ID。\n当 <code>broadcast</code> 打开时，MQTT-SN 网关会使用该 ID 来广播 ADVERTISE 消息",
        "type" : {
          "kind" : "primitive",
          "name" : "integer()"
        },
        "name" : "gateway_id",
        "default" : {
          "oneliner" : true,
          "hocon" : "1"
        }
      },
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "是否周期性广播 ADVERTISE 消息",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "broadcast",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "是否允许无连接的客户端发送 QoS 等于 -1 的消息。\n该功能主要用于支持轻量的 MQTT-SN 客户端实现，它不会向网关建立连接，注册主题，也不会发起订阅；它只使用 QoS 为 -1 来发布消息",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "enable_qos3",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "在会话被重用后，网关是否主动向客户端注册对已订阅主题名称",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "subs_resume",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "raw_default" : [
          
        ],
        "aliases" : [
          
        ],
        "desc" : "预定义主题列表。\n预定义的主题列表，是一组 主题 ID 和 主题名称 的映射关系。使用预先定义的主题列表，可以减少 MQTT-SN 客户端和网关对于固定主题的注册请求",
        "type" : {
          "elements" : {
            "kind" : "struct",
            "name" : "gateway:mqttsn_predefined"
          },
          "kind" : "array"
        },
        "name" : "predefined",
        "default" : {
          "oneliner" : true,
          "hocon" : "[]"
        }
      },
      {
        "raw_default" : "",
        "aliases" : [
          
        ],
        "desc" : "发布或订阅时，在所有主题前增加前缀字符串。\n当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。\n例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，\n则客户端实际上订阅了 `some_tenant/t` 主题。\n类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，\n则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。\n挂载点字符串中可用的变量：<br/>\n   - <code>${clientid}</code>：clientid<br/>\n   - <code>${username}</code>：用户名",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "mountpoint",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"\""
        }
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "gateway:udp_listeners"
        },
        "name" : "listeners"
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "是否开启客户端统计",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "enable_stats",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : "30s",
        "aliases" : [
          
        ],
        "desc" : "客户端连接过程的空闲时间。该配置用于：\n  1. 一个新创建的客户端进程如果在该时间间隔内没有收到任何客户端请求，将被直接关闭。\n  2. 一个正在运行的客户进程如果在这段时间后没有收到任何客户请求，将进入休眠状态以节省资源。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_gateway_schema:duration()"
        },
        "name" : "idle_timeout",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"30s\""
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "ClientInfo 重写。",
        "type" : {
          "kind" : "struct",
          "name" : "gateway:clientinfo_override"
        },
        "name" : "clientinfo_override"
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "gateway.mqttsn.predefined.$INDEX"
    ],
    "full_name" : "gateway:mqttsn_predefined",
    "desc" : "The pre-defined topic name corresponding to the pre-defined topic\nID of N.\n\nNote: the pre-defined topic ID of 0 is reserved.",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "主题 ID。范围：1-65535",
        "type" : {
          "kind" : "primitive",
          "name" : "1..1024"
        },
        "name" : "id"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "主题名称。注：不支持通配符",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "topic"
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "gateway.stomp"
    ],
    "full_name" : "gateway:stomp",
    "desc" : "The STOMP protocol gateway provides EMQX with the ability to access STOMP\n(Simple (or Streaming) Text Orientated Messaging Protocol) protocol.",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "gateway:stomp_frame"
        },
        "name" : "frame"
      },
      {
        "raw_default" : "",
        "aliases" : [
          
        ],
        "desc" : "发布或订阅时，在所有主题前增加前缀字符串。\n当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。\n例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，\n则客户端实际上订阅了 `some_tenant/t` 主题。\n类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，\n则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。\n挂载点字符串中可用的变量：<br/>\n   - <code>${clientid}</code>：clientid<br/>\n   - <code>${username}</code>：用户名",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "mountpoint",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"\""
        }
      },
      {
        "aliases" : [
          
        ],
        "type" : {
          "kind" : "struct",
          "name" : "gateway:tcp_listeners"
        },
        "name" : "listeners"
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "是否开启客户端统计",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "enable_stats",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : "30s",
        "aliases" : [
          
        ],
        "desc" : "客户端连接过程的空闲时间。该配置用于：\n  1. 一个新创建的客户端进程如果在该时间间隔内没有收到任何客户端请求，将被直接关闭。\n  2. 一个正在运行的客户进程如果在这段时间后没有收到任何客户请求，将进入休眠状态以节省资源。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_gateway_schema:duration()"
        },
        "name" : "idle_timeout",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"30s\""
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "ClientInfo 重写。",
        "type" : {
          "kind" : "struct",
          "name" : "gateway:clientinfo_override"
        },
        "name" : "clientinfo_override"
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "gateway.stomp.frame"
    ],
    "full_name" : "gateway:stomp_frame",
    "desc" : "Size limits for the STOMP frames.",
    "fields" : [
      {
        "raw_default" : 10,
        "aliases" : [
          
        ],
        "desc" : "头部的最大数量",
        "type" : {
          "kind" : "primitive",
          "name" : "non_neg_integer()"
        },
        "name" : "max_headers",
        "default" : {
          "oneliner" : true,
          "hocon" : "10"
        }
      },
      {
        "raw_default" : 1024,
        "aliases" : [
          
        ],
        "desc" : "允许的 Header 字符串的最大长度",
        "type" : {
          "kind" : "primitive",
          "name" : "non_neg_integer()"
        },
        "name" : "max_headers_length",
        "default" : {
          "oneliner" : true,
          "hocon" : "1024"
        }
      },
      {
        "raw_default" : 65536,
        "aliases" : [
          
        ],
        "desc" : "每个 Stomp 数据包允许的 Body 的最大字节数",
        "type" : {
          "kind" : "primitive",
          "name" : "integer()"
        },
        "name" : "max_body_length",
        "default" : {
          "oneliner" : true,
          "hocon" : "65536"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "authentication.$INDEX.ssl",
      "authorization.sources.$INDEX.ssl"
    ],
    "full_name" : "ldap:ssl",
    "desc" : "启用 SSL 连接。",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "cacertfile"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "Deprecated since 5.1.4.",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "cacerts"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "certfile"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "PEM 格式的私钥文件。",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "keyfile"
      },
      {
        "raw_default" : "verify_none",
        "aliases" : [
          
        ],
        "desc" : "启用或禁用对等验证。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "verify_peer",
            "verify_none"
          ]
        },
        "name" : "verify",
        "default" : {
          "oneliner" : true,
          "hocon" : "verify_none"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "启用 TLS 会话重用。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "reuse_sessions",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : 10,
        "aliases" : [
          
        ],
        "desc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
        "type" : {
          "kind" : "primitive",
          "name" : "non_neg_integer()"
        },
        "name" : "depth",
        "default" : {
          "oneliner" : true,
          "hocon" : "10"
        }
      },
      {
        "examples" : [
          ""
        ],
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "password"
      },
      {
        "raw_default" : [
          "tlsv1.3",
          "tlsv1.2"
        ],
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
        "type" : {
          "elements" : {
            "kind" : "primitive",
            "name" : "atom()"
          },
          "kind" : "array"
        },
        "name" : "versions",
        "default" : {
          "oneliner" : true,
          "hocon" : "[\"tlsv1.3\", \"tlsv1.2\"]"
        }
      },
      {
        "raw_default" : [
          
        ],
        "aliases" : [
          
        ],
        "desc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
        "type" : {
          "elements" : {
            "kind" : "primitive",
            "name" : "string()"
          },
          "kind" : "array"
        },
        "name" : "ciphers",
        "default" : {
          "oneliner" : true,
          "hocon" : "[]"
        }
      },
      {
        "raw_default" : true,
        "aliases" : [
          
        ],
        "desc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "secure_renegotiate",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        }
      },
      {
        "raw_default" : "notice",
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "emergency",
            "alert",
            "critical",
            "error",
            "warning",
            "notice",
            "info",
            "debug",
            "none",
            "all"
          ]
        },
        "name" : "log_level",
        "default" : {
          "oneliner" : true,
          "hocon" : "notice"
        }
      },
      {
        "raw_default" : "5s",
        "aliases" : [
          
        ],
        "desc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:duration()"
        },
        "name" : "hibernate_after",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"5s\""
        }
      },
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "启用 TLS。",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "enable",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "examples" : [
          "disable"
        ],
        "aliases" : [
          
        ],
        "desc" : "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
        "type" : {
          "display_name" : "undefined",
          "members" : [
            {
              "kind" : "singleton",
              "name" : "disable"
            },
            {
              "kind" : "primitive",
              "name" : "string()"
            }
          ],
          "kind" : "union"
        },
        "name" : "server_name_indication"
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "authentication.$INDEX.topology",
      "authorization.sources.$INDEX.topology"
    ],
    "full_name" : "mongo:topology",
    "desc" : "MongoDB 的拓扑结构。",
    "fields" : [
      {
        "raw_default" : 0,
        "aliases" : [
          
        ],
        "desc" : "在池中的所有工作线程都繁忙时，可以创建的附加工作线程的最大数量。这有助于通过允许更多并发连接到 MongoDB 服务器来管理工作负载的暂时性波动。",
        "type" : {
          "kind" : "primitive",
          "name" : "non_neg_integer()"
        },
        "name" : "max_overflow",
        "default" : {
          "oneliner" : true,
          "hocon" : "0"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "超出配置的池大小（\"溢出\"）的工作线程在终止之前的时间段。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:timeout_duration_ms()"
        },
        "name" : "overflow_ttl"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "检查是否存在多余工作线程（\"溢出\"）的周期。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:timeout_duration_ms()"
        },
        "name" : "overflow_check_period"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "用于在多个合适的 MongoDB 实例中进行选择的延迟窗口的大小。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:timeout_duration_ms()"
        },
        "name" : "local_threshold_ms"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "在超时之前尝试连接的持续时间。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:timeout_duration_ms()"
        },
        "name" : "connect_timeout_ms"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "在套接字上尝试发送或接收超时之前的持续时间。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:timeout_duration_ms()"
        },
        "name" : "socket_timeout_ms"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "指定在抛出异常之前进行服务器选择的阻塞时间。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:timeout_duration_ms()"
        },
        "name" : "server_selection_timeout_ms"
      },
      {
        "aliases" : [
          
        ],
        "desc" : "工作线程等待连接可用的最长时间。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:timeout_duration_ms()"
        },
        "name" : "wait_queue_timeout_ms"
      },
      {
        "raw_default" : "200s",
        "aliases" : [
          
        ],
        "desc" : "控制驱动程序何时检查 MongoDB 部署的状态。指定检查之间的时间间隔，从上次检查结束到下次检查开始计算。如果连接数增加（例如，如果增加了池大小），则可能需要增加此时间间隔，以避免在 MongoDB 日志文件中创建过多的日志条目。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:timeout_duration_ms()"
        },
        "name" : "heartbeat_frequency_ms",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"200s\""
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "控制心跳之间等待的最短时间。",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:timeout_duration_ms()"
        },
        "name" : "min_heartbeat_frequency_ms"
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "plugins"
    ],
    "full_name" : "plugin:plugins",
    "desc" : "管理 EMQX 插件。<br/>\n插件可以是 EMQX 安装包中的一部分，也可以是一个独立的安装包。<br/>\n独立安装的插件称为“外部插件”。",
    "fields" : [
      {
        "raw_default" : [
          
        ],
        "importance" : "high",
        "aliases" : [
          
        ],
        "desc" : "一组插件的状态。插件将按照定义的顺序启动",
        "type" : {
          "elements" : {
            "kind" : "struct",
            "name" : "plugin:state"
          },
          "kind" : "array"
        },
        "name" : "states",
        "default" : {
          "oneliner" : true,
          "hocon" : "[]"
        }
      },
      {
        "raw_default" : "plugins",
        "importance" : "low",
        "aliases" : [
          
        ],
        "desc" : "插件安装包的目录，出于安全考虑，该目录应该值允许 <code>emqx</code>，或用于运行 EMQX 服务的用户拥有写入权限。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "install_dir",
        "default" : {
          "oneliner" : true,
          "hocon" : "plugins"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "Deprecated since 5.0.24.",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:duration()"
        },
        "name" : "check_interval"
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "plugins.states.$INDEX"
    ],
    "full_name" : "plugin:state",
    "desc" : "描述插件的状态",
    "fields" : [
      {
        "aliases" : [
          
        ],
        "desc" : "插件的名称{name}-{version}。<br/>\n它应该与插件的发布包名称一致，如 my_plugin-0.1.0。",
        "type" : {
          "kind" : "primitive",
          "name" : "string()"
        },
        "name" : "name_vsn"
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "psk_authentication"
    ],
    "full_name" : "psk:psk_authentication",
    "desc" : "此配置用于启用 TLS-PSK 身份验证。\n\nPSK 是 “Pre-Shared-Keys” 的缩写。\n\n注意: 确保 SSL 监听器仅启用了 'tlsv1.2'，并且配置了 PSK 密码套件，例如 'RSA-PSK-AES256-GCM-SHA384'。\n\n可以通过查看监听器中的 SSL 选项，了解更多详细信息。\n\n可以通过配置 'init_file' 来设置初始化的 ID 和 密钥",
    "fields" : [
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "是否开启 TLS PSK 支持",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "enable",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "aliases" : [
          
        ],
        "desc" : "如果设置了初始化文件，EMQX 将在启动时从初始化文件中导入 PSK 信息到内建数据库中。\n这个文件需要按行进行组织，每一行必须遵守如下格式: <code>PSKIdentity:SharedSecret</code>\n例如: <code>mydevice1:c2VjcmV0</code>",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "init_file"
      },
      {
        "raw_default" : ":",
        "aliases" : [
          
        ],
        "desc" : "PSK 文件中 <code>PSKIdentity</code> 和 <code>SharedSecret</code> 之间的分隔符",
        "type" : {
          "kind" : "primitive",
          "name" : "binary()"
        },
        "name" : "separator",
        "default" : {
          "oneliner" : true,
          "hocon" : "\":\""
        }
      },
      {
        "raw_default" : 50,
        "aliases" : [
          
        ],
        "desc" : "将 PSK 文件导入到内建数据时每个块的大小",
        "type" : {
          "kind" : "primitive",
          "name" : "integer()"
        },
        "name" : "chunk_size",
        "default" : {
          "oneliner" : true,
          "hocon" : "50"
        }
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "slow_subs"
    ],
    "full_name" : "slow_subs",
    "desc" : "Configuration for `slow_subs` feature.",
    "fields" : [
      {
        "raw_default" : false,
        "aliases" : [
          
        ],
        "desc" : "开启慢订阅",
        "type" : {
          "kind" : "primitive",
          "name" : "boolean()"
        },
        "name" : "enable",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        }
      },
      {
        "raw_default" : "500ms",
        "aliases" : [
          
        ],
        "desc" : "慢订阅统计的阈值",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:duration_ms()"
        },
        "name" : "threshold",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"500ms\""
        }
      },
      {
        "raw_default" : "300s",
        "aliases" : [
          
        ],
        "desc" : "慢订阅记录的有效时间",
        "type" : {
          "kind" : "primitive",
          "name" : "emqx_schema:duration_ms()"
        },
        "name" : "expire_interval",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"300s\""
        }
      },
      {
        "raw_default" : 10,
        "aliases" : [
          
        ],
        "desc" : "慢订阅统计表的记录数量上限",
        "type" : {
          "kind" : "primitive",
          "name" : "pos_integer()"
        },
        "name" : "top_k_num",
        "default" : {
          "oneliner" : true,
          "hocon" : "10"
        }
      },
      {
        "raw_default" : "whole",
        "aliases" : [
          
        ],
        "desc" : "慢订阅的统计类型",
        "type" : {
          "kind" : "enum",
          "symbols" : [
            "whole",
            "internal",
            "response"
          ]
        },
        "name" : "stats_type",
        "default" : {
          "oneliner" : true,
          "hocon" : "whole"
        }
      }
    ]
  }
]